import FWCore.ParameterSet.Config as cms

process = cms.Process("RECO")

process.source = cms.Source("PoolSource",
    fileNames = cms.untracked.vstring('test.root')
)
process.APVPhases = cms.EDProducer("APVCyclePhaseProducerFromL1TS",
    defaultPartitionNames = cms.vstring('TI', 
        'TO', 
        'TP', 
        'TM'),
    l1TSCollection = cms.InputTag("scalersRawToDigi"),
    defaultPhases = cms.vint32(30, 30, 30, 30)
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    MaxSeeds = cms.int32(1000),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    EnableDTMeasurement = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
    EnableCSCMeasurement = cms.bool(True)
)


process.DiJProd = cms.EDProducer("AlCaDiJetsProducer",
    hbheInput = cms.InputTag("hbhereco"),
    jetsInput = cms.InputTag("iterativeCone5CaloJets"),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.GammaJetProd = cms.EDProducer("AlCaGammaJetProducer",
    correctedIslandBarrelSuperClusterCollection = cms.string(''),
    hbheInput = cms.InputTag("hbhereco"),
    correctedIslandEndcapSuperClusterCollection = cms.string(''),
    correctedIslandEndcapSuperClusterProducer = cms.string('correctedIslandEndcapSuperClusters'),
    hoInput = cms.InputTag("horeco"),
    hfInput = cms.InputTag("hfreco"),
    correctedIslandBarrelSuperClusterProducer = cms.string('correctedIslandBarrelSuperClusters'),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    srcCalo = cms.VInputTag(cms.InputTag("iterativeCone7CaloJets")),
    inputTrackLabel = cms.untracked.string('generalTracks')
)


process.HcalNoiseProd = cms.EDProducer("AlCaEcalHcalReadoutsProducer",
    hbheInput = cms.InputTag("hbhereco"),
    MetSource = cms.InputTag("met"),
    TowerSource = cms.InputTag("towerMaker"),
    JetHCALminEnergyFraction = cms.double(0.98),
    JetSource = cms.InputTag("iterativeCone5CaloJets"),
    UseJet = cms.bool(True),
    JetMinE = cms.double(20),
    MetCut = cms.double(0),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    ecalPSInput = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    rawInput = cms.InputTag("rawDataCollector"),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseMET = cms.bool(False)
)


process.IsoProd = cms.EDProducer("AlCaIsoTracksProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    ECALMatrixFullSize = cms.int32(7),
    ClusterECALasMatrix = cms.bool(False),
    RIsolAtHCALSurface = cms.double(64.0),
    ECALClusterRadius = cms.double(9.0),
    HOInput = cms.InputTag("horeco"),
    l1JetVetoCone = cms.double(1.2),
    ECALRingInnerRadius = cms.double(15.0),
    InputTracksLabel = cms.InputTag("generalTracks"),
    vtxCut = cms.double(10.0),
    hltTriggerEventLabel = cms.InputTag("hltTriggerSummaryAOD"),
    MaxTrackEta = cms.double(2.0),
    SkipNeutralIsoCheck = cms.untracked.bool(True),
    MinNumberOfHitsInConeTracks = cms.int32(3),
    HBHEInput = cms.InputTag("hbhereco"),
    l1FilterLabel = cms.string('hltL1sIsoTrack'),
    ECALInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    MinTrackPt = cms.double(0.0),
    hltMatchingCone = cms.double(0.2),
    MaxNearbyTrackEnergy = cms.double(2.0),
    MinTrackP = cms.double(10.0),
    ECALRingOuterRadius = cms.double(35.0),
    MinNumberOfHitsCoreTrack = cms.int32(8),
    hltL3FilterLabels = cms.vstring('hltIsolPixelTrackL3FilterHB', 
        'hltIsolPixelTrackL3FilterHE'),
    CheckHLTMatch = cms.bool(False),
    UseLowPtConeCorrection = cms.bool(False)
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    deleteAfterCopy = cms.untracked.bool(True),
    Verbosity = cms.untracked.int32(0),
    Frequency = cms.untracked.int32(50),
    Name = cms.untracked.string('MEtoEDMConverter'),
    MEPathToSave = cms.untracked.string('')
)


process.MuonSeed = cms.EDProducer("MuonSeedProducer",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    minimumSeedPt = cms.double(5.0),
    minCSCHitsPerSegment = cms.int32(4),
    maxDeltaPhiDT = cms.double(0.3),
    defaultSeedPt = cms.double(25.0),
    EnableCSCMeasurement = cms.bool(True),
    maxDeltaPhiOverlap = cms.double(0.25),
    minDTHitsPerSegment = cms.int32(2),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    maxEtaResolutionCSC = cms.double(0.06),
    maxPhiResolutionCSC = cms.double(0.03),
    maxDeltaEtaOverlap = cms.double(0.08),
    EnableDTMeasurement = cms.bool(True),
    DTSegmentLabel = cms.InputTag("dt4DSegments"),
    SeedPtSystematics = cms.double(0.1),
    maximumSeedPt = cms.double(3000.0),
    maxEtaResolutionDT = cms.double(0.02),
    maxDeltaEtaCSC = cms.double(0.2),
    maxDeltaPhiCSC = cms.double(0.5),
    maxDeltaEtaDT = cms.double(0.3),
    DebugMuonSeed = cms.bool(False),
    maxPhiResolutionDT = cms.double(0.03)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    DoHcalTowerIsolationCut = cms.bool(True),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMSolidTrkEE = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    DoSolidConeNTrkCut = cms.bool(False),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    DoHadOverEMCut = cms.bool(True),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    photonLabel = cms.string(''),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    DoHollowConeNTrkCut = cms.bool(False),
    doCutBased = cms.bool(True),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonR9CutEB = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonHadOverEMEE = cms.double(0.05),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    DoEcalRecHitIsolationCut = cms.bool(True),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHadOverEMEB = cms.double(0.05),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    DoR9Cut = cms.bool(False),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHadOverEMEB = cms.double(0.05),
    DoEtaWidthCut = cms.bool(True),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonR9CutEB = cms.double(0.0),
    DoEcalIsoRelativeCut = cms.bool(True),
    photonProducer = cms.string('photons'),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999)
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SETTrajBuilderParameters = cms.PSet(
        SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0),
        SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0),
        SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0),
        OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0),
        SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0),
        SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0),
        SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0),
        SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0),
        OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0),
        DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638),
        DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219),
        DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269),
        OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0),
        CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065),
        CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835),
        CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802),
        CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0),
        SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0),
        SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0),
        OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0),
        SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0),
        SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0),
        SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0),
        DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012),
        DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984),
        SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0),
        SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0),
        CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395),
        CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916),
        SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0),
        SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0),
        DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346),
        CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139),
        OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0),
        CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142),
        CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        scaleDT = cms.bool(True),
        Apply_prePruning = cms.bool(True),
        UseSegmentsInTrajectory = cms.bool(False),
        FilterParameters = cms.PSet(
            OutsideChamberErrorScale = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MinLocalSegmentAngle = cms.double(0.09),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            maxActiveChambers = cms.int32(100),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        )
    )
)


process.TkAlLASsiStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    UseDaqRegister = cms.bool(False),
    ProductLabel = cms.InputTag("source"),
    UnpackCommonModeValues = cms.bool(False),
    AppendedBytes = cms.int32(0),
    UseFedKey = cms.bool(False),
    TriggerFedId = cms.int32(0),
    MarkModulesOnMissingFeds = cms.bool(True),
    UnpackBadChannels = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False)
)


process.TrackProducer = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ak5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.7),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.akPu5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.akPu7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.7),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.7)
)


process.alCaIsolatedElectrons = cms.EDProducer("AlCaElectronsProducer",
    electronLabel = cms.InputTag("gsfElectrons"),
    alcaEndcapHitCollection = cms.string('alcaEndcapHits'),
    phiSize = cms.int32(11),
    etaSize = cms.int32(5),
    ebRecHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    alcaPreshowerHitCollection = cms.string('alcaPreshowerHits'),
    alcaBarrelHitCollection = cms.string('alcaBarrelHits'),
    esNstrips = cms.int32(20),
    eventWeight = cms.double(1.0),
    esRecHitsLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    eeRecHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    esNcolumns = cms.int32(1)
)


process.alcaBeamSpotProducer = cms.EDProducer("AlcaBeamSpotProducer",
    BeamFitter = cms.PSet(
        MaximumNormChi2 = cms.untracked.double(10),
        MaximumEta = cms.untracked.double(2.4),
        MaximumZ = cms.untracked.double(60),
        SaveNtuple = cms.untracked.bool(False),
        IsMuonCollection = cms.untracked.bool(False),
        WriteAscii = cms.untracked.bool(False),
        FractionOfFittedTrks = cms.untracked.double(0.9),
        WriteDIPAscii = cms.untracked.bool(False),
        OutputFileName = cms.untracked.string('analyze_d0_phi.root'),
        AsciiFileName = cms.untracked.string('BeamFit.txt'),
        SaveFitResults = cms.untracked.bool(False),
        TrackCollection = cms.untracked.InputTag("ALCARECOTkAlMinBias"),
        MinimumPixelLayers = cms.untracked.int32(-1),
        InputBeamWidth = cms.untracked.double(-1.0),
        Debug = cms.untracked.bool(False),
        MinimumPt = cms.untracked.double(1.0),
        TrackAlgorithm = cms.untracked.vstring(),
        MinimumInputTracks = cms.untracked.int32(50),
        AppendRunToFileName = cms.untracked.bool(True),
        SavePVVertices = cms.untracked.bool(False),
        DIPFileName = cms.untracked.string('BeamFitDIP.txt'),
        MinimumTotalLayers = cms.untracked.int32(6),
        TrackQuality = cms.untracked.vstring(),
        MaximumImpactParameter = cms.untracked.double(1.0)
    ),
    AlcaBeamSpotProducerParameters = cms.PSet(
        resetEveryNLumi = cms.untracked.int32(1),
        WriteToDB = cms.bool(False),
        fitEveryNLumi = cms.untracked.int32(1),
        RunAllFitters = cms.bool(False),
        RunBeamWidthFit = cms.bool(False)
    ),
    PVFitter = cms.PSet(
        minVertexNdf = cms.untracked.double(10.0),
        nSigmaCut = cms.untracked.double(5.0),
        errorScale = cms.untracked.double(0.9),
        Apply3DFit = cms.untracked.bool(True),
        VertexCollection = cms.untracked.InputTag("offlinePrimaryVertices"),
        FitPerBunchCrossing = cms.untracked.bool(False),
        minVertexNTracks = cms.untracked.uint32(0),
        minVertexMeanWeight = cms.untracked.double(0.5),
        maxVertexR = cms.untracked.double(2),
        maxNrStoredVertices = cms.untracked.uint32(10000),
        Debug = cms.untracked.bool(False),
        minNrVerticesForFit = cms.untracked.uint32(10),
        maxVertexNormChi2 = cms.untracked.double(10.0),
        maxVertexZ = cms.untracked.double(10)
    )
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    crackWindow = cms.double(0.04),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    scaleDT = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True)
)


process.ca4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.calZeroBiasClusters = cms.EDProducer("SiStripClusterizer",
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    Clusterizer = cms.PSet(
        ChannelThreshold = cms.double(2.0),
        MaxSequentialBad = cms.uint32(1),
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        MaxSequentialHoles = cms.uint32(0),
        MaxAdjacentBad = cms.uint32(0),
        QualityLabel = cms.string('unbiased'),
        SeedThreshold = cms.double(3.0),
        ClusterThreshold = cms.double(5.0)
    )
)


process.caloTowers = cms.EDProducer("CaloTowerCandidateCreator",
    src = cms.InputTag("towerMaker"),
    e = cms.double(0.0),
    verbose = cms.untracked.int32(0),
    pt = cms.double(0.0),
    minimumE = cms.double(0.0),
    minimumEt = cms.double(0.0),
    et = cms.double(0.0)
)


process.calomuons = cms.EDProducer("CaloMuonProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputMuons = cms.InputTag("muons"),
    inputTracks = cms.InputTag("hiGlobalPrimTracks"),
    minCaloCompatibility = cms.double(0.6),
    inputCollection = cms.InputTag("muons"),
    minPt = cms.double(1.0)
)


process.calotowermaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESWeight = cms.double(1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    EBThreshold = cms.double(0.07),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    EcalAcceptSeverityLevel = cms.uint32(1),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorFirstFED = cms.untracked.int32(690),
    FilterDataQuality = cms.bool(True),
    silent = cms.untracked.bool(False),
    lastSample = cms.int32(9),
    InputLabel = cms.InputTag("source"),
    ComplainEmptyData = cms.untracked.bool(False),
    FEDs = cms.untracked.vint32(690, 691, 692),
    UnpackTTP = cms.untracked.bool(True),
    ExceptionEmptyData = cms.untracked.bool(False),
    firstSample = cms.int32(0)
)


process.ckfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits')
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("combinatorialcosmicseedfinderP5"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5'),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits')
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    severityRecHitThreshold = cms.double(4.0),
    RecHitFlagToBeExcluded = cms.vint32(3, 4, 8, 9),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    posCalc_logweight = cms.bool(True),
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    eThreshB = cms.double(0.1),
    dynamicPhiRoad = cms.bool(False),
    posCalc_w0 = cms.double(4.2),
    severitySpikeId = cms.int32(2),
    excludeFlagged = cms.bool(True),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vint32(4, 5, 3),
    step = cms.int32(17),
    debugLevel = cms.string('INFO'),
    dynamicEThresh = cms.bool(False),
    superclusterCollection = cms.string(''),
    posCalc_x0 = cms.double(0.89),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    HybridBarrelSeedThr = cms.double(1.0),
    posCalc_t0 = cms.double(7.4),
    eseed = cms.double(0.35),
    severitySpikeThreshold = cms.double(0.95),
    ecalhitproducer = cms.string('ecalRecHit')
)


process.conditionsInEdm = cms.EDProducer("ConditionDumperInEdm",
    gtEvmDigisLabel = cms.InputTag("gtEvmDigis")
)


process.consecutiveHEs = cms.EDProducer("EventWithHistoryProducerFromL1ABC",
    l1ABCCollection = cms.InputTag("scalersRawToDigi")
)


process.correctedDynamicHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('DynamicHybrid'),
    etThresh = cms.double(0.0),
    rawSuperClusterProducer = cms.InputTag("dynamicHybridSuperClusters"),
    applyEnergyCorrection = cms.bool(True),
    VerbosityLevel = cms.string('ERROR'),
    dyn_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.0),
        fEtEtaVec = cms.vdouble(0.9929, -0.01751, 0.0, -4.636, 5.945, 
            737.9, 4.057, 8.0, 1.023, 0.0, 
            0.0, 1.0, 0.0),
        brLinearHighThr = cms.double(12.0),
        fBremVec = cms.vdouble(-0.01762, 0.04224, 0.9793, 0.0008075, 1.774)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.correctedEndcapSuperClustersWithPreshower = cms.EDProducer("PreshowerClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshStripEnergyCut = cms.double(0.0),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("correctedIslandEndcapSuperClusters"),
    preshNclust = cms.int32(4),
    debugLevel = cms.string(''),
    preshClusterEnergyCut = cms.double(0.0),
    preshSeededNstrip = cms.int32(15)
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid'),
    etThresh = cms.double(0.0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    applyEnergyCorrection = cms.bool(True),
    VerbosityLevel = cms.string('ERROR'),
    hyb_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(1.1),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181),
        brLinearHighThr = cms.double(8.0),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.correctedIslandBarrelSuperClusters = cms.EDProducer("HiEgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Island'),
    etThresh = cms.double(0.0),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandBarrelSuperClusters"),
    applyEnergyCorrection = cms.bool(True),
    isl_fCorrPset = cms.PSet(
        minR9Endcap = cms.double(0.95),
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fEtaVect = cms.vdouble(0.993, 0, 0.00546, 1.165, -0.180844, 
            0.040312),
        maxR9 = cms.double(1.5),
        fBremVect = cms.vdouble(-0.773799, 2.73438, -1.07235, 0.986821, -0.0101822, 
            0.000306744, 1.00595, -0.0495958, 0.00451986, 1.00595, 
            -0.0495958, 0.00451986),
        minR9Barrel = cms.double(0.94),
        fBremThVect = cms.vdouble(1.2, 1.2),
        fEtEtaVect = cms.vdouble(0.9497, 0.006985, 1.03754, -0.0142667, -0.0233993, 
            0, 0, 0.908915, 0.0137322, 16.9602, 
            -29.3093, 19.8976, -5.92666, 0.654571)
    ),
    VerbosityLevel = cms.string('ERROR'),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.correctedIslandEndcapSuperClusters = cms.EDProducer("HiEgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Island'),
    etThresh = cms.double(0.0),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandEndcapSuperClusters"),
    applyEnergyCorrection = cms.bool(True),
    isl_fCorrPset = cms.PSet(
        minR9Endcap = cms.double(0.95),
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fEtaVect = cms.vdouble(0.993, 0, 0.00546, 1.165, -0.180844, 
            0.040312),
        maxR9 = cms.double(1.5),
        fBremVect = cms.vdouble(-0.773799, 2.73438, -1.07235, 0.986821, -0.0101822, 
            0.000306744, 1.00595, -0.0495958, 0.00451986, 1.00595, 
            -0.0495958, 0.00451986),
        minR9Barrel = cms.double(0.94),
        fBremThVect = cms.vdouble(1.2, 1.2),
        fEtEtaVect = cms.vdouble(0.9497, 0.006985, 1.03754, -0.0142667, -0.0233993, 
            0, 0, 0.908915, 0.0137322, 16.9602, 
            -29.3093, 19.8976, -5.92666, 0.654571)
    ),
    VerbosityLevel = cms.string('ERROR'),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5'),
    etThresh = cms.double(0.0),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    applyEnergyCorrection = cms.bool(True),
    fix_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.9),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93),
        brLinearHighThr = cms.double(6.0),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221)
    ),
    VerbosityLevel = cms.string('ERROR'),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False),
            Granularity = cms.int32(2)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False),
            Granularity = cms.int32(0)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(False),
        Strict1Leg = cms.bool(False),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False),
            Granularity = cms.int32(2)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleError = cms.bool(False),
            RescaleErrorFactor = cms.double(1.0),
            UseInvalidHits = cms.bool(False),
            Granularity = cms.int32(0)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(True),
        Strict1Leg = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    ),
    muonCollection = cms.InputTag("muons"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    skipMatchedMuons = cms.bool(False),
    muonCollectionTag = cms.InputTag("muons"),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("cosmicsVetoSeeds"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    RedundantSeedCleaner = cms.string('none'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5'),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits')
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("cosmicsVetoTracksRaw"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.cosmictrackSelector = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("ctfWithMaterialTracksCosmics"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    UseAverageTime = cms.bool(False),
    CSCStripPeakThreshold = cms.double(10.0),
    readBadChannels = cms.bool(True),
    CSCUseStaticPedestals = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    readBadChambers = cms.bool(True),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCstripWireDeltaTime = cms.int32(8),
    CSCUseCalibrations = cms.bool(True),
    CSCUseTimingCorrections = cms.bool(True),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    UseParabolaFit = cms.bool(False),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    UseFivePoleFit = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCStripClusterChargeCut = cms.double(25.0)
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    inputObjects = cms.InputTag("csc2DRecHits"),
    algo_psets = cms.VPSet(cms.PSet(
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1'),
        algo_name = cms.string('CSCSegAlgoSK'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1),
        algo_psets = cms.VPSet(cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.003),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0)
        ), 
            cms.PSet(
                dPhiFineMax = cms.double(0.025),
                verboseInfo = cms.untracked.bool(True),
                chi2Max = cms.double(99999.0),
                dPhiMax = cms.double(0.025),
                wideSeg = cms.double(3.0),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0)
            ))
    ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoTC'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                dPhiFineMax = cms.double(0.02),
                verboseInfo = cms.untracked.bool(True),
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                dPhiMax = cms.double(0.003),
                chi2ndfProbMin = cms.double(0.0001),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2)
            ), 
                cms.PSet(
                    dPhiFineMax = cms.double(0.013),
                    verboseInfo = cms.untracked.bool(True),
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    dPhiMax = cms.double(0.00198),
                    chi2ndfProbMin = cms.double(0.0001),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoDF'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1),
            algo_psets = cms.VPSet(cms.PSet(
                tanThetaMax = cms.double(1.2),
                maxRatioResidualPrune = cms.double(3.0),
                dPhiFineMax = cms.double(0.025),
                tanPhiMax = cms.double(0.5),
                dXclusBoxMax = cms.double(8.0),
                preClustering = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                minHitsPerSegment = cms.int32(3),
                minHitsForPreClustering = cms.int32(10),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(8.0),
                nHitsPerClusterIsShower = cms.int32(20),
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    tanThetaMax = cms.double(2.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.8),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(10),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(12.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(12.0)
                ), 
                cms.PSet(
                    tanThetaMax = cms.double(1.2),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.5),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(30),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(8.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(8.0)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            algo_name = cms.string('CSCSegAlgoST'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                maxRatioResidualPrune = cms.double(3),
                yweightPenalty = cms.double(1.5),
                maxRecHitsInCluster = cms.int32(20),
                preClusteringUseChaining = cms.bool(True),
                ForceCovariance = cms.bool(False),
                hitDropLimit6Hits = cms.double(0.3333),
                NormChi2Cut2D = cms.double(20.0),
                BPMinImprovement = cms.double(10000.0),
                Covariance = cms.double(0.0),
                tanPhiMax = cms.double(0.5),
                onlyBestSegment = cms.bool(False),
                SeedBig = cms.double(0.0015),
                dRPhiFineMax = cms.double(8.0),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                dXclusBoxMax = cms.double(4.0),
                BrutePruning = cms.bool(True),
                curvePenaltyThreshold = cms.double(0.85),
                CorrectTheErrors = cms.bool(True),
                hitDropLimit4Hits = cms.double(0.6),
                useShowering = cms.bool(False),
                CSCDebug = cms.untracked.bool(False),
                yweightPenaltyThreshold = cms.double(1.0),
                tanThetaMax = cms.double(1.2),
                NormChi2Cut3D = cms.double(10.0),
                minHitsPerSegment = cms.int32(3),
                ForceCovarianceAll = cms.bool(False),
                dPhiFineMax = cms.double(0.025),
                prePrunLimit = cms.double(3.17),
                hitDropLimit5Hits = cms.double(0.8),
                preClustering = cms.bool(True),
                prePrun = cms.bool(True),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                Pruning = cms.bool(True),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    maxRatioResidualPrune = cms.double(3),
                    yweightPenalty = cms.double(1.5),
                    maxRecHitsInCluster = cms.int32(24),
                    preClusteringUseChaining = cms.bool(True),
                    ForceCovariance = cms.bool(False),
                    hitDropLimit6Hits = cms.double(0.3333),
                    NormChi2Cut2D = cms.double(20.0),
                    BPMinImprovement = cms.double(10000.0),
                    Covariance = cms.double(0.0),
                    tanPhiMax = cms.double(0.5),
                    onlyBestSegment = cms.bool(False),
                    SeedBig = cms.double(0.0015),
                    dRPhiFineMax = cms.double(8.0),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    dXclusBoxMax = cms.double(4.0),
                    BrutePruning = cms.bool(True),
                    curvePenaltyThreshold = cms.double(0.85),
                    CorrectTheErrors = cms.bool(True),
                    hitDropLimit4Hits = cms.double(0.6),
                    useShowering = cms.bool(False),
                    CSCDebug = cms.untracked.bool(False),
                    yweightPenaltyThreshold = cms.double(1.0),
                    tanThetaMax = cms.double(1.2),
                    NormChi2Cut3D = cms.double(10.0),
                    minHitsPerSegment = cms.int32(3),
                    ForceCovarianceAll = cms.bool(False),
                    dPhiFineMax = cms.double(0.025),
                    prePrunLimit = cms.double(3.17),
                    hitDropLimit5Hits = cms.double(0.8),
                    preClustering = cms.bool(True),
                    prePrun = cms.bool(True),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    Pruning = cms.bool(True),
                    dYclusBoxMax = cms.double(8.0)
                ))
        )),
    algo_type = cms.int32(4)
)


process.cscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(4),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(1)
    ),
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    ),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        verbosity = cms.untracked.int32(0),
        clctTrigEnable = cms.uint32(0),
        tmbL1aWindowSize = cms.uint32(7),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        matchTrigEnable = cms.uint32(1)
    ),
    commonParam = cms.PSet(
        isTMB07 = cms.bool(True),
        isMTCC = cms.bool(False)
    ),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    )
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    mappingFile = cms.string(''),
    producer = cms.InputTag("source"),
    MaxBX = cms.int32(9),
    slot2sector = cms.vint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0),
    swapME1strips = cms.bool(False),
    MinBX = cms.int32(3)
)


process.ctfWithMaterialTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesP5"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        minTime = cms.double(-3.0),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        tTrigMode = cms.string('DTTTrigSyncFromDB')
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        minTime = cms.double(-3.0),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        tTrigMode = cms.string('DTTTrigSyncFromDB')
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt2DCosmicSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(2),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits")
)


process.dt2DSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(2),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits")
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(1),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(1),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(2),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsNoWire = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(2),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        hit_afterT0_resolution = cms.double(0.03),
        doWirePropCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    debug = cms.untracked.bool(False),
    performT0_vdriftSegCorrection = cms.bool(True),
    hit_afterT0_resolution = cms.double(0.03),
    recHits4DLabel = cms.InputTag("dt4DSegments")
)


process.dtDataIntegrityUnpacker = cms.EDProducer("DTUnpackingModule",
    useStandardFEDid = cms.bool(True),
    inputLabel = cms.InputTag("source"),
    dataType = cms.string('DDU'),
    fedbyType = cms.bool(False),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            writeSC = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            performDataIntegrityMonitor = cms.untracked.bool(True),
            readDDUIDfromDDU = cms.untracked.bool(True),
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False)
        ),
        performDataIntegrityMonitor = cms.untracked.bool(True),
        localDAQ = cms.untracked.bool(False)
    ),
    dqmOnly = cms.bool(True)
)


process.dtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    tTrigMode = cms.string('DTTTrigSyncTOFCorr'),
    lut_dump_flag = cms.untracked.bool(False),
    lut_btic = cms.untracked.int32(31),
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    tTrigModeConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        kFactor = cms.double(-2.0),
        vPropWire = cms.double(24.4),
        tofCorrType = cms.int32(1),
        tTrig = cms.double(500.0)
    ),
    digiTag = cms.InputTag("muonDTDigis")
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    verbose = cms.untracked.bool(False),
    DTTF_FED_Source = cms.InputTag("source")
)


process.dynamicHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    severityRecHitThreshold = cms.double(4.0),
    RecHitFlagToBeExcluded = cms.vint32(3, 4, 8, 9),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    posCalc_logweight = cms.bool(True),
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string(''),
    eThreshB = cms.double(0.1),
    dynamicPhiRoad = cms.bool(True),
    posCalc_w0 = cms.double(4.2),
    severitySpikeId = cms.int32(2),
    excludeFlagged = cms.bool(True),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vint32(4, 5, 3),
    step = cms.int32(17),
    debugLevel = cms.string('INFO'),
    dynamicEThresh = cms.bool(True),
    superclusterCollection = cms.string(''),
    posCalc_x0 = cms.double(0.89),
    shapeAssociation = cms.string('dynamicHybridShapeAssoc'),
    HybridBarrelSeedThr = cms.double(1.0),
    posCalc_t0 = cms.double(7.4),
    eseed = cms.double(0.35),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(17, 15, 13, 12, 11, 
                10, 9, 8, 7, 6),
            cryMin = cms.int32(5),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 135.0, 195.0, 225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    ),
    severitySpikeThreshold = cms.double(0.95),
    ecalhitproducer = cms.string('ecalRecHit')
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    outColl = cms.string(''),
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    eeFEToBeRecovered = cms.string('eeFE')
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    tccUnpacking = cms.bool(True),
    FedLabel = cms.InputTag("listfeds"),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    feIdCheck = cms.bool(True),
    silentMode = cms.untracked.bool(True),
    InputLabel = cms.InputTag("source"),
    orderedFedList = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    eventPut = cms.bool(True),
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54),
    FEDs = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    DoRegional = cms.bool(False),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True)
)


process.ecalEtaCorrected = cms.EDProducer("EcalRecalibRecHitProducer",
    doEnergyScale = cms.bool(False),
    doIntercalib = cms.bool(False),
    EERecHitCollection = cms.InputTag("hltAlCaEtaRecHitsFilter","etaEcalRecHitsEE"),
    EBRecalibRecHitCollection = cms.string('etaEcalRecHitsEB'),
    EBRecHitCollection = cms.InputTag("hltAlCaEtaRecHitsFilter","etaEcalRecHitsEB"),
    doLaserCorrections = cms.bool(True),
    EERecalibRecHitCollection = cms.string('etaEcalRecHitsEE')
)


process.ecalGlobalUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    eePulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    EBtimeFitParameters = cms.vdouble(-2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
        91.01147, -50.35761, 11.05621),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    outOfTimeThresholdGain61pEB = cms.double(100000.0),
    EEtimeNconst = cms.double(31.8),
    EBtimeConstantTerm = cms.double(0.6),
    outOfTimeThresholdGain61pEE = cms.double(100000.0),
    EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
    EBtimeNconst = cms.double(28.5),
    kPoorRecoFlagEB = cms.bool(False),
    ebPulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    EBtimeFitLimits_Lower = cms.double(0.2),
    kPoorRecoFlagEE = cms.bool(False),
    chi2ThreshEB_ = cms.double(33.0),
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EEtimeFitParameters = cms.vdouble(-2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
        140.7432, -75.41106, 16.20277),
    EBchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    EEchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    outOfTimeThresholdGain12mEE = cms.double(5),
    outOfTimeThresholdGain12mEB = cms.double(5),
    EEtimeFitLimits_Upper = cms.double(1.4),
    EEtimeFitLimits_Lower = cms.double(0.2),
    ebSpikeThreshold = cms.double(1.042),
    EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
    amplitudeThresholdEB = cms.double(10),
    outOfTimeThresholdGain12pEE = cms.double(5),
    outOfTimeThresholdGain12pEB = cms.double(5),
    amplitudeThresholdEE = cms.double(10),
    outOfTimeThresholdGain61mEB = cms.double(5),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    outOfTimeThresholdGain61mEE = cms.double(5),
    EEtimeConstantTerm = cms.double(0.6),
    algo = cms.string('EcalUncalibRecHitWorkerGlobal'),
    chi2ThreshEE_ = cms.double(33.0),
    EBtimeFitLimits_Upper = cms.double(1.4)
)


process.ecalPhiSymCorrected = cms.EDProducer("EcalRecalibRecHitProducer",
    doEnergyScale = cms.bool(False),
    doIntercalib = cms.bool(False),
    EERecHitCollection = cms.InputTag("hltAlCaPhiSymStream","phiSymEcalRecHitsEE"),
    EBRecalibRecHitCollection = cms.string('phiSymEcalRecHitsEB'),
    EBRecHitCollection = cms.InputTag("hltAlCaPhiSymStream","phiSymEcalRecHitsEB"),
    doLaserCorrections = cms.bool(True),
    EERecalibRecHitCollection = cms.string('phiSymEcalRecHitsEE')
)


process.ecalPi0Corrected = cms.EDProducer("EcalRecalibRecHitProducer",
    doEnergyScale = cms.bool(False),
    doIntercalib = cms.bool(False),
    EERecHitCollection = cms.InputTag("hltAlCaPi0RecHitsFilter","pi0EcalRecHitsEE"),
    EBRecalibRecHitCollection = cms.string('pi0EcalRecHitsEB'),
    EBRecHitCollection = cms.InputTag("hltAlCaPi0RecHitsFilter","pi0EcalRecHitsEB"),
    doLaserCorrections = cms.bool(True),
    EERecalibRecHitCollection = cms.string('pi0EcalRecHitsEE')
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    sourceTag = cms.InputTag("source"),
    debugMode = cms.untracked.bool(False),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    ESdigiCollection = cms.string('')
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker'),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis")
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    recoverEEVFE = cms.bool(False),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    laserCorrection = cms.bool(True),
    killDeadChannels = cms.bool(True),
    EEuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEE"),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    logWarningEtThreshold_EE_FE = cms.double(50),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    recoverEBFE = cms.bool(True),
    algo = cms.string('EcalRecHitWorkerSimple'),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    singleChannelRecoveryThreshold = cms.double(8),
    ChannelStatusToBeExcluded = cms.vint32(3, 4, 8, 9, 10, 
        11, 12, 13, 14),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    recoverEEFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    flagsMapDBReco = cms.vint32(0, 0, 0, 0, 4, 
        -1, -1, -1, 4, 4, 
        7, 7, 7, 8, 9),
    EBuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEB"),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    logWarningEtThreshold_EB_FE = cms.double(50),
    recoverEEIsolatedChannels = cms.bool(False)
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    doEndcap = cms.bool(True),
    tpOutputCollection = cms.string(''),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    skipModule = cms.bool(False),
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True)
)


process.eleIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        spikeIdThreshold = cms.double(0.95),
        tryBoth = cms.bool(True),
        recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        intStrip = cms.double(0.0),
        intRadius = cms.double(0.0),
        severityRecHitThreshold = cms.double(5.0),
        severityLevelCut = cms.int32(3),
        energyMin = cms.double(0.08),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        spikeIdString = cms.string('kSwissCross'),
        vetoClustered = cms.bool(False),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB")
    )
)


process.eleIsoDepositHcalDepth1FromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.eleIsoDepositHcalDepth2FromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(2),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.eleIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.eleIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("gsfElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("generalTracks")
    )
)


process.eleIsoFromDepsEcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalBarrel:0.045', 
            'EcalBarrel:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.08)', 
            'EcalEndcaps:AbsThreshold(0.100)', 
            'EcalEndcaps:0.070', 
            'EcalEndcaps:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsEcalFromHitsByCrystal = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('NumCrystalVeto(3.0)', 
            'NumCrystalEtaPhiVeto(1.5,9999.0)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.08)', 
            'EcalEndcaps:AbsThreshold(0.100)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalDepth1FromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalDepth1FromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalDepth2FromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalDepth2FromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.eleIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("eleIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(0.7)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoDepositEcalFromHits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        isolationVariable = cms.string('et'),
        spikeIdThreshold = cms.double(0.95),
        tryBoth = cms.bool(True),
        recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
        ComponentName = cms.string('EgammaRecHitExtractor'),
        endcapEcalHits = cms.InputTag("reducedEcalRecHitsEE"),
        intStrip = cms.double(0.0),
        intRadius = cms.double(0.0),
        severityRecHitThreshold = cms.double(5.0),
        severityLevelCut = cms.int32(3),
        energyMin = cms.double(0.08),
        extRadius = cms.double(0.6),
        subtractSuperClusterEnergy = cms.bool(False),
        spikeIdString = cms.string('kSwissCross'),
        vetoClustered = cms.bool(False),
        detector = cms.string('Ecal'),
        etMin = cms.double(0.0),
        DepositLabel = cms.untracked.string(''),
        barrelEcalHits = cms.InputTag("reducedEcalRecHitsEB")
    )
)


process.gamIsoDepositHcalDepth1FromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.gamIsoDepositHcalDepth2FromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(2),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.gamIsoDepositHcalFromTowers = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        caloTowers = cms.InputTag("towerMaker"),
        ComponentName = cms.string('EgammaTowerExtractor'),
        hcalDepth = cms.int32(-1),
        intRadius = cms.double(0.0),
        extRadius = cms.double(0.6),
        DepositLabel = cms.untracked.string(''),
        etMin = cms.double(-999.0)
    )
)


process.gamIsoDepositTk = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("photons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        dzOption = cms.string('vz'),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('EgammaTrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(9999.0),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.0),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        inputTrackCollection = cms.InputTag("highPurityTracks")
    )
)


process.gamIsoFromDepsEcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalBarrel:0.045', 
            'EcalBarrel:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.080)', 
            'EcalEndcaps:0.070', 
            'EcalEndcaps:RectangularEtaPhiVeto(-0.02,0.02,-0.5,0.5)', 
            'EcalEndcaps:AbsThreshold(0.100)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsEcalFromHitsByCrystal = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositEcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('NumCrystalVeto(3.0)', 
            'NumCrystalEtaPhiVeto(1.0,9999.0)', 
            'EcalBarrel:AbsThresholdFromTransverse(0.08)', 
            'EcalEndcaps:AbsThreshold(0.100)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalDepth1FromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalDepth1FromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalDepth2FromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalDepth2FromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalFromHits = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalFromHits"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsHcalFromTowers = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositHcalFromTowers"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.15'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gamIsoFromDepsTk = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("gamIsoDepositTk"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('RectangularEtaPhiVeto(-0.015,0.015,-0.5,0.5)', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    unpackSharedRegions = cms.bool(False),
    numberOfGctSamplesToUnpack = cms.uint32(1),
    verbose = cms.untracked.bool(False),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    inputLabel = cms.InputTag("source"),
    unpackerVersion = cms.uint32(0),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False)
)


process.gk5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(0.001),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(40.0),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    BaseLabel = cms.string('GLB'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    InputCollection = cms.InputTag("globalMuons"),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(9.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(6.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    InputLinksCollection = cms.InputTag("globalMuons")
)


process.globalCosmicMuons = cms.EDProducer("GlobalCosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(0.001),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons")
)


process.globalCosmicMuons1Leg = cms.EDProducer("GlobalCosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(0.001),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons1Leg")
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            Eta_fixed = cms.double(0.2),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(0.001),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("hiGlobalPrimTracks"),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx")
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            Eta_fixed = cms.double(0.2),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(0.001),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(40.0),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks"),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx")
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("source"),
    UnpackBxInEvent = cms.int32(-1),
    ActiveBoardsMask = cms.uint32(65535)
)


process.gtDigisAlCaMB = cms.EDProducer("L1GlobalTriggerRawToDigi",
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("source"),
    UnpackBxInEvent = cms.int32(-1),
    ActiveBoardsMask = cms.uint32(65535)
)


process.gtEvmDigis = cms.EDProducer("L1GlobalTriggerEvmRawToDigi",
    EvmGtFedId = cms.untracked.int32(812),
    EvmGtInputTag = cms.InputTag("source"),
    UnpackBxInEvent = cms.int32(-1),
    ActiveBoardsMask = cms.uint32(65535),
    BstLengthBytes = cms.int32(-1)
)


process.hbheprereco = cms.EDProducer("HcalHitReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    firstAuxOffset = cms.int32(0),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    flagParameters = cms.PSet(
        nominalPedestal = cms.double(3.0),
        hitMultiplicityThreshold = cms.int32(17),
        hitEnergyMinimum = cms.double(1.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    timingshapedcutsParameters = cms.PSet(
        ignorelowest = cms.bool(True),
        win_offset = cms.double(0.0),
        ignorehighest = cms.bool(False),
        win_gain = cms.double(1.0),
        tfilterEnvelope = cms.vdouble(4.0, 12.04, 13.0, 10.56, 23.5, 
            8.82, 37.0, 7.38, 56.0, 6.3, 
            81.0, 5.64, 114.5, 5.44, 175.5, 
            5.38, 350.5, 5.14)
    ),
    samplesToAdd = cms.int32(4),
    dropZSmarkedPassed = cms.bool(True),
    Subdetector = cms.string('HBHE'),
    hscpParameters = cms.PSet(
        slopeMax = cms.double(-0.6),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        TimingEnergyThreshold = cms.double(30.0),
        slopeMin = cms.double(-1.5),
        outerMin = cms.double(0.0),
        outerMax = cms.double(0.1),
        fracLeaderMin = cms.double(0.4),
        r2Min = cms.double(0.1),
        r2Max = cms.double(0.5),
        fracLeaderMax = cms.double(0.7)
    ),
    setTimingTrustFlags = cms.bool(False),
    firstSample = cms.int32(4),
    setHSCPFlags = cms.bool(True),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.hbheprerecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HBHE'),
    firstSample = cms.int32(4),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.hbhereco = cms.EDProducer("HcalHitReconstructor",
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setNoiseFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    firstAuxOffset = cms.int32(0),
    digiLabel = cms.InputTag("hcalDigis"),
    hscpParameters = cms.PSet(
        slopeMax = cms.double(-0.6),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        TimingEnergyThreshold = cms.double(30.0),
        slopeMin = cms.double(-1.5),
        outerMin = cms.double(0.0),
        outerMax = cms.double(0.1),
        fracLeaderMin = cms.double(0.4),
        r2Min = cms.double(0.1),
        r2Max = cms.double(0.5),
        fracLeaderMax = cms.double(0.7)
    ),
    timingshapedcutsParameters = cms.PSet(
        ignorelowest = cms.bool(True),
        win_offset = cms.double(0.0),
        ignorehighest = cms.bool(False),
        win_gain = cms.double(1.0),
        tfilterEnvelope = cms.vdouble(4.0, 12.04, 13.0, 10.56, 23.5, 
            8.82, 37.0, 7.38, 56.0, 6.3, 
            81.0, 5.64, 114.5, 5.44, 175.5, 
            5.38, 350.5, 5.14)
    ),
    setHSCPFlags = cms.bool(True),
    Subdetector = cms.string('HBHE'),
    flagParameters = cms.PSet(
        nominalPedestal = cms.double(3.0),
        hitMultiplicityThreshold = cms.int32(17),
        hitEnergyMinimum = cms.double(1.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    setTimingTrustFlags = cms.bool(False),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(True),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hbherecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HBHE'),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hbherecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HBHE'),
    firstSample = cms.int32(0),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.hcalDigiAlCaMB = cms.EDProducer("HcalRawToDigi",
    UnpackZDC = cms.untracked.bool(True),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("source"),
    ComplainEmptyData = cms.untracked.bool(False),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    lastSample = cms.int32(9),
    firstSample = cms.int32(0)
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    UnpackZDC = cms.untracked.bool(True),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("source"),
    ComplainEmptyData = cms.untracked.bool(False),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    lastSample = cms.int32(9),
    firstSample = cms.int32(0)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    lMinRatio = cms.double(0.7),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    tMinRBXHits = cms.int32(50),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    minEEMF = cms.double(50.0),
    tMaxLowEHitTime = cms.double(9999.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    minERatio = cms.double(50.0),
    lMinHPDNoOtherHits = cms.int32(10),
    hlMaxHPDEMF = cms.double(-9999.0),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    tMaxRatio = cms.double(0.92),
    tMinHighEHitTime = cms.double(-7.0),
    tMinZeros = cms.int32(8),
    lMaxRatio = cms.double(0.96),
    minEZeros = cms.double(10.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(0.73),
    tMaxHighEHitTime = cms.double(6.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    pMaxHPDEMF = cms.double(0.02),
    tMinLowEHitTime = cms.double(-9999.0),
    pMaxLowEHitTime = cms.double(6.0),
    lMinHPDHits = cms.int32(17),
    pMinE = cms.double(40.0),
    pMinHPDNoOtherHits = cms.int32(7),
    pMaxHighEHitTime = cms.double(5.0),
    fillTracks = cms.bool(True),
    HcalAcceptSeverityLevel = cms.uint32(9),
    digiCollName = cms.string('hcalDigis'),
    minTrackPt = cms.double(1.0),
    fillDigis = cms.bool(True),
    maxTrackEta = cms.double(2.0),
    recHitCollName = cms.string('hbhereco'),
    fillRecHits = cms.bool(True),
    caloTowerCollName = cms.string('towerMaker'),
    maxProblemRBXs = cms.int32(20),
    trackCollName = cms.string('hiSelectedTracks'),
    fillCaloTowers = cms.bool(True),
    maxCaloTowerIEta = cms.int32(20)
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel2 = cms.int32(4),
        hfTimingTrustLevel1 = cms.int32(1)
    ),
    S9S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        flagsToSkip = cms.int32(24),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        isS8S1 = cms.bool(False)
    ),
    correctionPhaseNS = cms.double(0.0),
    digistat = cms.PSet(
        HFdigiflagFirstSample = cms.int32(3),
        HFdigiflagMinEthreshold = cms.double(40),
        HFdigiflagSamplesToAdd = cms.int32(4),
        HFdigiflagCoef0 = cms.double(0.93),
        HFdigiflagCoef2 = cms.double(-0.012667),
        HFdigiflagCoef1 = cms.double(-0.38275),
        HFdigiflagExpectedPeak = cms.int32(4)
    ),
    PETstat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_R_29 = cms.vdouble(0.8),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        flagsToSkip = cms.int32(0),
        short_R = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        long_R_29 = cms.vdouble(0.8),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98)
    ),
    correctTiming = cms.bool(True),
    firstAuxOffset = cms.int32(0),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    firstSample = cms.int32(3),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HF'),
    setTimingTrustFlags = cms.bool(True),
    S8S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        flagsToSkip = cms.int32(16),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        isS8S1 = cms.bool(True)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setHSCPFlags = cms.bool(True),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.hfrecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HF'),
    firstSample = cms.int32(3),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.hfrecoMBspecial = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    samplesToAdd = cms.int32(3),
    Subdetector = cms.string('HF'),
    firstSample = cms.int32(3),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.hfrecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    samplesToAdd = cms.int32(3),
    Subdetector = cms.string('HF'),
    firstSample = cms.int32(0),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.hiEvtPlane = cms.EDProducer("EvtPlaneProducer",
    useECAL_ = cms.untracked.bool(True),
    useHCAL_ = cms.untracked.bool(True)
)


process.hiGlobalPrimTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("hiPrimTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(True),
    MeasurementTracker = cms.string(''),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.hiPixel3PrimTracks = cms.EDProducer("PixelTrackProducer",
    FilterPSet = cms.PSet(
        nSigmaLipMaxTolerance = cms.double(0),
        nSigmaTipMaxTolerance = cms.double(6.0),
        ComponentName = cms.string('HIPixelTrackFilter'),
        chi2 = cms.double(1000.0),
        VertexCollection = cms.InputTag("hiSelectedVertex"),
        useClusterShape = cms.bool(False),
        lipMax = cms.double(0.3),
        tipMax = cms.double(0),
        ptMin = cms.double(0.9)
    ),
    useFilterWithES = cms.bool(True),
    passLabel = cms.string('Pixel triplet primary tracks with vertex constraint'),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            nSigmaZ = cms.double(3.0),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.2),
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            ptMin = cms.double(0.9),
            useFoundVertices = cms.bool(True),
            originRadius = cms.double(0.1)
        )
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('TrackCleaner')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(1000000),
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037)
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    )
)


process.hiPixel3ProtoTracks = cms.EDProducer("PixelTrackProducer",
    FilterPSet = cms.PSet(
        doVariablePtMin = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        chi2 = cms.double(1000.0),
        ComponentName = cms.string('HIProtoTrackFilter'),
        ptMin = cms.double(1.0),
        siPixelRecHits = cms.InputTag("siPixelRecHits"),
        tipMax = cms.double(1.0)
    ),
    useFilterWithES = cms.bool(False),
    passLabel = cms.string('Pixel triplet tracks for vertexing'),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HITrackingRegionForPrimaryVtxProducer'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            doVariablePtMin = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            directionYCoord = cms.double(1.0),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.5),
            directionXCoord = cms.double(1.0),
            directionZCoord = cms.double(0.0),
            VertexCollection = cms.InputTag("hiPixelClusterVertex"),
            ptMin = cms.double(0.7),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(3.0),
            siPixelRecHits = cms.InputTag("siPixelRecHits"),
            originRadius = cms.double(0.2)
        )
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(10000),
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037)
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    )
)


process.hiPixelAdaptiveVertex = cms.EDProducer("PrimaryVertexProducer",
    PVSelParameters = cms.PSet(
        maxDistanceToBeam = cms.double(1.0)
    ),
    verbose = cms.untracked.bool(False),
    algorithm = cms.string('AdaptiveVertexFitter'),
    TkFilterParameters = cms.PSet(
        maxNormalizedChi2 = cms.double(5.0),
        minPt = cms.double(0.0),
        algorithm = cms.string('filterWithThreshold'),
        maxD0Significance = cms.double(100),
        numTracksThreshold = cms.int32(2),
        trackQuality = cms.string('any'),
        minPixelLayersWithHits = cms.int32(2),
        minSiliconLayersWithHits = cms.int32(0)
    ),
    useBeamConstraint = cms.bool(False),
    TrackLabel = cms.InputTag("hiSelectedProtoTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    minNdof = cms.double(0.0),
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(1.0)
        ),
        algorithm = cms.string('gap')
    )
)


process.hiPixelClusterVertex = cms.EDProducer("HIPixelClusterVtxProducer",
    maxZ = cms.double(20.05),
    zStep = cms.double(0.1),
    minZ = cms.double(-20.0),
    pixelRecHits = cms.string('siPixelRecHits')
)


process.hiPixelMedianVertex = cms.EDProducer("HIPixelMedianVtxProducer",
    TrackCollection = cms.string('hiPixel3ProtoTracks'),
    PtMin = cms.double(0.0)
)


process.hiPixelTrackSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hiPixel3PrimTracks"),
    TTRHBuilder = cms.string('WithTrackAngle'),
    useProtoTrackKinematics = cms.bool(False)
)


process.hiPrimTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("hiPixelTrackSeeds"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    RedundantSeedCleaner = cms.string('none'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(100000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilder'),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedSeeds')
)


process.hiSelectedTracks = cms.EDProducer("AnalyticalTrackSelector",
    max_d0 = cms.double(100.0),
    minNumber3DLayers = cms.uint32(3),
    applyAbsCutsIfNoPV = cms.bool(False),
    qualityBit = cms.string('highPurity'),
    minNumberLayers = cms.uint32(7),
    chi2n_par = cms.double(0.4),
    dz_par1 = cms.vdouble(9999, 1),
    dz_par2 = cms.vdouble(30.0, 0.3),
    applyAdaptedPVCuts = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    copyTrajectories = cms.untracked.bool(True),
    vtxNumber = cms.int32(-1),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    beamspot = cms.InputTag("offlineBeamSpot"),
    copyExtras = cms.untracked.bool(True),
    vertexCut = cms.string('ndof>=0&((chi2==0.0)|(chi2prob(chi2,ndof)>=0.01))'),
    max_z0 = cms.double(100.0),
    src = cms.InputTag("hiTracksWithTightQuality"),
    vertices = cms.InputTag("hiSelectedVertex"),
    d0_par2 = cms.vdouble(5.0, 0.3),
    d0_par1 = cms.vdouble(9999, 1),
    res_par = cms.vdouble(0.003, 0.001)
)


process.hiSelectedVertex = cms.EDProducer("HIBestVertexProducer",
    adaptiveVertexCollection = cms.InputTag("hiBestAdaptiveVertex"),
    medianVertexCollection = cms.InputTag("hiPixelMedianVertex")
)


process.hiTracksWithLooseQuality = cms.EDProducer("AnalyticalTrackSelector",
    max_d0 = cms.double(100.0),
    minNumber3DLayers = cms.uint32(3),
    applyAbsCutsIfNoPV = cms.bool(False),
    qualityBit = cms.string('loose'),
    minNumberLayers = cms.uint32(3),
    chi2n_par = cms.double(1.6),
    nSigmaZ = cms.double(3.0),
    dz_par2 = cms.vdouble(300.0, 0.3),
    applyAdaptedPVCuts = cms.bool(True),
    dz_par1 = cms.vdouble(9999, 1),
    copyTrajectories = cms.untracked.bool(True),
    vtxNumber = cms.int32(-1),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    beamspot = cms.InputTag("offlineBeamSpot"),
    copyExtras = cms.untracked.bool(True),
    vertexCut = cms.string('ndof>=0&((chi2==0.0)|(chi2prob(chi2,ndof)>=0.01))'),
    max_z0 = cms.double(100.0),
    src = cms.InputTag("hiGlobalPrimTracks"),
    vertices = cms.InputTag("hiSelectedVertex"),
    d0_par2 = cms.vdouble(300.0, 0.3),
    d0_par1 = cms.vdouble(9999, 1),
    res_par = cms.vdouble(0.003, 0.001)
)


process.hiTracksWithTightQuality = cms.EDProducer("AnalyticalTrackSelector",
    max_d0 = cms.double(100.0),
    minNumber3DLayers = cms.uint32(3),
    applyAbsCutsIfNoPV = cms.bool(False),
    qualityBit = cms.string('tight'),
    minNumberLayers = cms.uint32(5),
    chi2n_par = cms.double(0.7),
    dz_par1 = cms.vdouble(9999, 1),
    dz_par2 = cms.vdouble(30.0, 0.3),
    applyAdaptedPVCuts = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    copyTrajectories = cms.untracked.bool(True),
    vtxNumber = cms.int32(-1),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    beamspot = cms.InputTag("offlineBeamSpot"),
    copyExtras = cms.untracked.bool(True),
    vertexCut = cms.string('ndof>=0&((chi2==0.0)|(chi2prob(chi2,ndof)>=0.01))'),
    max_z0 = cms.double(100.0),
    src = cms.InputTag("hiTracksWithLooseQuality"),
    vertices = cms.InputTag("hiSelectedVertex"),
    d0_par2 = cms.vdouble(30.0, 0.3),
    d0_par1 = cms.vdouble(9999, 1),
    res_par = cms.vdouble(0.003, 0.001)
)


process.hoCalibCosmicsProducer = cms.EDProducer("AlCaHOCalibProducer",
    hbheInput = cms.InputTag("hbhereco"),
    RootFileName = cms.untracked.string('test.root'),
    l1Input = cms.InputTag("l1extraParticleMap"),
    lastTS = cms.untracked.int32(8),
    hotime = cms.untracked.bool(False),
    towerInput = cms.InputTag("towerMaker"),
    hbinfo = cms.untracked.bool(False),
    hoInput = cms.InputTag("horeco"),
    hltInput = cms.InputTag("TriggerResults"),
    digiInput = cms.untracked.bool(False),
    PedestalFile = cms.untracked.string('peds_mtcc2_4333.log'),
    m_scale = cms.untracked.double(4.0),
    debug = cms.untracked.bool(False),
    muons = cms.untracked.InputTag("cosmicMuons"),
    firstTS = cms.untracked.int32(5),
    sigma = cms.untracked.double(1.0)
)


process.hoCalibProducer = cms.EDProducer("AlCaHOCalibProducer",
    hbheInput = cms.InputTag("hbhereco"),
    RootFileName = cms.untracked.string('test.root'),
    l1Input = cms.InputTag("l1extraParticleMap"),
    lastTS = cms.untracked.int32(8),
    hotime = cms.untracked.bool(False),
    towerInput = cms.InputTag("towerMaker"),
    hbinfo = cms.untracked.bool(False),
    hoInput = cms.InputTag("horeco"),
    hltInput = cms.InputTag("TriggerResults"),
    digiInput = cms.untracked.bool(False),
    PedestalFile = cms.untracked.string('peds_mtcc2_4333.log'),
    m_scale = cms.untracked.double(4.0),
    debug = cms.untracked.bool(False),
    muons = cms.untracked.InputTag("standAloneMuons"),
    firstTS = cms.untracked.int32(5),
    sigma = cms.untracked.double(1.0)
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    samplesToAdd = cms.int32(4),
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    firstAuxOffset = cms.int32(0),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    Subdetector = cms.string('HO'),
    setTimingTrustFlags = cms.bool(False),
    firstSample = cms.int32(4),
    dropZSmarkedPassed = cms.bool(True),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.horecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HO'),
    firstSample = cms.int32(4),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.horecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HO'),
    firstSample = cms.int32(0),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True)
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    scCollection = cms.string(''),
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters"),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters')
)


process.ic5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ic7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.7),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.interestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters")
)


process.interestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("multi5x5BasicClusters","multi5x5EndcapBasicClusters")
)


process.islandBasicClusters = cms.EDProducer("IslandClusterProducer",
    posCalc_x0 = cms.double(0.89),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    clustershapecollectionEE = cms.string('islandEndcapShape'),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    posCalc_t0_endc = cms.double(3.1),
    barrelShapeAssociation = cms.string('islandBarrelShapeAssoc'),
    posCalc_t0_barl = cms.double(7.4),
    posCalc_logweight = cms.bool(True),
    posCalc_w0 = cms.double(4.2),
    endcapHitProducer = cms.string('ecalRecHit'),
    clustershapecollectionEB = cms.string('islandBarrelShape'),
    VerbosityLevel = cms.string('ERROR'),
    barrelHitProducer = cms.string('ecalRecHit'),
    endcapShapeAssociation = cms.string('islandEndcapShapeAssoc'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    posCalc_t0_endcPresh = cms.double(1.2),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    IslandBarrelSeedThr = cms.double(0.5)
)


process.islandSuperClusters = cms.EDProducer("HiSuperClusterProducer",
    barrelSuperclusterCollection = cms.string('islandBarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    endcapClusterProducer = cms.string('islandBasicClusters'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapBCEnergyThreshold = cms.double(0),
    VerbosityLevel = cms.string('ERROR'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    barrelBCEnergyThreshold = cms.double(0),
    endcapSuperclusterCollection = cms.string('islandEndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.07),
    doEndcaps = cms.bool(True),
    barrelClusterProducer = cms.string('islandBasicClusters'),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    doBarrel = cms.bool(True)
)


process.isoC1 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoC2 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoC3 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoC4 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoC5 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(5),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoCC1 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCC2 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCC3 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCC4 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCC5 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(5),
    photons = cms.InputTag("photons"),
    iso = cms.string('Cx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCR1 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCR2 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCR3 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCR4 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoCR5 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(5),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('BackgroundSubtracted')
)


process.isoDR11 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR12 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR13 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR14 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR21 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR22 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR23 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR24 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR31 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR32 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR33 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR34 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR41 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR42 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR43 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoDR44 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('dRxy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoR1 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoR2 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoR3 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoR4 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoR5 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(0),
    x = cms.double(5),
    photons = cms.InputTag("photons"),
    iso = cms.string('Rx'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT11 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT12 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT13 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT14 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(1),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT21 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT22 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT23 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT24 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(2),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT31 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT32 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT33 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT34 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(3),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT41 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(1),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT42 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(2),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT43 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(3),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.isoT44 = cms.EDProducer("HiEgammaIsolationProducer",
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    y = cms.double(4),
    x = cms.double(4),
    photons = cms.InputTag("photons"),
    iso = cms.string('Txy'),
    mode = cms.string('noBackgroundSubtracted')
)


process.iterativeCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeConePu5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeConePu7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.7),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.7)
)


process.kt4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(6.5),
    maxBadHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.5),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    doFastJetNonUniform = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("towerMaker"),
    sumRecHits = cms.bool(False),
    inputEtMin = cms.double(0.3),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.7),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ktPu4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.ktPu6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    puWidth = cms.double(0.8),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.7),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    doFastJetNonUniform = cms.bool(True),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.6)
)


process.l1GtRecord = cms.EDProducer("L1GlobalTriggerRecordProducer",
    L1GtReadoutRecordTag = cms.InputTag("gtDigis")
)


process.l1GtTriggerMenuLite = cms.EDProducer("L1GtTriggerMenuLiteProducer")


process.l1compare = cms.EDProducer("L1Comparator",
    CTPsourceEmul = cms.InputTag("valCscTriggerPrimitiveDigis"),
    CTFsourceEmul = cms.InputTag("valCsctfDigis","CSC"),
    COMPARE_COLLS = cms.untracked.vuint32(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 0, 
        1, 1),
    DTPsourceEmul = cms.InputTag("valDtTriggerPrimitiveDigis"),
    RCTsourceData = cms.InputTag("gctDigis"),
    VerboseFlag = cms.untracked.int32(0),
    GMTsourceData = cms.InputTag("gtDigis"),
    DTFsourceEmul = cms.InputTag("valDttfDigis"),
    RPCsourceData = cms.InputTag("gtDigis"),
    GCTsourceEmul = cms.InputTag("valGctDigis"),
    CTTsourceData = cms.InputTag("csctfDigis"),
    FEDsourceEmul = cms.untracked.InputTag("source"),
    LTCsourceEmul = cms.InputTag("none"),
    ETPsourceData = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    GCTsourceData = cms.InputTag("gctDigis"),
    DumpFile = cms.untracked.string('dump.txt'),
    LTCsourceData = cms.InputTag("none"),
    HTPsourceEmul = cms.InputTag("valHcalTriggerPrimitiveDigis"),
    CTFsourceData = cms.InputTag("muonCscMon","CSC"),
    GLTsourceEmul = cms.InputTag("valGtDigis"),
    DTPsourceData = cms.InputTag("dttfDigis"),
    RCTsourceEmul = cms.InputTag("valRctDigis"),
    GLTsourceData = cms.InputTag("gtDigis"),
    FEDid = cms.untracked.int32(735),
    DumpMode = cms.untracked.int32(0),
    RPCsourceEmul = cms.InputTag("valRpcTriggerDigis"),
    CTTsourceEmul = cms.InputTag("valCsctfTrackDigis"),
    GMTsourceEmul = cms.InputTag("valGmtDigis"),
    DTFsourceData = cms.InputTag("dttfDigis"),
    ETPsourceEmul = cms.InputTag("valEcalTriggerPrimitiveDigis"),
    CTPsourceData = cms.InputTag("muonCSCDigis"),
    HTPsourceData = cms.InputTag("hcalDigis"),
    FEDsourceData = cms.untracked.InputTag("source")
)


process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    tauJetSource = cms.InputTag("gctDigis","tauJets"),
    etTotalSource = cms.InputTag("gctDigis"),
    nonIsolatedEmSource = cms.InputTag("gctDigis","nonIsoEm"),
    htMissSource = cms.InputTag("gctDigis"),
    etMissSource = cms.InputTag("gctDigis"),
    produceMuonParticles = cms.bool(True),
    hfRingEtSumsSource = cms.InputTag("gctDigis"),
    forwardJetSource = cms.InputTag("gctDigis","forJets"),
    ignoreHtMiss = cms.bool(False),
    centralJetSource = cms.InputTag("gctDigis","cenJets"),
    produceCaloParticles = cms.bool(True),
    muonSource = cms.InputTag("gtDigis"),
    isolatedEmSource = cms.InputTag("gctDigis","isoEm"),
    etHadSource = cms.InputTag("gctDigis"),
    hfRingBitCountsSource = cms.InputTag("gctDigis")
)


process.laserAlignmentT0Producer = cms.EDProducer("LaserAlignmentT0Producer",
    DigiProducerList = cms.VPSet(cms.PSet(
        DigiLabel = cms.string('ZeroSuppressed'),
        DigiType = cms.string('Processed'),
        DigiProducer = cms.string('TkAlLASsiStripDigis')
    ))
)


process.lumiProducer = cms.EDProducer("LumiProducer",
    lumiversion = cms.untracked.string('0001'),
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD')
)


process.mergedStandAloneMuonSeeds = cms.EDProducer("MuonSeedMerger",
    SeedCollections = cms.VInputTag(cms.InputTag("ancientMuonSeed"), cms.InputTag("MuonSeed"))
)


process.muIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("muons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("muons","ecal"), cms.InputTag("muons","hcal"), cms.InputTag("muons","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons","tracker"))
)


process.muParamGlobalIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalEcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(1.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(0.0)
    )
)


process.muParamGlobalIsoDepositCalHcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(0.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(1.0)
    )
)


process.muParamGlobalIsoDepositCtfTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositGsTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositJets = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    )
)


process.muParamGlobalIsoDepositTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClusters = cms.EDProducer("Multi5x5ClusterProducer",
    endcapHitProducer = cms.string('ecalRecHit'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    RecHitFlagToBeExcluded = cms.vint32(3, 4, 5, 6, 7, 
        8, 9),
    VerbosityLevel = cms.string('ERROR'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    posCalc_t0_endcPresh = cms.double(1.2),
    posCalc_logweight = cms.bool(True),
    barrelShapeAssociation = cms.string('multi5x5BarrelShapeAssoc'),
    posCalc_w0 = cms.double(4.2),
    clustershapecollectionEE = cms.string('multi5x5EndcapShape'),
    clustershapecollectionEB = cms.string('multi5x5BarrelShape'),
    IslandBarrelSeedThr = cms.double(0.5),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    posCalc_t0_endc = cms.double(3.1),
    posCalc_x0 = cms.double(0.89),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    doEndcap = cms.bool(True),
    endcapShapeAssociation = cms.string('multi5x5EndcapShapeAssoc'),
    barrelHitProducer = cms.string('ecalRecHit'),
    posCalc_t0_barl = cms.double(7.4),
    doBarrel = cms.bool(False)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    preshStripEnergyCut = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshPi0Nstrip = cms.int32(5),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO')
)


process.multi5x5SuperClusters = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapClusterProducer = cms.string('multi5x5BasicClusters'),
    dynamicPhiRoad = cms.bool(False),
    endcapPhiSearchRoad = cms.double(0.6),
    VerbosityLevel = cms.string('ERROR'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    barrelClusterProducer = cms.string('multi5x5BasicClusters'),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            cryMin = cms.int32(2),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    )
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshStripEnergyCut = cms.double(0.0),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    preshNclust = cms.int32(4),
    debugLevel = cms.string(''),
    preshClusterEnergyCut = cms.double(0.0),
    preshSeededNstrip = cms.int32(15)
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    PrintEventNumber = cms.untracked.bool(False),
    UseSelectiveUnpacking = cms.bool(True),
    UseExaminer = cms.bool(True),
    ErrorMask = cms.uint32(0),
    InputObjects = cms.InputTag("source"),
    UseFormatStatus = cms.bool(True),
    ExaminerMask = cms.uint32(535557110),
    UnpackStatusDigis = cms.bool(False),
    VisualFEDInspect = cms.untracked.bool(False),
    FormatedEventDump = cms.untracked.bool(False),
    Debug = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False)
)


process.muonCscMon = cms.EDProducer("MuonCandProducerMon",
    VerboseFlag = cms.untracked.int32(0),
    DTinput = cms.untracked.InputTag("dttfDigis"),
    CSCinput = cms.untracked.InputTag("csctfDigis")
)


process.muonDTDigis = cms.EDProducer("DTUnpackingModule",
    useStandardFEDid = cms.bool(True),
    inputLabel = cms.InputTag("source"),
    dataType = cms.string('DDU'),
    fedbyType = cms.bool(False),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            writeSC = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            performDataIntegrityMonitor = cms.untracked.bool(False),
            readDDUIDfromDDU = cms.untracked.bool(True),
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False)
        ),
        performDataIntegrityMonitor = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False)
    ),
    dqmOnly = cms.bool(False)
)


process.muonDtMon = cms.EDProducer("MuonCandProducerMon",
    VerboseFlag = cms.untracked.int32(0),
    DTinput = cms.untracked.InputTag("dttfDigis"),
    CSCinput = cms.untracked.InputTag("csctfDigis")
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("muons")
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("source"),
    doSynchro = cms.bool(True)
)


process.muonSelectionTypeValueMapProducer = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons"),
    selectionType = cms.string('All')
)


process.muons = cms.EDProducer("MuonIdProducer",
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("hiGlobalPrimTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("iterativeConePu5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    trackDepositName = cms.string('tracker'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    maxAbsEta = cms.double(3.0),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    minPCaloMuon = cms.double(1.0),
    fillMatching = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("hiGlobalPrimTracks", "globalMuons", "standAloneMuons:UpdatedAtVtx"),
    fillGlobalTrackQuality = cms.bool(True),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    ecalDepositName = cms.string('ecal'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons", "cosmicMuons", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics1Leg = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    ecalDepositName = cms.string('ecal'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons1Leg", "cosmicMuons1Leg", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsWithSET = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    ecalDepositName = cms.string('ecal'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(True),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("generalTracks", "globalSETMuons", cms.InputTag("standAloneSETMuons","UpdatedAtVtx")),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muontiming = cms.EDProducer("MuonTimingProducer",
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    MuonCollection = cms.InputTag("muons")
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotOnlineProducer",
    maxZ = cms.double(40),
    gtEvmLabel = cms.InputTag("gtEvmDigis"),
    changeToCMSCoordinates = cms.bool(False),
    label = cms.InputTag("scalersRawToDigi"),
    setSigmaZ = cms.double(-1),
    maxRadius = cms.double(2)
)


process.particleFlow = cms.EDProducer("PFProducer",
    pf_newCalib = cms.uint32(2),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    calibHF_use = cms.bool(False),
    verbose = cms.untracked.bool(False),
    pfcluster_barrelEndcapEtaDiv = cms.double(1.4),
    pfcluster_lowEP0 = cms.double(0.3249189),
    pfcluster_lowEP1 = cms.double(0.790799),
    pf_nsigma_ECAL = cms.double(0.0),
    usePFConversions = cms.bool(False),
    pf_calib_ECAL_HCAL_hslope = cms.double(1.06),
    calibPFSCEle_endcap = cms.vdouble(0.9995, -12.313, 2.8784, -0.0001057, 10.282, 
        3.059, 0.0013502, -2.2185, 3.4206),
    usePFElectrons = cms.bool(False),
    minSignificanceReduction = cms.double(1.4),
    pf_calib_ECAL_slope = cms.double(1.0),
    nTrackIsoForEgammaSC = cms.uint32(2),
    postHFCleaning = cms.bool(False),
    pf_calib_ECAL_offset = cms.double(0.0),
    pf_electron_mvaCut = cms.double(-0.1),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHCAL","Cleaned"), cms.InputTag("particleFlowClusterHFHAD","Cleaned"), cms.InputTag("particleFlowClusterHFEM","Cleaned")),
    iCfgCandConnector = cms.PSet(
        bCalibSecondary = cms.bool(False),
        bCalibPrimary = cms.bool(False),
        bCorrect = cms.bool(False),
        nuclCalibFactors = cms.vdouble(0.88, 0.28, 0.04)
    ),
    rejectTracks_Bad = cms.bool(True),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    ecalHcalEcalEndcap = cms.vdouble(0.46, 3.0, 1.1, 0.4, -0.02, 
        1.4),
    minSignificance = cms.double(2.5),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_calib_ECAL_HCAL_offset = cms.double(6.11),
    egammaElectrons = cms.InputTag(""),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    pf_calib_HCAL_offset = cms.double(1.73),
    maxDeltaPhiPt = cms.double(7.0),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    ecalHcalEcalBarrel = cms.vdouble(0.67, 3.0, 1.15, 0.9, -0.06, 
        1.4),
    minHFCleaningPt = cms.double(5.0),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    pf_nsigma_HCAL = cms.double(1.0),
    blocks = cms.InputTag("particleFlowBlock"),
    calibPFSCEle_barrel = cms.vdouble(1.0326, -13.71, 339.72, 0.4862, 0.00182, 
        0.36445, 1.411, 1.0206, 0.0059162, -5.14434e-05, 
        1.42516e-07),
    pfcluster_etaCorrection = cms.vdouble(1.01, -0.0102, 0.0517, 0.563, -0.425, 
        0.11),
    useEGammaElectrons = cms.bool(False),
    vertexCollection = cms.InputTag("hiSelectedVertex"),
    pf_calib_HCAL_damping = cms.double(2.49),
    nsigma_TRACK = cms.double(1.0),
    ecalHcalHcalEndcap = cms.vdouble(0.46, 3.0, 1.1, 0.3, -0.02, 
        1.4),
    dptRel_DispVtx = cms.double(20.0),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan.txt'),
    useVerticesForNeutral = cms.bool(True),
    useEGammaSupercluster = cms.bool(True),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    factors_45 = cms.vdouble(10.0, 100.0),
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    usePFDecays = cms.bool(False),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    rejectTracks_Step45 = cms.bool(True),
    pf_electron_output_col = cms.string('electrons'),
    pfcluster_doCorrection = cms.uint32(1),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    pf_calib_HCAL_slope = cms.double(2.17),
    pf_calib_ECAL_HCAL_eslope = cms.double(1.05),
    usePFNuclearInteractions = cms.bool(False),
    usePFMuonMomAssign = cms.bool(False),
    maxSignificance = cms.double(2.5),
    minDeltaMet = cms.double(0.4),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    algoType = cms.uint32(0),
    pfcluster_allowNegative = cms.uint32(0),
    ecalHcalHcalBarrel = cms.vdouble(0.46, 3.0, 1.15, 0.3, -0.02, 
        1.4),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    pt_Error = cms.double(1.0),
    debug = cms.untracked.bool(False),
    pfcluster_doEtaCorrection = cms.uint32(1),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    pfcluster_globalP0 = cms.double(-2.315),
    pfcluster_globalP1 = cms.double(1.01),
    usePFSCEleCalib = cms.bool(True)
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    RecMuons = cms.InputTag("muons"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(False),
    nuclearInteractionsPurity = cms.uint32(1),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    verbose = cms.untracked.bool(False),
    PFClustersPS = cms.InputTag("particleFlowClusterPS"),
    usePFatHLT = cms.bool(True),
    useIterTracking = cms.bool(False),
    useConvBremPFRecTracks = cms.bool(False),
    useV0 = cms.bool(False),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    ConvBremGsfRecTracks = cms.InputTag("pfTrackElec","Secondary"),
    pf_DPtoverPt_Cut = cms.vdouble(-1.0, -1.0, -1.0, -1.0, -1.0),
    GsfRecTracks = cms.InputTag("pfTrackElec"),
    useNuclear = cms.bool(False),
    useConvBremGsfTracks = cms.bool(False),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFV0 = cms.InputTag("pfV0"),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    debug = cms.untracked.bool(False),
    pf_NHit_Cut = cms.vuint32(3, 3, 3, 3, 3)
)


process.particleFlowClusterECAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(9),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(1.5),
    thresh_DoubleSpike_Barrel = cms.double(10.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(4.0),
    PFRecHits = cms.InputTag("particleFlowRecHitECAL"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.04, -0.024),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.08),
    thresh_Clean_Endcap = cms.double(15.0),
    thresh_Seed_Barrel = cms.double(0.23),
    depthCor_Mode = cms.int32(1),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.3),
    thresh_Pt_Seed_Endcap = cms.double(0.15),
    minS4S1_Clean_Endcap = cms.vdouble(0.02, -0.0125),
    thresh_Seed_Endcap = cms.double(0.6),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(0.04)
)


process.particleFlowClusterHCAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL"),
    cleanRBXandHPDs = cms.bool(True),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(4),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.032, -0.045),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.8),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.032, -0.045),
    thresh_Seed_Endcap = cms.double(1.1),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFEM = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(80.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFEM"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.11, -0.19),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(80.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(99999.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.11, -0.19),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFHAD = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(120.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFHAD"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.045, -0.08),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(120.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(99999.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.045, -0.08),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(-1),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(0.2),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitPS"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.0, 0.0),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(6e-05),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.00012),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(6e-05),
    thresh_Pt_Seed_Endcap = cms.double(99999.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.0, 0.0),
    thresh_Seed_Endcap = cms.double(0.00012),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.9),
    avfParameters = cms.PSet(
        sigmacut = cms.double(6.0),
        ratio = cms.double(0.25),
        Tini = cms.double(256.0)
    ),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    vertexIdentifierParameters = cms.PSet(
        logPrimSec_min = cms.double(0.0),
        pt_kink_min = cms.double(3.0),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        angles = cms.vdouble(15, 15),
        pt_min = cms.double(0.5),
        bIdentifyVertices = cms.bool(True),
        looper_eta_max = cms.double(0.1)
    ),
    minAdaptWeight = cms.double(0.5),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    transvSize = cms.double(1.0),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        bSelectTracks = cms.bool(True),
        nOuterHits_max = cms.int32(9),
        dxy_min = cms.double(0.2),
        nHits_min = cms.int32(6),
        nChi2_min = cms.double(0.5),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    debug = cms.untracked.bool(False),
    tobCut = cms.double(100),
    longSize = cms.double(5),
    tecCut = cms.double(220)
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.2),
    dcaCut = cms.double(0.5),
    dcaPInnerHitCut = cms.double(1000.0),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2)
    ),
    debug = cms.untracked.bool(False),
    trackCollection = cms.InputTag("generalTracks")
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducerECAL",
    crossBarrelEndcapBorder = cms.bool(False),
    verbose = cms.untracked.bool(False),
    ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    timing_Cleaning = cms.bool(True),
    thresh_Barrel = cms.double(0.08),
    thresh_Cleaning = cms.double(2.0),
    thresh_Endcap = cms.double(0.3)
)


process.particleFlowRecHitHCAL = cms.EDProducer("PFRecHitProducerHCAL",
    ECAL_Compensate = cms.bool(False),
    ECAL_Dead_Code = cms.uint32(10),
    MinLongTiming_Cut = cms.double(-5.0),
    verbose = cms.untracked.bool(False),
    ECAL_Compensation = cms.double(0.5),
    HCAL_Calib = cms.bool(True),
    weight_HFhad = cms.double(1.0),
    ApplyPulseDPG = cms.bool(False),
    ECAL_Threshold = cms.double(10.0),
    ApplyTimeDPG = cms.bool(False),
    caloTowers = cms.InputTag("towerMakerPF"),
    hcalRecHitsHBHE = cms.InputTag("hbhereco"),
    LongFibre_Fraction = cms.double(0.1),
    MaxShortTiming_Cut = cms.double(5.0),
    thresh_Barrel = cms.double(0.4),
    navigation_HF = cms.bool(True),
    LongFibre_Cut = cms.double(120.0),
    EM_Depth = cms.double(22.0),
    Max_Calib = cms.double(5.0),
    weight_HFem = cms.double(1.0),
    LongShortFibre_Cut = cms.double(1000000000.0),
    MinShortTiming_Cut = cms.double(-5.0),
    MaxLongTiming_Cut = cms.double(5.0),
    thresh_HF = cms.double(0.4),
    thresh_Endcap = cms.double(0.4),
    hcalRecHitsHF = cms.InputTag("hfreco"),
    ShortFibre_Cut = cms.double(60.0),
    ApplyLongShortDPG = cms.bool(True),
    HF_Calib = cms.bool(False),
    HAD_Depth = cms.double(47.0),
    ShortFibre_Fraction = cms.double(0.01)
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducerPS",
    thresh_Barrel = cms.double(7e-06),
    ecalRecHitsES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    verbose = cms.untracked.bool(False),
    thresh_Endcap = cms.double(7e-06)
)


process.particleFlowSimParticle = cms.EDProducer("PFSimParticleProducer",
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    ),
    MCTruthMatchingInfo = cms.untracked.bool(False),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    Fitter = cms.string('KFFittingSmoother'),
    ecalRecHitsEE = cms.InputTag("caloRecHits","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("caloRecHits","EcalRecHitsEB"),
    process_RecTracks = cms.untracked.bool(False),
    ParticleFilter = cms.PSet(
        EProton = cms.double(5000.0),
        etaMax = cms.double(5.0),
        pTMin = cms.double(0.0),
        EMin = cms.double(0.0)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    famosSimHits = cms.untracked.InputTag("famosSimHits","EcalHitsEB"),
    process_Particles = cms.untracked.bool(True),
    Propagator = cms.string('PropagatorWithMaterial'),
    sim = cms.InputTag("g4SimHits"),
    verbose = cms.untracked.bool(False)
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    conversionCollection = cms.InputTag("trackerOnlyConversions")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    trackColl = cms.InputTag("generalTracks"),
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex")
)


process.pfElectronInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf")
)


process.pfElectronInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf")
)


process.pfElectronTranslator = cms.EDProducer("PFElectronTranslator",
    MVACutBlock = cms.PSet(
        MVACut = cms.double(-0.4)
    ),
    PFBasicClusters = cms.string('pf'),
    GSFTracks = cms.InputTag("electronGsfTracks"),
    ElectronMVA = cms.string('pf'),
    PFPreshowerClusters = cms.string('pf'),
    PFCandidate = cms.InputTag("particleFlow","electrons"),
    PFSuperClusters = cms.string('pf'),
    ElectronSC = cms.string('pf')
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    TrajInEvents = cms.bool(True),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(False),
    MaxConvBremRecoPT = cms.double(49.0),
    ModeMomentum = cms.bool(True),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    Propagator = cms.string('fwdElectronPropagator'),
    useV0 = cms.bool(False),
    pf_convBremFinderID_mvaWeightFile = cms.string('RecoParticleFlow/PFTracking/data/MVAnalysis_BDT.weights_convBremFinder_19Apr.txt'),
    useFifthTrackingStep = cms.bool(False),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MinDPhiGsfSC = cms.double(0.15),
    applyEGSelection = cms.bool(True),
    useNuclear = cms.bool(False),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    applyGsfTrackCleaning = cms.bool(True),
    MinDEtaGsfSC = cms.double(0.06),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    useConvBremFinder = cms.bool(True),
    PFV0 = cms.InputTag("pfV0"),
    pf_convBremFinderID_mvaCut = cms.double(0.2),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    MinSCEnergy = cms.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    PFRecTrackLabel = cms.InputTag("trackerDrivenElectronSeeds"),
    useFifthTrackingStepForSecondaries = cms.bool(True)
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    scHybridBarrelProducer = cms.InputTag("correctedIslandBarrelSuperClusters"),
    photonCoreCollection = cms.string(''),
    minSCEt = cms.double(8.0),
    pixelSeedProducer = cms.string('electronMergedSeeds'),
    risolveConversionAmbiguity = cms.bool(True),
    scIslandEndcapProducer = cms.InputTag("correctedIslandEndcapSuperClusters"),
    conversionProducer = cms.InputTag("conversions")
)


process.photons = cms.EDProducer("PhotonProducer",
    usePrimaryVertex = cms.bool(True),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    minSCEtBarrel = cms.double(5.0),
    primaryVertexProducer = cms.string('hiSelectedVertex'),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    posCalc_t0_endcPresh = cms.double(3.6),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    posCalc_logweight = cms.bool(True),
    hcalTowers = cms.InputTag("towerMaker"),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    minR9Endcap = cms.double(10.0),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    posCalc_w0 = cms.double(4.2),
    nTrackHollowConeEndcap = cms.double(999999999),
    hbheInstance = cms.string(''),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(10.0),
    minSCEtEndcap = cms.double(15.0),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hbheModule = cms.string('hbhereco'),
    maxHoverEBarrel = cms.double(0.99),
    posCalc_t0_barl = cms.double(7.7),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    highEt = cms.double(100.0),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hOverEConeSize = cms.double(0.15),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    posCalc_x0 = cms.double(0.89),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationSumsCalculatorSet = cms.PSet(
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        barrelEcalRecHitCollection = cms.string('EcalRecHitsEB'),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        trackProducer = cms.InputTag("highPurityTracks"),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        barrelEcalRecHitProducer = cms.string('ecalRecHit'),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.1),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.08),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        longImpactParameterA_Barrel = cms.double(0.2),
        severityRecHitThreshold = cms.double(5.0),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        transImpactParameterA_Barrel = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        transImpactParameterA_Endcap = cms.double(0.1),
        ComponentName = cms.string('isolationSumsCalculator'),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        modulePhiBoundary = cms.double(0.0087),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        longImpactParameterB_Endcap = cms.double(0.2),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        transImpactParameterB_Endcap = cms.double(0.1),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        HcalRecHitCollection = cms.string(''),
        vetoClustered = cms.bool(False),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.08),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        spikeIdThreshold = cms.double(0.95),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        endcapEcalRecHitCollection = cms.string('EcalRecHitsEE'),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        severityLevelCut = cms.int32(4),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        HcalRecHitProducer = cms.string('towerMaker'),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        spikeIdString = cms.string('kSwissCrossBordersIncluded'),
        EcalRecHitThreshEtA_Endcap = cms.double(0.1),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        transImpactParameterB_Barrel = cms.double(0.1),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        endcapEcalRecHitProducer = cms.string('ecalRecHit'),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
    ),
    photonCoreProducer = cms.InputTag("photonCore"),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    posCalc_t0_endc = cms.double(6.3),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999)
)


process.preshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    preshStripEnergyCut = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshPi0Nstrip = cms.int32(5),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    PreshowerClusterShapeCollectionX = cms.string('preshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('preshowerYClustersShape'),
    debugLevel = cms.string('INFO')
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.reducedEcalRecHitsEB = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEB"), cms.InputTag("interestingEleIsoDetIdEB"), cms.InputTag("interestingGamIsoDetIdEB"), cms.InputTag("caloRecoTauProducer"), cms.InputTag("pfElectronInterestingEcalDetIdEB"), 
        cms.InputTag("muonEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsEE = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEE"), cms.InputTag("interestingEleIsoDetIdEE"), cms.InputTag("interestingGamIsoDetIdEE"), cms.InputTag("caloRecoTauProducer"), cms.InputTag("pfElectronInterestingEcalDetIdEE"), 
        cms.InputTag("muonEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    reducedHitsCollection = cms.string('')
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    rpcDigiLabel = cms.InputTag("muonRPCDigis"),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgoConfig = cms.PSet(

    ),
    deadSource = cms.string('File'),
    maskSource = cms.string('File')
)


process.rpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("source")
)


process.selectDigi = cms.EDProducer("EcalDigiSelector",
    EcalEBDigiTag = cms.InputTag("ecalDigis","ebDigis"),
    nclus_sel = cms.int32(2),
    EcalEEDigiTag = cms.InputTag("ecalDigis","eeDigis"),
    barrelSuperClusterProducer = cms.InputTag("uncleanedHybridSuperClusters"),
    selectedEcalEBDigiCollection = cms.string('selectedEcalEBDigiCollection'),
    selectedEcalEEDigiCollection = cms.string('selectedEcalEEDigiCollection'),
    endcapSuperClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    EcalEBRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EcalEERecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    single_cluster_thresh = cms.double(15.0),
    cluster_pt_thresh = cms.double(10.0)
)


process.selectHighPurity = cms.EDProducer("AnalyticalTrackSelector",
    max_d0 = cms.double(100.0),
    minNumber3DLayers = cms.uint32(3),
    applyAbsCutsIfNoPV = cms.bool(False),
    qualityBit = cms.string('highPurity'),
    minNumberLayers = cms.uint32(3),
    chi2n_par = cms.double(0.7),
    dz_par1 = cms.vdouble(0.35, 4.0),
    dz_par2 = cms.vdouble(0.4, 4.0),
    applyAdaptedPVCuts = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    copyTrajectories = cms.untracked.bool(False),
    vtxNumber = cms.int32(-1),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(2),
    beamspot = cms.InputTag("offlineBeamSpot"),
    copyExtras = cms.untracked.bool(True),
    vertexCut = cms.string('ndof>=2&!isFake'),
    max_z0 = cms.double(100.0),
    src = cms.InputTag("generalTracks"),
    vertices = cms.InputTag("pixelVertices"),
    d0_par2 = cms.vdouble(0.4, 4.0),
    d0_par1 = cms.vdouble(0.3, 4.0),
    res_par = cms.vdouble(0.003, 0.001)
)


process.siPixelClusters = cms.EDProducer("SiPixelClusterProducer",
    src = cms.InputTag("siPixelDigis"),
    ChannelThreshold = cms.int32(1000),
    maxNumberOfClusters = cms.int32(-1),
    SplitClusters = cms.bool(False),
    MissCalibrate = cms.untracked.bool(True),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    payloadType = cms.string('Offline'),
    SeedThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0)
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    Timing = cms.untracked.bool(False),
    IncludeErrors = cms.bool(True),
    UseCablingTree = cms.untracked.bool(True),
    InputLabel = cms.InputTag("source"),
    CheckPixelOrder = cms.bool(False)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters"),
    CPE = cms.string('PixelCPEGeneric')
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    Clusterizer = cms.PSet(
        ChannelThreshold = cms.double(2.0),
        MaxSequentialBad = cms.uint32(1),
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        MaxSequentialHoles = cms.uint32(0),
        MaxAdjacentBad = cms.uint32(0),
        QualityLabel = cms.string(''),
        SeedThreshold = cms.double(3.0),
        ClusterThreshold = cms.double(5.0)
    )
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    UseDaqRegister = cms.bool(False),
    ProductLabel = cms.InputTag("source"),
    UnpackCommonModeValues = cms.bool(False),
    AppendedBytes = cms.int32(0),
    UseFedKey = cms.bool(False),
    TriggerFedId = cms.int32(0),
    MarkModulesOnMissingFeds = cms.bool(True),
    UnpackBadChannels = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False)
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    Regional = cms.bool(False),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False),
    matchedRecHits = cms.string('matchedRecHit'),
    LazyGetterProducer = cms.InputTag("SiStripRawToClustersFacility"),
    ClusterProducer = cms.InputTag("siStripClusters"),
    VerbosityLevel = cms.untracked.int32(1),
    rphiRecHits = cms.string('rphiRecHit'),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    siStripQualityLabel = cms.ESInputTag(""),
    MaskBadAPVFibers = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    fixCM = cms.bool(False),
    produceCalculatedBaseline = cms.bool(False),
    doAPVRestore = cms.bool(True),
    produceRawDigis = cms.bool(False),
    useCMMeanMap = cms.bool(False),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    storeInZScollBadAPV = cms.bool(True),
    mergeCollections = cms.bool(False),
    Algorithms = cms.PSet(
        Fraction = cms.double(0.2),
        PedestalSubtractionFedMode = cms.bool(False),
        CutToAvoidSignal = cms.double(2.0),
        minStripsToFit = cms.uint32(4),
        consecThreshold = cms.uint32(5),
        hitStripThreshold = cms.uint32(40),
        Deviation = cms.uint32(25),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        TruncateInSuppressor = cms.bool(True),
        restoreThreshold = cms.double(0.5),
        APVInspectMode = cms.string('BaselineFollower'),
        ForceNoRestore = cms.bool(False),
        useRealMeanCM = cms.bool(False),
        DeltaCMThreshold = cms.uint32(20),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        APVRestoreMode = cms.string('BaselineFollower'),
        distortionThreshold = cms.uint32(40),
        Iterations = cms.int32(3),
        nSmooth = cms.uint32(9),
        SelfSelectRestoreAlgo = cms.bool(False)
    ),
    storeCM = cms.bool(True),
    produceBaselinePoints = cms.bool(False)
)


process.simEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    InstanceEB = cms.string(''),
    InstanceEE = cms.string(''),
    binOfMaximum = cms.int32(6),
    Famos = cms.bool(False),
    TcpOutput = cms.bool(False),
    Debug = cms.bool(False),
    Label = cms.string('simEcalUnsuppressedDigis')
)


process.simHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    latency = cms.int32(1),
    ZS_threshold = cms.uint32(1),
    PMTNoiseThreshold = cms.uint32(0),
    MinSignalThreshold = cms.uint32(0),
    inputLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis"), cms.InputTag("simHcalUnsuppressedDigis")),
    numberOfPresamples = cms.int32(2),
    numberOfSamples = cms.int32(4),
    weights = cms.vdouble(1.0, 1.0),
    RunZS = cms.untracked.bool(False),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.untracked.bool(False),
    peakFilter = cms.bool(True)
)


process.sisCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("particleFlow"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxBadEcalCells = cms.uint32(9999999),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            FitDirection = cms.string('insideOut'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True),
                Granularity = cms.int32(0)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        NavigationType = cms.string('Standard'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(100.0)
        ),
        DoBackwardFilter = cms.bool(True),
        SeedPosition = cms.string('in'),
        BWFilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            BWSeedType = cms.string('fromGenerator'),
            FitDirection = cms.string('outsideIn'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True),
                Granularity = cms.int32(2)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            MaxFractionOfLostHits = cms.double(0.05),
            ForceAllIterations = cms.bool(False),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        )
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(1.0)
        )
    )
)


process.superClusterCands = cms.EDProducer("ConcreteEcalCandidateProducer",
    src = cms.InputTag("superClusterMerger"),
    particleType = cms.string('gamma')
)


process.superClusterMerger = cms.EDProducer("EgammaSuperClusterMerger",
    src = cms.VInputTag(cms.InputTag("correctedHybridSuperClusters"), cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"))
)


process.tauRegionalPixelSeedGenerator = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('PixelLayerPairs')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            deltaPhiRegion = cms.double(0.1),
            originHalfLength = cms.double(0.2),
            originRadius = cms.double(0.2),
            deltaEtaRegion = cms.double(0.1),
            ptMin = cms.double(5.0),
            JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
            originZPos = cms.double(0.0),
            vertexSrc = cms.InputTag("hiSelectedVertex")
        )
    ),
    TTRHBuilder = cms.string('WithTrackAngle')
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(9.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(6.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    MuonCollectionLabel = cms.InputTag("globalMuons")
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.8),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    EBThreshold = cms.double(0.07),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcalAcceptSeverityLevel = cms.uint32(1)
)


process.towerMakerPF = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.4),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(1.8),
    HcalAcceptSeverityLevel = cms.uint32(11),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(1.1),
    HOThresholdPlus2 = cms.double(1.1),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(1.2),
    HOThresholdMinus1 = cms.double(1.1),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.4),
    EBThreshold = cms.double(0.07),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(1.1),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcalAcceptSeverityLevel = cms.uint32(1)
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    EBThreshold = cms.double(0.07),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    EcalAcceptSeverityLevel = cms.uint32(1),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    ProduceCkfPFTracks = cms.untracked.bool(True),
    HOverPLead_maxValue = cms.double(0.05),
    MaxEOverP = cms.double(3.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    UseQuality = cms.bool(True),
    EOverPLead_minValue = cms.double(0.95),
    ProducePreId = cms.untracked.bool(False),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    MuColl = cms.InputTag("muons"),
    ApplyIsolation = cms.bool(False),
    TMVAMethod = cms.string('BDT'),
    MaxEta = cms.double(2.4),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    PreCkfLabel = cms.string('SeedsForCkf'),
    NHitsInSeed = cms.int32(3),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    MinEOverP = cms.double(0.3),
    PreIdLabel = cms.string('preid'),
    UsePreShower = cms.bool(False),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EcalStripSumE_deltaEta = cms.double(0.03),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    MinPt = cms.double(2.0),
    TkColList = cms.VInputTag("hiSelectedTracks"),
    UseTMVA = cms.untracked.bool(True),
    HcalWindow = cms.double(0.184),
    TrackQuality = cms.string('highPurity'),
    Weights = cms.string('RecoParticleFlow/PFTracking/data/BDT_weights_21.txt'),
    MaxPt = cms.double(50.0),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    ClusterThreshold = cms.double(0.5),
    DisablePreId = cms.untracked.bool(True)
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    severityRecHitThreshold = cms.double(4.0),
    RecHitFlagToBeExcluded = cms.vint32(3, 4, 8, 9),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    posCalc_logweight = cms.bool(True),
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    eThreshB = cms.double(0.1),
    dynamicPhiRoad = cms.bool(False),
    posCalc_w0 = cms.double(4.2),
    severitySpikeId = cms.int32(2),
    excludeFlagged = cms.bool(False),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vint32(999),
    step = cms.int32(17),
    debugLevel = cms.string('INFO'),
    dynamicEThresh = cms.bool(False),
    superclusterCollection = cms.string(''),
    posCalc_x0 = cms.double(0.89),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    HybridBarrelSeedThr = cms.double(1.0),
    posCalc_t0 = cms.double(7.4),
    eseed = cms.double(0.35),
    severitySpikeThreshold = cms.double(0.95),
    ecalhitproducer = cms.string('ecalRecHit')
)


process.valCscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(4),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(1)
    ),
    MaxBX = cms.int32(9),
    CSCComparatorDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCComparatorDigi"),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    ),
    MinBX = cms.int32(3),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        verbosity = cms.untracked.int32(0),
        clctTrigEnable = cms.uint32(0),
        tmbL1aWindowSize = cms.uint32(7),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        matchTrigEnable = cms.uint32(1)
    ),
    commonParam = cms.PSet(
        isTMB07 = cms.bool(True),
        isMTCC = cms.bool(False)
    ),
    CSCWireDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    )
)


process.valCsctfDigis = cms.EDProducer("CSCTFCandidateProducer",
    CSCTrackProducer = cms.untracked.InputTag("valCsctfTrackDigis"),
    MuonSorter = cms.PSet(
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3)
    )
)


process.valCsctfTrackDigis = cms.EDProducer("CSCTFTrackProducer",
    isTMB07 = cms.bool(True),
    useDT = cms.bool(True),
    SectorReceiverInput = cms.untracked.InputTag("csctfDigis"),
    readDtDirect = cms.bool(False),
    DTproducer = cms.untracked.InputTag("dttfDigis"),
    SectorProcessor = cms.PSet(
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3),
        maxdphi13_accp = cms.uint32(64),
        SRLUT = cms.PSet(
            UseMiniLUTs = cms.untracked.bool(True),
            ReadLUTs = cms.untracked.bool(False),
            LUTPath = cms.untracked.string('./'),
            Binary = cms.untracked.bool(False)
        ),
        mindphip_halo = cms.uint32(128),
        AllowALCTonly = cms.bool(False),
        PTLUT = cms.PSet(
            LowQualityFlag = cms.untracked.uint32(4),
            ReadPtLUT = cms.bool(False),
            PtMethod = cms.untracked.uint32(4)
        ),
        QualityEnableME1b = cms.uint32(65535),
        QualityEnableME1c = cms.uint32(65535),
        QualityEnableME1a = cms.uint32(65535),
        QualityEnableME1f = cms.uint32(65535),
        QualityEnableME1d = cms.uint32(65535),
        QualityEnableME1e = cms.uint32(65535),
        QualityEnableME3a = cms.uint32(65535),
        QualityEnableME3b = cms.uint32(65535),
        QualityEnableME3c = cms.uint32(65535),
        maxdphi112_accp = cms.uint32(64),
        rescaleSinglesPhi = cms.bool(True),
        mindeta112_accp = cms.uint32(14),
        maxdeta113_accp = cms.uint32(38),
        maxdeta13_accp = cms.uint32(27),
        maxdphi113_accp = cms.uint32(64),
        EtaMin = cms.vuint32(22, 22, 14, 14, 14, 
            14, 10, 22),
        mindeta12_accp = cms.uint32(8),
        mbbPhiOff = cms.uint32(1982),
        maxdphi12_accp = cms.uint32(64),
        trigger_on_ME1a = cms.bool(True),
        firmwareSP = cms.uint32(20100210),
        mbaPhiOff = cms.uint32(0),
        EtaMax = cms.vuint32(127, 127, 127, 127, 127, 
            24, 24, 127),
        CoreLatency = cms.uint32(7),
        PreTrigger = cms.uint32(2),
        mindetap = cms.uint32(15),
        trigger_on_MB1d = cms.bool(False),
        maxdeta112_accp = cms.uint32(29),
        mindeta13_accp = cms.uint32(13),
        run_core = cms.bool(True),
        firmwareFA = cms.uint32(20090521),
        trigger_on_MB1a = cms.bool(False),
        firmwareDD = cms.uint32(20090521),
        QualityEnableME2c = cms.uint32(65535),
        EtaWindows = cms.vuint32(6, 6, 6, 6, 6, 
            6, 6),
        QualityEnableME2a = cms.uint32(65535),
        trigger_on_ME4 = cms.bool(False),
        initializeFromPSet = cms.bool(False),
        maxdeta12_accp = cms.uint32(17),
        QualityEnableME4a = cms.uint32(65535),
        QualityEnableME4c = cms.uint32(65535),
        straightp = cms.uint32(60),
        gangedME1a = cms.untracked.bool(True),
        trigger_on_ME1b = cms.bool(True),
        AllowCLCTonly = cms.bool(False),
        QualityEnableME4b = cms.uint32(65535),
        widePhi = cms.uint32(1),
        mindetap_halo = cms.uint32(8),
        curvedp = cms.uint32(200),
        singlesTrackOutput = cms.uint32(1),
        mindphip = cms.uint32(720),
        mindeta113_accp = cms.uint32(21),
        kill_fiber = cms.uint32(0),
        firmwareVM = cms.uint32(20090521),
        trigger_on_ME2 = cms.bool(False),
        BXAdepth = cms.uint32(2),
        trigger_on_ME3 = cms.bool(False),
        QualityEnableME2b = cms.uint32(65535)
    )
)


process.valDtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    tTrigMode = cms.string('DTTTrigSyncTOFCorr'),
    digiTag = cms.InputTag("muonDTDigis"),
    lut_btic = cms.untracked.int32(31),
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    tTrigModeConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        kFactor = cms.double(-2.0),
        vPropWire = cms.double(24.4),
        tofCorrType = cms.int32(1),
        tTrig = cms.double(500.0)
    ),
    lut_dump_flag = cms.untracked.bool(False)
)


process.valDttfDigis = cms.EDProducer("DTTrackFinder",
    Open_LUTs = cms.untracked.bool(False),
    Extrapolation_nbits_PhiB = cms.untracked.int32(8),
    BX_max = cms.untracked.int32(7),
    BX_min = cms.untracked.int32(-9),
    EtaTrackFinder = cms.untracked.bool(True),
    CSCStub_Source = cms.InputTag("valCsctfTrackDigis"),
    Extrapolation_Filter = cms.untracked.int32(1),
    PT_Assignment_nbits_Phi = cms.untracked.int32(12),
    Overlap = cms.untracked.bool(True),
    PT_Assignment_nbits_PhiB = cms.untracked.int32(10),
    DTDigi_Source = cms.InputTag("dttfDigis"),
    Extrapolation_21 = cms.untracked.bool(False),
    PHI_Assignment_nbits_PhiB = cms.untracked.int32(10),
    Debug = cms.untracked.int32(0),
    OutOfTime_Filter = cms.untracked.bool(False),
    PHI_Assignment_nbits_Phi = cms.untracked.int32(10),
    Extrapolation_nbits_Phi = cms.untracked.int32(8),
    OutOfTime_Filter_Window = cms.untracked.int32(1)
)


process.valEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    InstanceEB = cms.string('ebDigis'),
    InstanceEE = cms.string('eeDigis'),
    binOfMaximum = cms.int32(6),
    Famos = cms.bool(False),
    TcpOutput = cms.bool(False),
    Debug = cms.bool(False),
    Label = cms.string('ecalDigis')
)


process.valGctDigis = cms.EDProducer("L1GctEmulator",
    useImprovedTauAlgorithm = cms.bool(True),
    ignoreRCTTauVetoBitsForIsolation = cms.bool(False),
    postSamples = cms.uint32(0),
    preSamples = cms.uint32(0),
    inputLabel = cms.InputTag("gctDigis"),
    writeInternalData = cms.bool(False),
    jetFinderType = cms.string('hardwareJetFinder'),
    hardwareTest = cms.bool(False)
)


process.valGmtDigis = cms.EDProducer("L1MuGlobalMuonTrigger",
    BX_min_readout = cms.int32(-2),
    BX_min = cms.int32(-4),
    CSCCandidates = cms.InputTag("gtDigis","CSC"),
    BX_max = cms.int32(4),
    BX_max_readout = cms.int32(2),
    RPCfCandidates = cms.InputTag("gtDigis","RPCf"),
    Debug = cms.untracked.int32(0),
    RPCbCandidates = cms.InputTag("gtDigis","RPCb"),
    DTCandidates = cms.InputTag("gtDigis","DT"),
    WriteLUTsAndRegs = cms.untracked.bool(False),
    SendMipIso = cms.untracked.bool(False),
    MipIsoData = cms.InputTag("gctDigis")
)


process.valGtDigis = cms.EDProducer("L1GlobalTrigger",
    ProduceL1GtObjectMapRecord = cms.bool(True),
    EmulateBxInEvent = cms.int32(3),
    ProduceL1GtEvmRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 0),
    ProduceL1GtDaqRecord = cms.bool(True),
    GmtInputTag = cms.InputTag("gtDigis"),
    AlternativeNrBxBoardEvm = cms.uint32(0),
    TechnicalTriggersInputTags = cms.VInputTag(cms.InputTag("valRpcTechTrigDigis"), cms.InputTag("valHcalTechTrigDigis")),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    GctInputTag = cms.InputTag("gctDigis"),
    AlternativeNrBxBoardDaq = cms.uint32(0),
    WritePsbL1GtDaqRecord = cms.bool(True),
    BstLengthBytes = cms.int32(-1)
)


process.valHcalTTPDigis = cms.EDProducer("HcalTTPDigiProducer",
    iEtaMax = cms.int32(41),
    defTT10 = cms.string('hits>=3:hfp>=1:hfm>=1'),
    defTT9 = cms.string('hits>=2:hfp>=1:hfm>=1'),
    defTT8 = cms.string('hits>=2'),
    presamples = cms.int32(2),
    iEtaMin = cms.int32(33),
    fwAlgorithm = cms.int32(1),
    HFSoI = cms.int32(4),
    threshold = cms.uint32(2),
    id = cms.untracked.int32(101),
    samples = cms.int32(5),
    defTTLocal = cms.string('hits>=4'),
    HFDigiCollection = cms.InputTag("hcalDigis"),
    maskedChannels = cms.vuint32()
)


process.valHcalTechTrigDigis = cms.EDProducer("HcalTTPTriggerRecord",
    ttpBitNames = cms.vstring('L1Tech_HCAL_HF_MM_or_PP_or_PM.v0', 
        'L1Tech_HCAL_HF_coincidence_PM.v1', 
        'L1Tech_HCAL_HF_MMP_or_MPP.v0'),
    ttpDigiCollection = cms.InputTag("simHcalTTPDigis"),
    ttpBits = cms.vuint32(8, 9, 10)
)


process.valHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    latency = cms.int32(1),
    ZS_threshold = cms.uint32(1),
    PMTNoiseThreshold = cms.uint32(0),
    MinSignalThreshold = cms.uint32(0),
    inputLabel = cms.VInputTag(cms.InputTag("hcalDigis"), cms.InputTag("hcalDigis")),
    numberOfPresamples = cms.int32(2),
    numberOfSamples = cms.int32(4),
    weights = cms.vdouble(1.0, 1.0),
    RunZS = cms.untracked.bool(False),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.untracked.bool(True),
    peakFilter = cms.bool(True)
)


process.valRctDigis = cms.EDProducer("L1RCTProducer",
    useDebugTpgScales = cms.bool(False),
    hcalDigis = cms.VInputTag(cms.InputTag("hcalDigis")),
    ecalDigis = cms.VInputTag(cms.InputTag("ecalDigis","EcalTriggerPrimitives")),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True),
    BunchCrossings = cms.vint32(0)
)


process.valRpcTechTrigDigis = cms.EDProducer("RPCTechnicalTrigger",
    BitNumbers = cms.vuint32(24, 25, 26, 27, 28, 
        29, 30),
    RPCDigiLabel = cms.InputTag("muonRPCDigis"),
    Verbosity = cms.untracked.int32(0),
    UseEventSetup = cms.untracked.int32(0),
    ConfigFile = cms.string('hardware-pseudoconfig.txt'),
    RPCSimLinkInstance = cms.InputTag("RPCDigiSimLink"),
    BitNames = cms.vstring('L1Tech_RPC_TTU_barrel_Cosmics/v0', 
        'L1Tech_RPC_TTU_pointing_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus2_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RB0_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus2_Cosmics/v0'),
    UseRPCSimLink = cms.untracked.int32(0)
)


process.valRpcTriggerDigis = cms.EDProducer("RPCTrigger",
    label = cms.string('muonRPCDigis'),
    RPCTriggerDebug = cms.untracked.int32(0)
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    samplesToAdd = cms.int32(3),
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    correctionPhaseNS = cms.double(0.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    firstAuxOffset = cms.int32(0),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setHSCPFlags = cms.bool(True),
    Subdetector = cms.string('ZDC'),
    setTimingTrustFlags = cms.bool(False),
    firstSample = cms.int32(4),
    recoMethod = cms.int32(2),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.ALCARECODtCalibHLTFilter = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlcaDtCalibMu'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    andOr = cms.bool(True)
)


process.ALCARECOHcalCalHOCosmicHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('HcalCalHOCosmics'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOHcalCalHOHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('HcalCalHO'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlBeamHalo = cms.EDFilter("AlignmentCSCBeamHaloSelectorModule",
    minHitsPerStation = cms.uint32(4),
    minStations = cms.uint32(0),
    filter = cms.bool(True),
    src = cms.InputTag("cosmicMuons")
)


process.ALCARECOMuAlBeamHaloDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlBeamHaloHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlBeamHalo'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlBeamHaloOverlaps = cms.EDFilter("AlignmentCSCOverlapSelectorModule",
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOMuAlBeamHaloOverlapsEnergyCut"),
    minHitsPerChamber = cms.uint32(4),
    station = cms.int32(0)
)


process.ALCARECOMuAlBeamHaloOverlapsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlBeamHaloOverlapsEnergyCut = cms.EDFilter("AlignmentCSCBeamHaloSelectorModule",
    minHitsPerStation = cms.uint32(4),
    minStations = cms.uint32(0),
    filter = cms.bool(True),
    src = cms.InputTag("cosmicMuons")
)


process.ALCARECOMuAlBeamHaloOverlapsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlBeamHaloOverlaps'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlCalIsolatedMu = cms.EDFilter("AlignmentMuonSelectorModule",
    chi2nMaxSA = cms.double(9999999.0),
    minMassPair = cms.double(89.0),
    nHitMaxGB = cms.double(9999999.0),
    applyMultiplicityFilter = cms.bool(False),
    pMin = cms.double(10.0),
    etaMin = cms.double(-2.4),
    nHitMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    pMax = cms.double(999999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    applyNHighestPt = cms.bool(False),
    nHitMaxSA = cms.double(9999999.0),
    ptMax = cms.double(999999.0),
    nHitMinSA = cms.double(0.0),
    chi2nMaxTO = cms.double(9999999.0),
    chi2nMaxGB = cms.double(9999999.0),
    nHighestPt = cms.int32(2),
    applyMassPairFilter = cms.bool(False),
    src = cms.InputTag("muons"),
    nHitMinGB = cms.double(0.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    nHitMinTO = cms.double(0.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOMuAlCalIsolatedMuHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlCalIsolatedMu'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlGlobalCosmics = cms.EDFilter("AlignmentMuonSelectorModule",
    chi2nMaxSA = cms.double(9999999.0),
    minMassPair = cms.double(89.0),
    nHitMaxGB = cms.double(9999999.0),
    applyMultiplicityFilter = cms.bool(False),
    pMin = cms.double(0.0),
    etaMin = cms.double(-100.0),
    nHitMaxTO = cms.double(9999999.0),
    etaMax = cms.double(100.0),
    pMax = cms.double(999999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMin = cms.double(10.0),
    minMultiplicity = cms.int32(1),
    applyNHighestPt = cms.bool(False),
    nHitMaxSA = cms.double(9999999.0),
    ptMax = cms.double(999999.0),
    nHitMinSA = cms.double(0.0),
    chi2nMaxTO = cms.double(9999999.0),
    chi2nMaxGB = cms.double(9999999.0),
    nHighestPt = cms.int32(2),
    applyMassPairFilter = cms.bool(False),
    src = cms.InputTag("muonsBarrelOnly"),
    nHitMinGB = cms.double(1),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    nHitMinTO = cms.double(0.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOMuAlGlobalCosmicsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(False),
    DetectorType = cms.vstring('DT0', 
        'DTp', 
        'DTm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlGlobalCosmicsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlGlobalCosmics'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlGlobalCosmicsInCollisions = cms.EDFilter("AlignmentMuonSelectorModule",
    chi2nMaxSA = cms.double(9999999.0),
    minMassPair = cms.double(89.0),
    nHitMaxGB = cms.double(9999999.0),
    applyMultiplicityFilter = cms.bool(False),
    pMin = cms.double(0.0),
    etaMin = cms.double(-100.0),
    nHitMaxTO = cms.double(9999999.0),
    etaMax = cms.double(100.0),
    pMax = cms.double(999999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMin = cms.double(10.0),
    minMultiplicity = cms.int32(1),
    applyNHighestPt = cms.bool(False),
    nHitMaxSA = cms.double(9999999.0),
    ptMax = cms.double(999999.0),
    nHitMinSA = cms.double(0.0),
    chi2nMaxTO = cms.double(9999999.0),
    chi2nMaxGB = cms.double(9999999.0),
    nHighestPt = cms.int32(2),
    applyMassPairFilter = cms.bool(False),
    src = cms.InputTag("muonsFromCosmics"),
    nHitMinGB = cms.double(1),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    nHitMinTO = cms.double(0.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(False),
    DetectorType = cms.vstring('DT0', 
        'DTp', 
        'DTm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlGlobalCosmics'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlOverlaps = cms.EDFilter("AlignmentCSCOverlapSelectorModule",
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOMuAlOverlapsMuonSelector","StandAlone"),
    minHitsPerChamber = cms.uint32(4),
    station = cms.int32(0)
)


process.ALCARECOMuAlOverlapsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlOverlapsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlOverlaps'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlOverlapsMuonSelector = cms.EDFilter("AlignmentMuonSelectorModule",
    chi2nMaxSA = cms.double(9999999.0),
    minMassPair = cms.double(89.0),
    nHitMaxGB = cms.double(9999999.0),
    applyMultiplicityFilter = cms.bool(False),
    pMin = cms.double(0.0),
    etaMin = cms.double(-2.4),
    nHitMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    pMax = cms.double(999999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMin = cms.double(3.0),
    minMultiplicity = cms.int32(1),
    applyNHighestPt = cms.bool(False),
    nHitMaxSA = cms.double(9999999.0),
    ptMax = cms.double(999999.0),
    nHitMinSA = cms.double(0.0),
    chi2nMaxTO = cms.double(9999999.0),
    chi2nMaxGB = cms.double(9999999.0),
    nHighestPt = cms.int32(2),
    applyMassPairFilter = cms.bool(False),
    src = cms.InputTag("muons"),
    nHitMinGB = cms.double(0.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    nHitMinTO = cms.double(0.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOMuAlZMuMu = cms.EDFilter("AlignmentMuonSelectorModule",
    chi2nMaxSA = cms.double(9999999.0),
    minMassPair = cms.double(81.0),
    nHitMaxGB = cms.double(9999999.0),
    applyMultiplicityFilter = cms.bool(False),
    pMin = cms.double(0.0),
    etaMin = cms.double(-2.4),
    nHitMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    pMax = cms.double(999999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMin = cms.double(10.0),
    minMultiplicity = cms.int32(1),
    applyNHighestPt = cms.bool(False),
    nHitMaxSA = cms.double(9999999.0),
    ptMax = cms.double(999999.0),
    nHitMinSA = cms.double(0.0),
    chi2nMaxTO = cms.double(9999999.0),
    chi2nMaxGB = cms.double(9999999.0),
    nHighestPt = cms.int32(2),
    applyMassPairFilter = cms.bool(True),
    src = cms.InputTag("muons"),
    nHitMinGB = cms.double(0.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(101.0),
    nHitMinTO = cms.double(0.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOMuAlZMuMuDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOMuAlZMuMuHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('MuAlZMuMu'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECORpcCalHLTFilter = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('RpcCalHLT'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    andOr = cms.bool(True)
)


process.ALCARECOSiPixelLorentzAngleHLTFilter = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring('HLT_IsoMu11', 
        'HLT_DoubleMu3', 
        'HLT_DoubleMu3_JPsi', 
        'HLT_DoubleMu3_Upsilon', 
        'HLT_DoubleMu7_Z', 
        'HLT_DoubleMu3_SameSign'),
    throw = cms.bool(False),
    andOr = cms.bool(True)
)


process.ALCARECOSiStripCalMinBias = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-2.6),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(2.6),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.8),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(6),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(10.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("hiSelectedTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOSiStripCalMinBiasHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('SiStripCalMinBiasHI'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOSiStripCalZeroBiasHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('SiStripCalZeroBiasHI'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlBeamHalo = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-9999),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(9999),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(3),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("beamhaloTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlBeamHaloDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlCosmics0TDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlCosmics0THLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlCosmics0T'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsCTF = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(4.0),
    etaMin = cms.double(-99.0),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(99.0),
    pMax = cms.double(99999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(99999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(True),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(1),
    nHitMin2D = cms.uint32(2),
    src = cms.InputTag("ctfWithMaterialTracksP5"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-99.0),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(99.0),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(99999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(1),
    nHitMin2D = cms.uint32(2),
    src = cms.InputTag("ctfWithMaterialTracksP5"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCosmicTF = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(4.0),
    etaMin = cms.double(-99.0),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(99.0),
    pMax = cms.double(99999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    trackQualities = cms.vstring(),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(99999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    nHitMax = cms.double(999.0),
    applyNHighestPt = cms.bool(True),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    applyChargeCheck = cms.bool(False),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(1),
    nHitMin2D = cms.uint32(2),
    src = cms.InputTag("cosmictrackfinderP5"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    chi2nMax = cms.double(999999.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCosmicTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-99.0),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(99.0),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    trackQualities = cms.vstring(),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(99999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    nHitMax = cms.double(999.0),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    applyChargeCheck = cms.bool(False),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(1),
    nHitMin2D = cms.uint32(2),
    src = cms.InputTag("cosmictrackfinderP5"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    chi2nMax = cms.double(999999.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlCosmicsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlCosmicsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlCosmics'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsInCollisions = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(4.0),
    etaMin = cms.double(-99.0),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(99.0),
    pMax = cms.double(99999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(99999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(True),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(1),
    nHitMin2D = cms.uint32(2),
    src = cms.InputTag("regionalCosmicTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlCosmicsInCollisionsDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlCosmicsInCollisionsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlCosmics'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlJpsiMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(True),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(True),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(3.2),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(3.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.8),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(0.0),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("generalTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlJpsiMuMuDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlJpsiMuMuHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlJpsiMuMu'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMinBias = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(1.5),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.65),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("generalTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlMinBiasDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlMinBiasFilterForBS = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    TriggerResultsTag = cms.InputTag("TriggerResults","","RECO"),
    HLTPaths = cms.vstring('pathALCARECOTkAlMinBias'),
    throw = cms.bool(True),
    andOr = cms.bool(True)
)


process.ALCARECOTkAlMinBiasHI = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(1.5),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(False),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    trackQualities = cms.vstring(),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.65),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(7),
    ptMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    nHitMax = cms.double(999.0),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    applyChargeCheck = cms.bool(False),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("hiSelectedTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    chi2nMax = cms.double(999999.0),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlMinBiasHIDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlMinBiasHIHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlMinBiasHI'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring(),
    andOr = cms.bool(True),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMinBiasHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlMinBias'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMinBiasNOTHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlMinBiasNOT'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMuonIsolated = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(True),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.1),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(True),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(False),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(15000.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(0.0),
        applyChargeFilter = cms.bool(False),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(2.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(0.0),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("generalTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlMuonIsolatedDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlMuonIsolatedHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlMuonIsolated'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlUpsilonMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(False),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(True),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(True),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(9.8),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(9.25),
        applyChargeFilter = cms.bool(True),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(0.8),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(0.0),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("generalTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlUpsilonMuMuDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlUpsilonMuMuHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlUpsilonMuMu'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlZMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    minHitChargeStrip = cms.double(20.0),
    minHitsPerSubDet = cms.PSet(
        inPIXEL = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTECminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inTOB = cms.int32(0),
        inTEC = cms.int32(0),
        inTECplus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inTID = cms.int32(0),
        inFPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inBPIX = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIB = cms.int32(0)
    ),
    applyMultiplicityFilter = cms.bool(False),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    countStereoHitAs2D = cms.bool(True),
    pMin = cms.double(0.0),
    etaMin = cms.double(-3.5),
    minHitIsolation = cms.double(0.01),
    dzMax = cms.double(999999.0),
    etaMax = cms.double(3.5),
    pMax = cms.double(9999.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    GlobalSelector = cms.PSet(
        applyIsolationtest = cms.bool(True),
        muonSource = cms.InputTag("muons"),
        minIsolatedCount = cms.int32(0),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        minGlobalMuonCount = cms.int32(1),
        minJetDeltaR = cms.double(0.2),
        maxJetCount = cms.int32(3),
        applyGlobalMuonFilter = cms.bool(True),
        minJetPt = cms.double(40.0),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        maxJetPt = cms.double(40.0),
        applyJetCountFilter = cms.bool(False),
        maxTrackDeltaR = cms.double(0.001)
    ),
    maxHitDiffEndcaps = cms.double(999.0),
    dzMin = cms.double(-999999.0),
    TwoBodyDecaySelector = cms.PSet(
        applyMassrangeFilter = cms.bool(True),
        daughterMass = cms.double(0.105),
        applyMissingETFilter = cms.bool(False),
        missingETSource = cms.InputTag("met"),
        maxXMass = cms.double(110.0),
        charge = cms.int32(0),
        acoplanarDistance = cms.double(1.0),
        minXMass = cms.double(70.0),
        applyChargeFilter = cms.bool(True),
        applyAcoplanarityFilter = cms.bool(False),
        useUnsignedCharge = cms.bool(True)
    ),
    minPrescaledHits = cms.int32(-1),
    ptMin = cms.double(15.0),
    minMultiplicity = cms.int32(1),
    nHitMin = cms.double(0.0),
    ptMax = cms.double(999.0),
    nHitMax = cms.double(999.0),
    d0Max = cms.double(999999.0),
    iterativeTrackingSteps = cms.vstring(),
    trackQualities = cms.vstring(),
    applyNHighestPt = cms.bool(False),
    d0Min = cms.double(-999999.0),
    nLostHitMax = cms.double(999.0),
    chi2nMax = cms.double(999999.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    hitPrescaleMapTag = cms.InputTag(""),
    nHighestPt = cms.int32(2),
    nHitMin2D = cms.uint32(0),
    src = cms.InputTag("generalTracks"),
    applyIsolationCut = cms.bool(False),
    multiplicityOnInput = cms.bool(False),
    filter = cms.bool(True),
    maxMultiplicity = cms.int32(999999),
    seedOnlyFrom = cms.int32(0),
    applyChargeCheck = cms.bool(False),
    applyBasicCuts = cms.bool(True)
)


process.ALCARECOTkAlZMuMuDCSFilter = cms.EDFilter("DetStatus",
    DebugOn = cms.untracked.bool(False),
    AndOr = cms.bool(True),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX'),
    ApplyFilter = cms.bool(True)
)


process.ALCARECOTkAlZMuMuHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('TkAlZMuMu'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.DCSStatusForSiStripCalMinBias = cms.EDFilter("SiStripDCSFilter")


process.DCSStatusForSiStripCalZeroBias = cms.EDFilter("SiStripDCSFilter")


process.DTCalibMuonSelection = cms.EDFilter("DTCalibMuonSelection",
    filter = cms.bool(True),
    src = cms.InputTag("muons"),
    etaMin = cms.double(-1.25),
    etaMax = cms.double(1.25),
    ptMin = cms.double(3.0)
)


process.HLTPixelActivityFilterForSiStripCalMinBias = cms.EDFilter("HLTPixelActivityFilter",
    maxClusters = cms.uint32(500),
    inputTag = cms.InputTag("siPixelClusters"),
    minClusters = cms.uint32(3),
    saveTag = cms.untracked.bool(False)
)


process.HLTPixelActivityFilterForSiStripCalZeroBias = cms.EDFilter("HLTPixelActivityFilter",
    maxClusters = cms.uint32(500),
    inputTag = cms.InputTag("siPixelClusters"),
    minClusters = cms.uint32(3),
    saveTag = cms.untracked.bool(False)
)


process.L1CollTrigger = cms.EDFilter("HLTLevel1GTSeed",
    saveTags = cms.untracked.bool(True),
    L1SeedsLogicalExpression = cms.string('0 AND ( 40 OR 41 ) AND NOT (36 OR 37 OR 38 OR 39)'),
    L1MuonCollectionTag = cms.InputTag("l1extraParticles"),
    L1UseL1TriggerObjectMaps = cms.bool(True),
    L1UseAliasesForSeeding = cms.bool(True),
    L1GtReadoutRecordTag = cms.InputTag("gtDigis"),
    L1CollectionsTag = cms.InputTag("l1extraParticles"),
    L1NrBxInEvent = cms.int32(3),
    L1GtObjectMapTag = cms.InputTag("l1GtObjectMap"),
    L1TechTriggerSeeding = cms.bool(True)
)


process.LargeSiStripClusterEvents = cms.EDFilter("LargeSiStripClusterEvents",
    absoluteThreshold = cms.untracked.int32(10000),
    collectionName = cms.InputTag("calZeroBiasClusters"),
    moduleThreshold = cms.untracked.int32(20)
)


process.PotentialTIBTECFrameHeaderEventsAdditionalPeak = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        historyProduct = cms.untracked.InputTag("consecutiveHEs"),
        APVPhaseLabel = cms.untracked.string('APVPhases')
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any'),
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(24, 25)
    ), 
        cms.PSet(
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any'),
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(22, 23)
        ))
)


process.PotentialTIBTECFrameHeaderEventsFPeak = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        historyProduct = cms.untracked.InputTag("consecutiveHEs"),
        APVPhaseLabel = cms.untracked.string('APVPhases')
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any'),
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(19, 21)
    ), 
        cms.PSet(
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any'),
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(17, 19)
        ))
)


process.PotentialTIBTECHugeEvents = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        historyProduct = cms.untracked.InputTag("consecutiveHEs"),
        APVPhaseLabel = cms.untracked.string('APVPhases')
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any'),
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(8, 8)
    ), 
        cms.PSet(
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any'),
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(6, 8)
        ))
)


process.dijetsHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('HcalCalDijets'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.dqmInfoES = cms.EDFilter("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalPreshower')
)


process.ecaletaCalibHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('EcalCalEtaCalib'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ecalphiSymHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring('AlCa_EcalPhiSym*'),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ecalpi0CalibHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('EcalCalPi0Calib'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.gammajetHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring('HLT_IsoPhoton30_L1I', 
        'HLT_IsoPhoton15_L1R'),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.goodElectronFilter = cms.EDFilter("CandViewCountFilter",
    src = cms.InputTag("goodElectrons"),
    minNumber = cms.uint32(1)
)


process.goodElectronFilter2 = cms.EDFilter("CandViewCountFilter",
    src = cms.InputTag("goodElectrons2"),
    minNumber = cms.uint32(0)
)


process.goodElectrons = cms.EDFilter("CandViewRefSelector",
    filter = cms.bool(True),
    src = cms.InputTag("gsfElectrons"),
    cut = cms.string('et > 15')
)


process.goodElectrons2 = cms.EDFilter("CandViewRefSelector",
    filter = cms.bool(True),
    src = cms.InputTag("gsfElectrons"),
    cut = cms.string('et > 1')
)


process.goodSuperClusterFilter = cms.EDFilter("CandViewCountFilter",
    src = cms.InputTag("goodSuperClusters"),
    minNumber = cms.uint32(1)
)


process.goodSuperClusterFilter2 = cms.EDFilter("CandViewCountFilter",
    src = cms.InputTag("goodSuperClusters2"),
    minNumber = cms.uint32(0)
)


process.goodSuperClusters = cms.EDFilter("CandViewRefSelector",
    filter = cms.bool(True),
    src = cms.InputTag("superClusterCands"),
    cut = cms.string('et > 20')
)


process.goodSuperClusters2 = cms.EDFilter("CandViewRefSelector",
    filter = cms.bool(True),
    src = cms.InputTag("superClusterCands"),
    cut = cms.string('et > 10')
)


process.hcalminbiasHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('HcalCalMinBias'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.hiBestAdaptiveVertex = cms.EDFilter("HIBestVertexSelection",
    maxNumber = cms.uint32(1),
    src = cms.InputTag("hiPixelAdaptiveVertex")
)


process.hiCentrality = cms.EDFilter("reco::CentralityProducer",
    producePixelTracks = cms.bool(True),
    srcHFhits = cms.InputTag("hfreco"),
    srcTracks = cms.InputTag("hiSelectedTracks"),
    doPixelCut = cms.bool(False),
    UseQuality = cms.bool(True),
    srcZDChits = cms.InputTag(""),
    srcEEhits = cms.InputTag("EcalRecHitsEE"),
    produceETmidRapidity = cms.bool(True),
    doFilter = cms.bool(False),
    producePixelhits = cms.bool(True),
    produceEcalhits = cms.bool(False),
    produceHFtowers = cms.bool(True),
    produceZDChits = cms.bool(False),
    trackEtaCut = cms.double(2),
    produceBasicClusters = cms.bool(True),
    trackPtCut = cms.double(1),
    srcTowers = cms.InputTag("towerMaker"),
    srcBasicClustersEE = cms.InputTag("multi5x5BasicClusters","multi5x5EndcapBasicClusters"),
    srcBasicClustersEB = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    produceHFhits = cms.bool(True),
    srcPixelTracks = cms.InputTag("hiPixel3PrimTracks"),
    produceTracks = cms.bool(True),
    srcReUse = cms.InputTag("hiCentrality"),
    midRapidityRange = cms.double(1),
    TrackQuality = cms.string('highPurity'),
    srcPixelhits = cms.InputTag("siPixelRecHits"),
    srcEBhits = cms.InputTag("EcalRecHitsEB")
)


process.hiSelectedProtoTracks = cms.EDFilter("HIProtoTrackSelection",
    src = cms.InputTag("hiPixel3ProtoTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    maxD0Significance = cms.double(100),
    minZCut = cms.double(0.2),
    VertexCollection = cms.InputTag("hiPixelMedianVertex"),
    ptMin = cms.double(0.0),
    nSigmaZ = cms.double(5.0)
)


process.highPurityTracks = cms.EDFilter("TrackSelector",
    src = cms.InputTag("hiSelectedTracks"),
    cut = cms.string('quality("highPurity")')
)


process.hltHighLevel = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    HLTPaths = cms.vstring(),
    throw = cms.bool(True),
    andOr = cms.bool(True)
)


process.hltLevel1GTSeed = cms.EDFilter("HLTLevel1GTSeed",
    saveTags = cms.untracked.bool(True),
    L1SeedsLogicalExpression = cms.string(''),
    L1MuonCollectionTag = cms.InputTag("l1extraParticles"),
    L1UseL1TriggerObjectMaps = cms.bool(True),
    L1UseAliasesForSeeding = cms.bool(True),
    L1GtReadoutRecordTag = cms.InputTag("gtDigis"),
    L1CollectionsTag = cms.InputTag("l1extraParticles"),
    L1NrBxInEvent = cms.int32(3),
    L1GtObjectMapTag = cms.InputTag("l1GtObjectMap"),
    L1TechTriggerSeeding = cms.bool(False)
)


process.isoHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('HcalCalIsoTrk'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.isolElectronewkHLTFilter = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string('EcalCalElectron'),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring(),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.noiseHLT = cms.EDFilter("HLTHighLevel",
    eventSetupPathsKey = cms.string(''),
    andOr = cms.bool(True),
    HLTPaths = cms.vstring('HLT_MET25'),
    throw = cms.bool(False),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.noscraping = cms.EDFilter("FilterOutScraping",
    debugOn = cms.untracked.bool(False),
    thresh = cms.untracked.double(0.25),
    numtrack = cms.untracked.uint32(10),
    applyfilter = cms.untracked.bool(True)
)


process.prescaler = cms.EDFilter("PrescalerFHN",
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    Prescales = cms.VPSet(cms.PSet(
        PrescaleFactor = cms.uint32(1),
        HLTName = cms.string('HLT_MET25')
    ))
)


process.primaryVertexFilter = cms.EDFilter("VertexSelector",
    filter = cms.bool(True),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('!isFake && ndof > 4 && abs(z) <= 15 && position.Rho <= 2')
)


process.ALCARECODTCalibrationDQM = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(False),
    minTriggerWidth = cms.untracked.int32(2000),
    outputFileName = cms.untracked.string('DigiHistos.root'),
    folderName = cms.untracked.string('AlCaReco/DTCalibration'),
    digiLabel = cms.untracked.string('muonDTDigis'),
    maxTriggerWidth = cms.untracked.int32(6000)
)


process.ALCARECOEcalCalElectronCalibDQM = cms.EDAnalyzer("DQMSourceEleCalib",
    electronCollection = cms.InputTag("electronFilter"),
    AlCaStreamEBTag = cms.InputTag("alCaIsolatedElectrons","alcaBarrelHits"),
    AlCaStreamEETag = cms.InputTag("alCaIsolatedElectrons","alcaEndcapHits"),
    FolderName = cms.untracked.string('AlCaReco/EcalSingleEle')
)


process.ALCARECOEcalCalEtaCalibDQM = cms.EDAnalyzer("DQMSourcePi0",
    selePtGammaEndCap = cms.double(0.8),
    seleS4S9GammaEta = cms.double(0.9),
    prescaleFactor = cms.untracked.int32(1),
    selePtGammaEtaEndCap = cms.double(1.5),
    seleMinvMaxPi0 = cms.double(0.22),
    seleMinvMinEta = cms.double(0.3),
    selePtEta = cms.double(4.0),
    seleS9S25GammaEta = cms.double(0.8),
    seleEtaIsoEndCap = cms.double(0.5),
    ParameterX0 = cms.double(0.89),
    seleXtalMinEnergy = cms.double(-0.15),
    seleXtalMinEnergyEndCap = cms.double(-0.75),
    selePi0BeltDetaEndCap = cms.double(0.05),
    selePtPi0 = cms.double(2.0),
    seleMinvMaxEta = cms.double(0.8),
    ParameterT0_endc = cms.double(3.1),
    massHighPi0Cand = cms.double(0.163),
    clusSeedThr = cms.double(0.5),
    ParameterT0_endcPresh = cms.double(1.2),
    seleEtaBeltDeta = cms.double(0.1),
    SaveToFile = cms.untracked.bool(False),
    ptMinForIsolationEtaEndCap = cms.double(0.5),
    selePtGammaEta = cms.double(1.2),
    clusPhiSize = cms.int32(3),
    selePi0BeltDREndCap = cms.double(0.2),
    selePi0BeltDR = cms.double(0.2),
    isMonEEeta = cms.untracked.bool(True),
    clusEtaSize = cms.int32(3),
    isMonEBpi0 = cms.untracked.bool(True),
    seleEtaBeltDR = cms.double(0.3),
    seleEtaBeltDREndCap = cms.double(0.3),
    AlCaStreamEEetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEE"),
    ptMinForIsolationEndCap = cms.double(0.5),
    selePi0IsoEndCap = cms.double(0.5),
    seleEtaIso = cms.double(0.5),
    selePi0Iso = cms.double(0.5),
    ParameterW0 = cms.double(4.2),
    selePtPi0EndCap = cms.double(3.0),
    massLowPi0Cand = cms.double(0.104),
    seleMinvMaxPi0EndCap = cms.double(0.3),
    selePi0BeltDeta = cms.double(0.05),
    selePtEtaEndCap = cms.double(5),
    seleS4S9GammaEndCap = cms.double(0.9),
    selePtGamma = cms.double(1),
    clusSeedThrEndCap = cms.double(1.0),
    seleS4S9Gamma = cms.double(0.83),
    ptMinForIsolation = cms.double(1),
    ptMinForIsolationEta = cms.double(1.0),
    ParameterLogWeighted = cms.bool(True),
    FolderName = cms.untracked.string('AlCaReco/EcalPi0'),
    seleS9S25GammaEtaEndCap = cms.double(0.85),
    seleS4S9GammaEtaEndCap = cms.double(0.9),
    seleMinvMinPi0EndCap = cms.double(0.05),
    seleMinvMinPi0 = cms.double(0.06),
    seleMinvMaxEtaEndCap = cms.double(0.8),
    FileName = cms.untracked.string('MonitorAlCaEcalPi0.root'),
    AlCaStreamEBetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEB"),
    AlCaStreamEBpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEB"),
    AlCaStreamEEpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEE"),
    seleEtaBeltDetaEndCap = cms.double(0.1),
    isMonEEpi0 = cms.untracked.bool(True),
    seleMinvMinEtaEndCap = cms.double(0.3),
    ParameterT0_barl = cms.double(5.7),
    isMonEBeta = cms.untracked.bool(True)
)


process.ALCARECOEcalCalPhisymDQM = cms.EDAnalyzer("HLTAlCaMonEcalPhiSym",
    AlCaStreamEBTag = cms.untracked.InputTag("hltAlCaPhiSymStream","phiSymEcalRecHitsEB"),
    SaveToFile = cms.untracked.bool(False),
    FolderName = cms.untracked.string('AlCaReco/EcalPhiSym'),
    AlCaStreamEETag = cms.untracked.InputTag("hltAlCaPhiSymStream","phiSymEcalRecHitsEE"),
    prescaleFactor = cms.untracked.int32(1),
    FileName = cms.untracked.string('MonitorAlCaEcalPhiSym.root')
)


process.ALCARECOEcalCalPi0CalibDQM = cms.EDAnalyzer("DQMSourcePi0",
    selePtGammaEndCap = cms.double(0.8),
    seleS4S9GammaEta = cms.double(0.9),
    prescaleFactor = cms.untracked.int32(1),
    selePtGammaEtaEndCap = cms.double(1.5),
    seleMinvMaxPi0 = cms.double(0.22),
    seleMinvMinEta = cms.double(0.3),
    selePtEta = cms.double(4.0),
    seleS9S25GammaEta = cms.double(0.8),
    seleEtaIsoEndCap = cms.double(0.5),
    ParameterX0 = cms.double(0.89),
    seleXtalMinEnergy = cms.double(-0.15),
    seleXtalMinEnergyEndCap = cms.double(-0.75),
    selePi0BeltDetaEndCap = cms.double(0.05),
    selePtPi0 = cms.double(2.0),
    seleMinvMaxEta = cms.double(0.8),
    ParameterT0_endc = cms.double(3.1),
    massHighPi0Cand = cms.double(0.163),
    clusSeedThr = cms.double(0.5),
    ParameterT0_endcPresh = cms.double(1.2),
    seleEtaBeltDeta = cms.double(0.1),
    SaveToFile = cms.untracked.bool(False),
    ptMinForIsolationEtaEndCap = cms.double(0.5),
    selePtGammaEta = cms.double(1.2),
    clusPhiSize = cms.int32(3),
    selePi0BeltDREndCap = cms.double(0.2),
    selePi0BeltDR = cms.double(0.2),
    isMonEEeta = cms.untracked.bool(True),
    clusEtaSize = cms.int32(3),
    isMonEBpi0 = cms.untracked.bool(True),
    seleEtaBeltDR = cms.double(0.3),
    seleEtaBeltDREndCap = cms.double(0.3),
    AlCaStreamEEetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEE"),
    ptMinForIsolationEndCap = cms.double(0.5),
    selePi0IsoEndCap = cms.double(0.5),
    seleEtaIso = cms.double(0.5),
    selePi0Iso = cms.double(0.5),
    ParameterW0 = cms.double(4.2),
    selePtPi0EndCap = cms.double(3.0),
    massLowPi0Cand = cms.double(0.104),
    seleMinvMaxPi0EndCap = cms.double(0.3),
    selePi0BeltDeta = cms.double(0.05),
    selePtEtaEndCap = cms.double(5),
    seleS4S9GammaEndCap = cms.double(0.9),
    selePtGamma = cms.double(1),
    clusSeedThrEndCap = cms.double(1.0),
    seleS4S9Gamma = cms.double(0.83),
    ptMinForIsolation = cms.double(1),
    ptMinForIsolationEta = cms.double(1.0),
    ParameterLogWeighted = cms.bool(True),
    FolderName = cms.untracked.string('AlCaReco/EcalPi0'),
    seleS9S25GammaEtaEndCap = cms.double(0.85),
    seleS4S9GammaEtaEndCap = cms.double(0.9),
    seleMinvMinPi0EndCap = cms.double(0.05),
    seleMinvMinPi0 = cms.double(0.06),
    seleMinvMaxEtaEndCap = cms.double(0.8),
    FileName = cms.untracked.string('MonitorAlCaEcalPi0.root'),
    AlCaStreamEBetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEB"),
    AlCaStreamEBpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEB"),
    AlCaStreamEEpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEE"),
    seleEtaBeltDetaEndCap = cms.double(0.1),
    isMonEEpi0 = cms.untracked.bool(True),
    seleMinvMinEtaEndCap = cms.double(0.3),
    ParameterT0_barl = cms.double(5.7),
    isMonEBeta = cms.untracked.bool(True)
)


process.ALCARECOHcalCalDiJetsDQM = cms.EDAnalyzer("DQMHcalDiJetsAlCaReco",
    hbheInput = cms.InputTag("DiJProd","DiJetsHBHERecHitCollection"),
    SaveToFile = cms.untracked.bool(False),
    hfInput = cms.InputTag("DiJProd","DiJetsHFRecHitCollection"),
    hoInput = cms.InputTag("DiJProd","DiJetsHORecHitCollection"),
    FolderName = cms.untracked.string('AlCaReco/HcalDiJets'),
    jetsInput = cms.InputTag("DiJProd","DiJetsBackToBackCollection"),
    ecInput = cms.InputTag("DiJProd","DiJetsEcalRecHitCollection"),
    FileName = cms.untracked.string('HcalDiJetsAlCaRecoMon.root')
)


process.ALCARECOHcalCalHODQM = cms.EDAnalyzer("DQMHOAlCaRecoStream",
    nbins = cms.untracked.int32(100),
    saveToFile = cms.untracked.bool(False),
    sigmaval = cms.untracked.double(0.2),
    lowradposinmuch = cms.untracked.double(400.0),
    folderName = cms.untracked.string('AlCaReco/HcalHO'),
    highedge = cms.untracked.double(10.0),
    RootFileName = cms.untracked.string('test.root'),
    highradposinmuch = cms.untracked.double(480),
    lowedge = cms.untracked.double(-2.0)
)


process.ALCARECOHcalCalIsoTrackDQM = cms.EDAnalyzer("DQMHcalIsoTrackAlCaReco",
    outputRootFileName = cms.string('HcalIsoTrackAlCaRecoMon.root'),
    saveToFile = cms.bool(False),
    hltL3FilterLabels = cms.vstring('hltIsolPixelTrackL3FilterHB', 
        'hltIsolPixelTrackL3FilterHE'),
    recoTracksLabel = cms.InputTag("IsoProd","IsoTrackTracksCollection"),
    hltTriggerEventLabel = cms.InputTag("hltTriggerSummaryAOD"),
    alcarecoIsoTracksLabel = cms.InputTag("IsoProd","HcalIsolatedTrackCollection"),
    folderName = cms.string('AlCaReco/HcalIsoTrack'),
    l1FilterLabel = cms.string('hltL1sIsoTrack')
)


process.ALCARECOHcalCalPhisymDQM = cms.EDAnalyzer("DQMHcalPhiSymAlCaReco",
    hoInputNoise = cms.InputTag("horecoNoise"),
    hbheInputNoise = cms.InputTag("hbherecoNoise"),
    SaveToFile = cms.untracked.bool(False),
    hoInputMB = cms.InputTag("horecoMB"),
    hbheInputMB = cms.InputTag("hbherecoMB"),
    rawInputLabel = cms.InputTag("source"),
    FileName = cms.untracked.string('MonitorAlCaHcalPhiSym.root'),
    hfInputMB = cms.InputTag("hfrecoMB"),
    period = cms.uint32(4096),
    hfInputNoise = cms.InputTag("hfrecoNoise"),
    FolderName = cms.untracked.string('AlCaReco/HcalPhiSym')
)


process.ALCARECOMuAlBeamHaloHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlBeamHalo'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('MuAlBeamHalo'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlBeamHalo/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlBeamHaloOverlapsHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlBeamHaloOverlaps'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('MuAlBeamHaloOverlaps'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlBeamHaloOverlaps/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlBeamHaloOverlapsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlBeamHaloOverlaps/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlBeamHaloOverlaps'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(70),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlBeamHaloOverlaps'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(70),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlBeamHaloOverlaps"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlBeamHaloTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlBeamHalo/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlBeamHalo'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlBeamHalo'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(5),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlBeamHalo"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlCalIsolatedMuHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlCalIsolatedMu'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('MuAlCalIsolatedMu'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlCalIsolatedMu/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlCalIsolatedMuMuAlDQM = cms.EDAnalyzer("MuonAlignment",
    OutputMEsInRootFile = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlCalIsolatedMu'),
    meanAngleRange = cms.untracked.double(0.05),
    doCSC = cms.untracked.bool(True),
    RecHits4DCSCCollectionTag = cms.InputTag("cscSegments"),
    resThetaRange = cms.untracked.double(0.1),
    OutputFileName = cms.string('MuonAlignmentMonitor.root'),
    meanPositionRange = cms.untracked.double(0.5),
    resPhiRange = cms.untracked.double(0.1),
    min1DTrackRecHitSize = cms.untracked.uint32(1),
    resLocalXRangeStation2 = cms.untracked.double(0.3),
    MuonCollection = cms.InputTag("ALCARECOMuAlCalIsolatedMu","GlobalMuon"),
    rmsPositionRange = cms.untracked.double(0.01),
    resLocalXRangeStation1 = cms.untracked.double(0.1),
    rmsAngleRange = cms.untracked.double(0.005),
    min4DTrackSegmentSize = cms.untracked.uint32(1),
    nbins = cms.untracked.uint32(500),
    resLocalYRangeStation1 = cms.untracked.double(0.7),
    resLocalYRangeStation3 = cms.untracked.double(3.0),
    resLocalYRangeStation2 = cms.untracked.double(1.0),
    resLocalYRangeStation4 = cms.untracked.double(5.0),
    RecHits4DDTCollectionTag = cms.InputTag("dt4DSegments"),
    resLocalXRangeStation4 = cms.untracked.double(3.0),
    doSummary = cms.untracked.bool(True),
    resLocalXRangeStation3 = cms.untracked.double(1.0),
    doDT = cms.untracked.bool(True)
)


process.ALCARECOMuAlCalIsolatedMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlCalIsolatedMu/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlCalIsolatedMu'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlCalIsolatedMu'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(100),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(5),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlCalIsolatedMu","GlobalMuon"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlGlobalCosmicsHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlGlobalCosmics'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('MuAlGlobalCosmics'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlGlobalCosmics/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlGlobalCosmics'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('MuAlGlobalCosmicsInCollisions'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlGlobalCosmicsInCollisions/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlGlobalCosmicsInCollisions/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlGlobalCosmicsInCollisions'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlGlobalCosmicsInCollisions'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(5),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlGlobalCosmicsInCollisions","GlobalMuon"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlGlobalCosmicsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlGlobalCosmics/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlGlobalCosmics'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlGlobalCosmics'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(5),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlGlobalCosmics","GlobalMuon"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlOverlapsHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlOverlaps'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('MuAlOverlaps'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlOverlaps/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlOverlapsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlOverlaps/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlOverlaps'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(70),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlOverlaps'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(70),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlOverlaps"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOMuAlZMuMuHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('MuAlZMuMu'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('MuAlZMuMu'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/MuAlZMuMu/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOMuAlZMuMuMuAlDQM = cms.EDAnalyzer("MuonAlignment",
    OutputMEsInRootFile = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlCaZMuMu'),
    meanAngleRange = cms.untracked.double(0.05),
    doCSC = cms.untracked.bool(True),
    RecHits4DCSCCollectionTag = cms.InputTag("cscSegments"),
    resThetaRange = cms.untracked.double(0.1),
    OutputFileName = cms.string('MuonAlignmentMonitor.root'),
    meanPositionRange = cms.untracked.double(0.5),
    resPhiRange = cms.untracked.double(0.1),
    min1DTrackRecHitSize = cms.untracked.uint32(1),
    resLocalXRangeStation2 = cms.untracked.double(0.3),
    MuonCollection = cms.InputTag("ALCARECOMuAlZMuMu","StandAlone"),
    rmsPositionRange = cms.untracked.double(0.01),
    resLocalXRangeStation1 = cms.untracked.double(0.1),
    rmsAngleRange = cms.untracked.double(0.005),
    min4DTrackSegmentSize = cms.untracked.uint32(1),
    nbins = cms.untracked.uint32(500),
    resLocalYRangeStation1 = cms.untracked.double(0.7),
    resLocalYRangeStation3 = cms.untracked.double(3.0),
    resLocalYRangeStation2 = cms.untracked.double(1.0),
    resLocalYRangeStation4 = cms.untracked.double(5.0),
    RecHits4DDTCollectionTag = cms.InputTag("dt4DSegments"),
    resLocalXRangeStation4 = cms.untracked.double(3.0),
    doSummary = cms.untracked.bool(True),
    resLocalXRangeStation3 = cms.untracked.double(1.0),
    doDT = cms.untracked.bool(True)
)


process.ALCARECOMuAlZMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/MuAlZMuMu/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOMuAlZMuMu'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/MuAlZMuMu'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(100),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(5),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(0),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOMuAlZMuMu","StandAlone"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOSiStripCalMinBiasTrackerDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/SiStripCalMinBias'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(0.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(100.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    SumChargeBin = cms.uint32(101),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(False),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOSiStripCalMinBias'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOSiStripCalMinBias"),
    TrackPtBin = cms.uint32(110),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    MassBin = cms.uint32(100),
    ReferenceTrackProducer = cms.InputTag("hiSelectedTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOSiStripCalMinBiasTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/SiStripCalMinBias/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOSiStripCalMinBias'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(70.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('ImpactPoint'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(True),
    FolderName = cms.string('AlCaReco/SiStripCalMinBias'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(71),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0.1),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOSiStripCalMinBias"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.ALCARECOTkAlBeamHaloTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlBeamHalo/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlBeamHalo'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlBeamHalo'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(150),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlBeamHalo"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlCosmicsCTF0THLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlCosmics0T'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlCosmicsCTF0T'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlCosmicsCTF0T/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsCTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(True),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF0T'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF0T"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    SumChargeBin = cms.uint32(101),
    ReferenceTrackProducer = cms.InputTag("ctfWithMaterialTracksP5"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlCosmicsCTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlCosmicsCTF0T/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF0T'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(500),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(500),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF0T"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlCosmicsCTFHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlCosmics'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlCosmicsCTF'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlCosmicsCTF/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsCTFTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    TrackEfficiencyMin = cms.double(-0.01),
    FolderName = cms.string('AlCaReco/TkAlCosmics'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    SumChargeBin = cms.uint32(101),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(True),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF'),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    JetPtBin = cms.uint32(100),
    maxJetPt = cms.double(10),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF"),
    MinTrackDeltaRMin = cms.double(0),
    TrackPtBin = cms.uint32(150),
    HitMapsRBin = cms.uint32(120),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    ReferenceTrackProducer = cms.InputTag("ctfWithMaterialTracksP5"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlCosmicsCTFTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlCosmicsCTF/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(500),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    ThetaMax = cms.double(3.2),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlCosmics'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(500),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    VZBin = cms.int32(100),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    EtaBin = cms.int32(80)
)


process.ALCARECOTkAlCosmicsCosmicTF0THLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlCosmics0T'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlCosmicsCosmicTF0T'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlCosmicsCosmicTF0T/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    TrackEfficiencyMin = cms.double(-0.01),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    SumChargeBin = cms.uint32(101),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(True),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF0T'),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    JetPtBin = cms.uint32(100),
    maxJetPt = cms.double(10),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T"),
    MinTrackDeltaRMin = cms.double(0),
    TrackPtBin = cms.uint32(150),
    HitMapsRBin = cms.uint32(120),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlCosmicsCosmicTF0T/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF0T'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(500),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    ThetaMax = cms.double(3.2),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(500),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    VZBin = cms.int32(100),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    EtaBin = cms.int32(80)
)


process.ALCARECOTkAlCosmicsCosmicTFHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlCosmics'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlCosmicsCosmicTF'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlCosmicsCosmicTF/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsCosmicTFTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(True),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    SumChargeBin = cms.uint32(101),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    MassBin = cms.uint32(300),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlCosmicsCosmicTFTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlCosmicsCosmicTF/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(500),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    VZBin = cms.int32(100),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlCosmics'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(500),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlCosmicsInCollisionsHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlCosmics'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlCosmicsInCollisions'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlCosmicsInCollisions/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlCosmicsInCollisionsTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlCosmicsInCollisions'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlCosmicsInCollisions'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsInCollisions"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    SumChargeBin = cms.uint32(101),
    ReferenceTrackProducer = cms.InputTag("regionalCosmicTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlCosmicsInCollisionsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlCosmicsInCollisions/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlCosmicsInCollisions'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(500),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlCosmicsInCollisions'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(500),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsInCollisions"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlJpsiMuMuHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlJpsiMuMu'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('TkAlJpsiMuMu'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlJpsiMuMu/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlJpsiMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    TrackEfficiencyMin = cms.double(-0.01),
    MassBin = cms.uint32(300),
    FolderName = cms.string('AlCaReco/TkAlJpsiMuMu'),
    fillInvariantMass = cms.bool(True),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(2.5),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(4.0),
    AlgoName = cms.string('ALCARECOTkAlJpsiMuMu'),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(50),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(5.5),
    SumChargeBin = cms.uint32(11),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    JetPtBin = cms.uint32(100),
    maxJetPt = cms.double(10),
    TrackProducer = cms.InputTag("ALCARECOTkAlJpsiMuMu"),
    MinTrackDeltaRMin = cms.double(0),
    TrackPtBin = cms.uint32(150),
    HitMapsRBin = cms.uint32(120),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlJpsiMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlJpsiMuMu/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlJpsiMuMu'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlJpsiMuMu'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(50),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlJpsiMuMu"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlLASDigiDQM = cms.EDAnalyzer("LaserAlignmentT0ProducerDQM",
    OutputInPlainROOT = cms.bool(False),
    PlainOutputFileName = cms.string('TkAlLAS.dqm.root'),
    FolderName = cms.string('AlCaReco/TkAlLAS'),
    UpperAdcThreshold = cms.uint32(220),
    DigiProducerList = cms.VPSet(cms.PSet(
        DigiLabel = cms.string('ZeroSuppressed'),
        DigiType = cms.string('Processed'),
        DigiProducer = cms.string('laserAlignmentT0Producer')
    )),
    LowerAdcThreshold = cms.uint32(15)
)


process.ALCARECOTkAlMinBiasHIHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlMinBiasHI'),
    HLTPaths = cms.vstring(),
    histLabel = cms.untracked.string('TkAlMinBiasHI'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlMinBiasHI/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMinBiasHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlMinBiasHI'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlMinBiasHI'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBiasHI"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    SumChargeBin = cms.uint32(101),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlMinBiasHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlMinBiasHI/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlMinBiasHI'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(70.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    ThetaMax = cms.double(3.2),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlMinBiasHI'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(71),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    VZBin = cms.int32(100),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBiasHI"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    EtaBin = cms.int32(80)
)


process.ALCARECOTkAlMinBiasHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlMinBias'),
    HLTPaths = cms.vstring(),
    histLabel = cms.untracked.string('TkAlMinBias'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlMinBias/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMinBiasNOTHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlMinBiasNOT'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlMinBias'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlMinBias/HLTSummaryNOT'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMinBiasTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    TrackEfficiencyMin = cms.double(-0.01),
    MassBin = cms.uint32(300),
    FolderName = cms.string('AlCaReco/TkAlMinBias'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    AlgoName = cms.string('ALCARECOTkAlMinBias'),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    SumChargeBin = cms.uint32(101),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    JetPtBin = cms.uint32(100),
    maxJetPt = cms.double(10),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBias"),
    MinTrackDeltaRMin = cms.double(0),
    TrackPtBin = cms.uint32(150),
    HitMapsRBin = cms.uint32(120),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlMinBiasTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlMinBias/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlMinBias'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(70.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlMinBias'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(30),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(71),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBias"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlMuonIsolatedHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlMuonIsolated'),
    HLTPaths = cms.vstring('HLT_.*L1.*'),
    histLabel = cms.untracked.string('TkAlMuonIsolated'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlMuonIsolated/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlMuonIsolatedTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlMuonIsolated'),
    fillInvariantMass = cms.bool(False),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(30),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(50.5),
    MassBin = cms.uint32(300),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlMuonIsolated'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlMuonIsolated"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    SumChargeBin = cms.uint32(101),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlMuonIsolatedTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlMuonIsolated/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlMuonIsolated'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(15.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlMuonIsolated'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(150),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(16),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlMuonIsolated"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.ALCARECOTkAlUpsilonMuMuHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlUpsilonMuMu'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('TkAlUpsilonMuMu'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlUpsilonMuMu/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlUpsilonMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    TrackEfficiencyMin = cms.double(-0.01),
    MassBin = cms.uint32(300),
    FolderName = cms.string('AlCaReco/TkAlUpsilonMuMu'),
    fillInvariantMass = cms.bool(True),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(8.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(10),
    AlgoName = cms.string('ALCARECOTkAlUpsilonMuMu'),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(50),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(5.5),
    SumChargeBin = cms.uint32(11),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    JetPtBin = cms.uint32(100),
    maxJetPt = cms.double(10),
    TrackProducer = cms.InputTag("ALCARECOTkAlUpsilonMuMu"),
    MinTrackDeltaRMin = cms.double(0),
    TrackPtBin = cms.uint32(150),
    HitMapsRBin = cms.uint32(120),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlUpsilonMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlUpsilonMuMu/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlUpsilonMuMu'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    ThetaMax = cms.double(3.2),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlUpsilonMuMu'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(50),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    VZBin = cms.int32(100),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlUpsilonMuMu"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    EtaBin = cms.int32(80)
)


process.ALCARECOTkAlZMuMuHLTDQM = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string('TkAlZMuMu'),
    HLTPaths = cms.vstring('HLT_.*Mu.*'),
    histLabel = cms.untracked.string('TkAlZMuMu'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('AlCaReco/TkAlZMuMu/HLTSummary'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECOTkAlZMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    OutputMEsInRootFile = cms.bool(False),
    MeasurementState = cms.string('default'),
    HitMapsRBin = cms.uint32(120),
    FolderName = cms.string('AlCaReco/TkAlZMuMu'),
    fillInvariantMass = cms.bool(True),
    TrackCurvatureMin = cms.double(-0.01),
    MinJetDeltaRMax = cms.double(10),
    MassMin = cms.double(50.0),
    fillRawIdMap = cms.bool(True),
    useSignedR = cms.bool(False),
    MinJetDeltaRMin = cms.double(0),
    TrackEfficiencyBin = cms.uint32(102),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    TrackCurvatureBin = cms.uint32(2000),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureMax = cms.double(0.01),
    MassMax = cms.double(150.0),
    JetPtBin = cms.uint32(100),
    TrackEfficiencyMax = cms.double(1.01),
    TrackPtMax = cms.double(150.0),
    HitMapRMax = cms.double(120.0),
    JetPtMin = cms.double(0.0),
    SumChargeMax = cms.double(5.5),
    SumChargeBin = cms.uint32(11),
    JetPtMax = cms.double(50.0),
    MinTrackDeltaRMax = cms.double(3.2),
    runsOnReco = cms.bool(True),
    MinJetDeltaRBin = cms.uint32(100),
    AlgoName = cms.string('ALCARECOTkAlZMuMu'),
    maxJetPt = cms.double(10),
    MinTrackDeltaRMin = cms.double(0),
    TrackProducer = cms.InputTag("ALCARECOTkAlZMuMu"),
    TrackPtBin = cms.uint32(150),
    TrackEfficiencyMin = cms.double(-0.01),
    HitMapZMax = cms.double(300.0),
    daughterMass = cms.double(0.10565836),
    HitMapsZBin = cms.uint32(300),
    CaloJetCollection = cms.InputTag("kt6CaloJets"),
    MinTrackDeltaRBin = cms.uint32(100),
    MassBin = cms.uint32(300),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    TrackPtMin = cms.double(0.0)
)


process.ALCARECOTkAlZMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('AlCaReco/TkAlZMuMu/BeamSpot'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('ALCARECOTkAlZMuMu'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(5.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(150),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('AlCaReco/TkAlZMuMu'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(150),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(6),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("ALCARECOTkAlZMuMu"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.AlcaBeamMonitor = cms.EDAnalyzer("AlcaBeamMonitor",
    ScalerLabel = cms.untracked.InputTag("scalersRawToDigi"),
    BeamSpotLabel = cms.untracked.InputTag("offlineBeamSpot"),
    PrimaryVertexLabel = cms.untracked.InputTag("hiSelectedVertex"),
    TrackLabel = cms.untracked.InputTag("hiSelectedTracks"),
    BeamFitter = cms.PSet(
        MaximumNormChi2 = cms.untracked.double(10.0),
        MaximumEta = cms.untracked.double(2.4),
        MaximumZ = cms.untracked.double(60),
        SaveNtuple = cms.untracked.bool(False),
        IsMuonCollection = cms.untracked.bool(False),
        WriteAscii = cms.untracked.bool(False),
        FractionOfFittedTrks = cms.untracked.double(0.9),
        deltaSignificanceCut = cms.untracked.double(10),
        WriteDIPAscii = cms.untracked.bool(False),
        OutputFileName = cms.untracked.string('BeamFit.root'),
        AsciiFileName = cms.untracked.string('BeamFit.txt'),
        SaveFitResults = cms.untracked.bool(False),
        TrackCollection = cms.untracked.InputTag("hiSelectedTracks"),
        MinimumPixelLayers = cms.untracked.int32(0),
        InputBeamWidth = cms.untracked.double(0.006),
        Debug = cms.untracked.bool(False),
        MinimumPt = cms.untracked.double(1.0),
        TrackAlgorithm = cms.untracked.vstring(),
        MinimumInputTracks = cms.untracked.int32(150),
        AppendRunToFileName = cms.untracked.bool(True),
        SavePVVertices = cms.untracked.bool(False),
        DIPFileName = cms.untracked.string('BeamFitDIP.txt'),
        MinimumTotalLayers = cms.untracked.int32(6),
        TrackQuality = cms.untracked.vstring('highPurity'),
        MaximumImpactParameter = cms.untracked.double(1.0)
    ),
    PVFitter = cms.PSet(
        minVertexNdf = cms.untracked.double(10.0),
        nSigmaCut = cms.untracked.double(5.0),
        errorScale = cms.untracked.double(0.9),
        Apply3DFit = cms.untracked.bool(True),
        VertexCollection = cms.untracked.InputTag("hiSelectedVertex"),
        FitPerBunchCrossing = cms.untracked.bool(False),
        minVertexNTracks = cms.untracked.uint32(0),
        minVertexMeanWeight = cms.untracked.double(0.5),
        maxVertexR = cms.untracked.double(2),
        maxNrStoredVertices = cms.untracked.uint32(10000),
        Debug = cms.untracked.bool(False),
        minNrVerticesForFit = cms.untracked.uint32(50),
        maxVertexNormChi2 = cms.untracked.double(10.0),
        maxVertexZ = cms.untracked.double(10)
    ),
    MonitorName = cms.untracked.string('AlcaBeamMonitor')
)


process.ClientTrackEfficiencySTACosmicMuons = cms.EDAnalyzer("TrackEfficiencyClient",
    effPhiMin = cms.double(-3.2),
    effEtaMin = cms.double(-3.2),
    trackEfficiency = cms.bool(True),
    effEtaMax = cms.double(3.2),
    FolderName = cms.string('Muons/cosmicMuons'),
    effXMin = cms.double(-100),
    effZBin = cms.int32(50),
    effXMax = cms.double(100),
    effYMin = cms.double(-100),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effYMax = cms.double(100),
    effPhiBin = cms.int32(50),
    effCompatibleLayersBin = cms.int32(10),
    effYBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    effD0Bin = cms.int32(50),
    effZMax = cms.double(500),
    effD0Min = cms.double(-100),
    effZMin = cms.double(-500),
    AlgoName = cms.string('STA'),
    effEtaBin = cms.int32(50),
    effXBin = cms.int32(50),
    effD0Max = cms.double(100)
)


process.ClientTrackEfficiencyTkTracks = cms.EDAnalyzer("TrackEfficiencyClient",
    effPhiMin = cms.double(-3.2),
    effEtaMin = cms.double(-3.2),
    trackEfficiency = cms.bool(False),
    effEtaMax = cms.double(3.2),
    FolderName = cms.string('Muons/TKTrack'),
    effXMin = cms.double(-100),
    effZBin = cms.int32(50),
    effXMax = cms.double(100),
    effYMin = cms.double(-100),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effYMax = cms.double(100),
    effPhiBin = cms.int32(50),
    effCompatibleLayersBin = cms.int32(10),
    effYBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    effD0Bin = cms.int32(50),
    effZMax = cms.double(500),
    effD0Min = cms.double(-100),
    effZMin = cms.double(-500),
    AlgoName = cms.string('CTF'),
    effEtaBin = cms.int32(50),
    effXBin = cms.int32(50),
    effD0Max = cms.double(100)
)


process.DQMMessageLogger = cms.EDAnalyzer("DQMMessageLogger",
    Directory = cms.string('MessageLogger'),
    Categories = cms.vstring()
)


process.MonitorTrackGLBMuons = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('Muons/globalCosmicMuons/BeamSpotParameters'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('glb'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(99.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('ImpactPoint'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('Muons/globalMuons'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(False),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(100),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(100),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0.1),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("globalMuons"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5)
)


process.MonitorTrackResiduals = cms.EDAnalyzer("MonitorTrackResiduals",
    OutputMEsInRootFile = cms.bool(False),
    Mod_On = cms.bool(False),
    TH1NormResModules = cms.PSet(
        xmin = cms.double(-5.0),
        Nbinx = cms.int32(100),
        xmax = cms.double(5.0)
    ),
    trajectoryInput = cms.string('generalTracks'),
    OutputFileName = cms.string('test_monitortracks.root'),
    TH1ResModules = cms.PSet(
        xmin = cms.double(-0.05),
        Nbinx = cms.int32(100),
        xmax = cms.double(0.05)
    ),
    Tracks = cms.InputTag("TrackRefitter"),
    ResetAfterRun = cms.bool(True),
    andOr = cms.bool(False),
    l1DBKey = cms.string('SiStripDQM_L1'),
    l1Algorithms = cms.vstring('NOT L1Tech_BSC_halo_beam2_inner.v0', 
        'NOT L1Tech_BSC_halo_beam2_outer.v0', 
        'NOT L1Tech_BSC_halo_beam1_inner.v0', 
        'NOT L1Tech_BSC_halo_beam1_outer.v0', 
        'NOT (L1Tech_BSC_splash_beam1.v0 AND NOT L1Tech_BSC_splash_beam2.v0)', 
        'NOT (L1Tech_BSC_splash_beam2.v0 AND NOT L1Tech_BSC_splash_beam1.v0)'),
    andOrL1 = cms.bool(False),
    errorReplyL1 = cms.bool(True)
)


process.MonitorTrackResiduals_hi = cms.EDAnalyzer("MonitorTrackResiduals",
    OutputMEsInRootFile = cms.bool(False),
    Mod_On = cms.bool(False),
    TH1NormResModules = cms.PSet(
        xmin = cms.double(-5.0),
        Nbinx = cms.int32(100),
        xmax = cms.double(5.0)
    ),
    andOr = cms.bool(False),
    l1DBKey = cms.string('SiStripDQM_L1'),
    trajectoryInput = cms.string('hiGlobalPrimTracks'),
    andOrL1 = cms.bool(False),
    OutputFileName = cms.string('test_monitortracks.root'),
    ResetAfterRun = cms.bool(True),
    Tracks = cms.InputTag("hiGlobalPrimTracks"),
    l1Algorithms = cms.vstring('NOT L1Tech_BSC_halo_beam2_inner.v0', 
        'NOT L1Tech_BSC_halo_beam2_outer.v0', 
        'NOT L1Tech_BSC_halo_beam1_inner.v0', 
        'NOT L1Tech_BSC_halo_beam1_outer.v0', 
        'NOT (L1Tech_BSC_splash_beam1.v0 AND NOT L1Tech_BSC_splash_beam2.v0)', 
        'NOT (L1Tech_BSC_splash_beam2.v0 AND NOT L1Tech_BSC_splash_beam1.v0)'),
    TH1ResModules = cms.PSet(
        xmin = cms.double(-0.05),
        Nbinx = cms.int32(100),
        xmax = cms.double(0.05)
    ),
    errorReplyL1 = cms.bool(True)
)


process.MonitorTrackSTAMuons = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(20),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-30.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(250),
    TrackPMax = cms.double(1000),
    TrackPzBin = cms.int32(1000),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(200),
    Z0Max = cms.double(30.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(0.0),
    RecLayBin = cms.int32(120),
    VZMax = cms.double(100.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-500.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-100.0),
    pErrMax = cms.double(10.0),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('sta'),
    TrackPyMin = cms.double(-500.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(10.5),
    Chi2NDFMax = cms.double(19.5),
    TrackPtBin = cms.int32(1000),
    TrackPyMax = cms.double(500.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(False),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(10.0),
    RecHitBin = cms.int32(120),
    Y0Min = cms.double(-3.0),
    TCProducer = cms.InputTag("ckfTrackCandidatesP5"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('default'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-500.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('monitortrackparameters_stamuons.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(120.0),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-20.0),
    TrackPxMax = cms.double(500.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(500.0),
    VYMax = cms.double(20.0),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(60),
    RecHitMin = cms.double(0.0),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(120.0),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(10.0),
    SeedProducer = cms.InputTag("combinedP5SeedsForCTF"),
    RecLayMin = cms.double(0.0),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.5),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(10.0),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    VZBin = cms.int32(50),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(False),
    FolderName = cms.string('Muons/standAloneMuonsUpdatedAtVtx'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(False),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(1000),
    doAllPlots = cms.bool(False),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(19.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-3.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(3.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(1000),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(20),
    TECLayMax = cms.double(14.5),
    TrackQMax = cms.double(2.5),
    X0Max = cms.double(3.0),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(1000),
    TkSizeBin = cms.int32(11),
    Chi2NDFBin = cms.int32(200),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-3.0),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0),
    phiErrMax = cms.double(1.0),
    Y0Max = cms.double(3.0),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(500.0),
    TrackPBin = cms.int32(1000),
    pyErrMax = cms.double(10.0),
    EtaBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(False),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(20.0),
    VXMin = cms.double(-20.0),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(20),
    RecLostMax = cms.double(20),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(0.0),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(120)
)


process.MuIsoDQM_glb = cms.EDAnalyzer("MuonIsolationDQM",
    requireTRKMuon = cms.untracked.bool(False),
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    requireGLBMuon = cms.untracked.bool(True),
    requireSTAMuon = cms.untracked.bool(False),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    directory = cms.string('Muons/Isolation/global'),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk")
)


process.MuIsoDQM_sta = cms.EDAnalyzer("MuonIsolationDQM",
    requireTRKMuon = cms.untracked.bool(False),
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    requireGLBMuon = cms.untracked.bool(False),
    requireSTAMuon = cms.untracked.bool(True),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    directory = cms.string('Muons/Isolation/standalone'),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk")
)


process.MuIsoDQM_trk = cms.EDAnalyzer("MuonIsolationDQM",
    requireTRKMuon = cms.untracked.bool(True),
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    requireGLBMuon = cms.untracked.bool(False),
    requireSTAMuon = cms.untracked.bool(False),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    directory = cms.string('Muons/Isolation/tracker'),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk")
)


process.SiPixelClusterSource = cms.EDAnalyzer("SiPixelClusterSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_Cluster.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    twoDimOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelClusters"),
    isPIB = cms.untracked.bool(False),
    smileyOn = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    phiOn = cms.untracked.bool(False),
    bigEventSize = cms.untracked.int32(180),
    diskOn = cms.untracked.bool(True)
)


process.SiPixelDigiSource = cms.EDAnalyzer("SiPixelDigiSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_Digi.root'),
    hiRes = cms.untracked.bool(False),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    twoDimOnlyLayDisk = cms.untracked.bool(False),
    layOn = cms.untracked.bool(True),
    phiOn = cms.untracked.bool(False),
    twoDimModOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis"),
    isPIB = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    twoDimOn = cms.untracked.bool(False),
    bigEventSize = cms.untracked.int32(2600),
    diskOn = cms.untracked.bool(True)
)


process.SiPixelHLTSource = cms.EDAnalyzer("SiPixelHLTSource",
    saveFile = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_HLT.root'),
    slowDown = cms.untracked.bool(False),
    ErrorInput = cms.InputTag("siPixelDigis"),
    RawInput = cms.InputTag("source"),
    DirName = cms.untracked.string('Pixel/FEDIntegrity/')
)


process.SiPixelHitEfficiencySource = cms.EDAnalyzer("SiPixelHitEfficiencySource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_HitEfficiency.root'),
    nSigma_EdgeCut = cms.untracked.double(2.0),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    updateEfficiencies = cms.untracked.bool(False),
    layOn = cms.untracked.bool(False),
    phiOn = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    applyEdgeCut = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelHitEfficiency"),
    trajectoryInput = cms.InputTag("generalTracks"),
    diskOn = cms.untracked.bool(False)
)


process.SiPixelHitEfficiencySource_HeavyIons = cms.EDAnalyzer("SiPixelHitEfficiencySource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_HitEfficiency.root'),
    nSigma_EdgeCut = cms.untracked.double(2.0),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    updateEfficiencies = cms.untracked.bool(False),
    layOn = cms.untracked.bool(False),
    phiOn = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    applyEdgeCut = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelHitEfficiency"),
    trajectoryInput = cms.InputTag("hiGlobalPrimTracks"),
    diskOn = cms.untracked.bool(False)
)


process.SiPixelRawDataErrorSource = cms.EDAnalyzer("SiPixelRawDataErrorSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_Error.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    isPIB = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis")
)


process.SiPixelRecHitSource = cms.EDAnalyzer("SiPixelRecHitSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_RecHits.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    twoDimOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelRecHits"),
    isPIB = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    phiOn = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(True)
)


process.SiPixelTrackResidualSource = cms.EDAnalyzer("SiPixelTrackResidualSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    trajectoryInput = cms.InputTag("generalTracks"),
    layOn = cms.untracked.bool(True),
    phiOn = cms.untracked.bool(False),
    TrackCandidateProducer = cms.string('newTrackCandidateMaker'),
    TrackCandidateLabel = cms.string(''),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    ringOn = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    clustersrc = cms.InputTag("siPixelClusters"),
    diskOn = cms.untracked.bool(True)
)


process.SiPixelTrackResidualSource_Cosmics = cms.EDAnalyzer("SiPixelTrackResidualSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    trajectoryInput = cms.InputTag("rsWithMaterialTracksP5"),
    layOn = cms.untracked.bool(True),
    phiOn = cms.untracked.bool(False),
    TrackCandidateProducer = cms.string('rsTrackCandidatesP5'),
    TrackCandidateLabel = cms.string(''),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    ringOn = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    clustersrc = cms.InputTag("siPixelClusters"),
    diskOn = cms.untracked.bool(True)
)


process.SiPixelTrackResidualSource_HeavyIons = cms.EDAnalyzer("SiPixelTrackResidualSource",
    ladOn = cms.untracked.bool(True),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    bladeOn = cms.untracked.bool(True),
    saveFile = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    trajectoryInput = cms.InputTag("hiGlobalPrimTracks"),
    layOn = cms.untracked.bool(True),
    phiOn = cms.untracked.bool(False),
    TrackCandidateProducer = cms.string('hiPrimTrackCandidates'),
    TrackCandidateLabel = cms.string(''),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    ringOn = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    modOn = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    clustersrc = cms.InputTag("siPixelClusters"),
    diskOn = cms.untracked.bool(True)
)


process.SiStripCalZeroBiasMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    TProf2ApvCycleVsDBx = cms.PSet(
        zmax = cms.double(0.0),
        ymax = cms.double(800.5),
        zmin = cms.double(0.0),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        subdetswitchon = cms.bool(False),
        ymin = cms.double(0.5)
    ),
    CreateTrendMEs = cms.bool(False),
    Mod_On = cms.bool(True),
    TH2ClustersApvCycle = cms.PSet(
        yfactor = cms.double(0.0002),
        subdetswitchon = cms.bool(True),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    TH1ClusterDigiPos = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(768),
        xmax = cms.double(767.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ClusterNoise = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(20),
        xmax = cms.double(9.5),
        layerswitchon = cms.bool(False)
    ),
    Trending = cms.PSet(
        xmin = cms.double(0.0),
        Nbins = cms.int32(600),
        ymin = cms.double(0.0),
        ymax = cms.double(100000.0),
        xmax = cms.double(3600.0)
    ),
    TkHistoMap_On = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    TProfNumberOfCluster = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(20),
        xmax = cms.double(99.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ClusterPos = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(768),
        xmax = cms.double(767.5),
        layerswitchon = cms.bool(False)
    ),
    OutputFileName = cms.string('SiStripMonitorCluster.root'),
    SelectAllDetectors = cms.bool(True),
    ShowMechanicalStructureView = cms.bool(True),
    TH1ModuleLocalOccupancy = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(20),
        xmax = cms.double(0.95),
        layerswitchon = cms.bool(False)
    ),
    TH1nClusters = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(11),
        xmax = cms.double(10.5),
        layerswitchon = cms.bool(False)
    ),
    TProfClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        Nbins = cms.int32(600),
        subdetswitchon = cms.bool(False),
        ymax = cms.double(0.0),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    ClusterLabel = cms.string(''),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        ymax = cms.double(800.5),
        globalswitchon = cms.bool(False),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.5)
    ),
    StripQualityLabel = cms.string('unbiased'),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        subdetswitchon = cms.bool(False),
        ymax = cms.double(0.0),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    ClusterProducer = cms.InputTag("calZeroBiasClusters"),
    TH1TotalNumberOfClusters = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(50),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(299.5)
    ),
    UseDCSFiltering = cms.bool(True),
    TH1ClusterStoN = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(299.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ClusterCharge = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(200),
        xmax = cms.double(799.5),
        layerswitchon = cms.bool(False)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(False),
        ymax = cms.double(0.0),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymin = cms.double(0.0)
    ),
    TopFolderName = cms.string('AlCaReco/SiStrip'),
    TH1ClusterStoNVsPos = cms.PSet(
        ymax = cms.double(299.5),
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        layerswitchon = cms.bool(False),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(20),
        xmax = cms.double(19.5),
        layerswitchon = cms.bool(False)
    ),
    OutputMEsInRootFile = cms.bool(False),
    ResetMEsEachRun = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowReadoutView = cms.bool(False),
    ClusterConditions = cms.PSet(
        minWidth = cms.double(0.0),
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        minStoN = cms.double(0.0),
        maxWidth = cms.double(10000.0)
    )
)


process.SiStripMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    TProf2ApvCycleVsDBx = cms.PSet(
        zmax = cms.double(0.0),
        ymax = cms.double(800.5),
        zmin = cms.double(0.0),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        subdetswitchon = cms.bool(False),
        ymin = cms.double(0.5)
    ),
    CreateTrendMEs = cms.bool(False),
    Mod_On = cms.bool(False),
    TH2ClustersApvCycle = cms.PSet(
        yfactor = cms.double(0.2),
        subdetswitchon = cms.bool(False),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    TH1ClusterDigiPos = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(768),
        xmax = cms.double(767.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ClusterNoise = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(20),
        xmax = cms.double(9.5),
        layerswitchon = cms.bool(False)
    ),
    Trending = cms.PSet(
        xmin = cms.double(0.0),
        Nbins = cms.int32(360),
        ymin = cms.double(0.0),
        ymax = cms.double(100000.0),
        xmax = cms.double(3600.0)
    ),
    TkHistoMap_On = cms.bool(True),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    TProfNumberOfCluster = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(20),
        xmax = cms.double(99.5),
        layerswitchon = cms.bool(True)
    ),
    TH1ClusterPos = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(768),
        xmax = cms.double(767.5),
        layerswitchon = cms.bool(False)
    ),
    OutputFileName = cms.string('SiStripMonitorCluster.root'),
    SelectAllDetectors = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    TH1ModuleLocalOccupancy = cms.PSet(
        xmin = cms.double(-0.01),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(51),
        xmax = cms.double(1.01),
        layerswitchon = cms.bool(True)
    ),
    TH1nClusters = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(11),
        xmax = cms.double(10.5),
        layerswitchon = cms.bool(False)
    ),
    TProfClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        Nbins = cms.int32(600),
        subdetswitchon = cms.bool(True),
        ymax = cms.double(0.0),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    ClusterLabel = cms.string(''),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        ymax = cms.double(800.5),
        globalswitchon = cms.bool(True),
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.5)
    ),
    StripQualityLabel = cms.string(''),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        subdetswitchon = cms.bool(True),
        ymax = cms.double(0.0),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    ClusterProducer = cms.InputTag("siStripClusters"),
    TH1TotalNumberOfClusters = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(50),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(299.5)
    ),
    UseDCSFiltering = cms.bool(True),
    TH1ClusterStoN = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(100),
        xmax = cms.double(299.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ClusterCharge = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(200),
        xmax = cms.double(799.5),
        layerswitchon = cms.bool(False)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(True),
        ymax = cms.double(0.0),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymin = cms.double(0.0)
    ),
    TopFolderName = cms.string('SiStrip'),
    TH1ClusterStoNVsPos = cms.PSet(
        ymax = cms.double(299.5),
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        layerswitchon = cms.bool(False),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(20),
        xmax = cms.double(19.5),
        layerswitchon = cms.bool(False)
    ),
    OutputMEsInRootFile = cms.bool(False),
    ResetMEsEachRun = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowReadoutView = cms.bool(False),
    ClusterConditions = cms.PSet(
        minWidth = cms.double(0.0),
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        minStoN = cms.double(0.0),
        maxWidth = cms.double(10000.0)
    )
)


process.SiStripMonitorDigi = cms.EDAnalyzer("SiStripMonitorDigi",
    OutputMEsInRootFile = cms.bool(False),
    CreateTrendMEs = cms.bool(False),
    Mod_On = cms.bool(False),
    Trending = cms.PSet(
        xmin = cms.double(0.0),
        Nbins = cms.int32(600),
        ymin = cms.double(0.0),
        ymax = cms.double(10000.0),
        xmax = cms.double(3600.0)
    ),
    TProfNumberOfDigi = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    ResetMEsEachRun = cms.bool(False),
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    OutputFileName = cms.string('test_digi.root'),
    SelectAllDetectors = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    TH1NumberOfDigisPerStrip = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(768),
        xmax = cms.double(767.5)
    ),
    TH2DigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        yfactor = cms.double(0.2),
        subdetswitchon = cms.bool(False),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    TProfDigiADC = cms.PSet(
        xmin = cms.double(0.0),
        moduleswitchon = cms.bool(False),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5),
        layerswitchon = cms.bool(False)
    ),
    TH1ADCsCoolestStrip = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(60),
        xmax = cms.double(299.5),
        layerswitchon = cms.bool(False)
    ),
    UseDCSFiltering = cms.bool(True),
    TProfTotalNumberOfDigis = cms.PSet(
        Nbins = cms.int32(360),
        subdetswitchon = cms.bool(False),
        ymax = cms.double(0.0),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TH1DigiADCs = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(64),
        xmax = cms.double(255.5),
        layerswitchon = cms.bool(True)
    ),
    TH1StripOccupancy = cms.PSet(
        xmin = cms.double(-0.01),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(51),
        xmax = cms.double(1.01),
        layerswitchon = cms.bool(True)
    ),
    TProfDigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        subdetswitchon = cms.bool(True),
        ymax = cms.double(0.0),
        Nbinsy = cms.int32(200),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymin = cms.double(0.0)
    ),
    TH1ADCsHottestStrip = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(60),
        xmax = cms.double(299.5),
        layerswitchon = cms.bool(False)
    ),
    CalculateStripOccupancy = cms.bool(False),
    ShowControlView = cms.bool(False),
    TH1NumberOfDigis = cms.PSet(
        xmin = cms.double(-0.5),
        moduleswitchon = cms.bool(True),
        Nbinx = cms.int32(50),
        xmax = cms.double(999.5),
        layerswitchon = cms.bool(True)
    ),
    ShowReadoutView = cms.bool(False),
    TkHistoMap_On = cms.bool(True)
)


process.SiStripMonitorTrack = cms.EDAnalyzer("SiStripMonitorTrack",
    OutputMEsInRootFile = cms.bool(False),
    Mod_On = cms.bool(False),
    Trending = cms.PSet(
        UpdateMode = cms.int32(1),
        Nbins = cms.int32(10),
        Steps = cms.int32(5)
    ),
    TH1ClusterNoise = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(20),
        xmax = cms.double(9.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        xmin = cms.double(-0.1),
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    TkHistoMap_On = cms.bool(True),
    TrackLabel = cms.string(''),
    TH1nClustersOff = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(999.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(200),
        xmax = cms.double(199.5)
    ),
    TProfileClusterPGV = cms.PSet(
        ymax = cms.double(1.2),
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymin = cms.double(-0.1)
    ),
    RawDigis_On = cms.bool(False),
    TH1ClusterWidthCC = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5)
    ),
    OutputFileName = cms.string('test_monitortrackparameters_rs.root'),
    RawDigiLabel = cms.string('VirginRaw'),
    TH1ClusterStoNCorrMod = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5)
    ),
    TH1nClustersOn = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5)
    ),
    HistoFlag_On = cms.bool(False),
    TH1ClusterStoN = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(299.5)
    ),
    OffHisto_On = cms.bool(True),
    TH1ClusterEstimatorCC = cms.PSet(
        xmin = cms.double(-0.1),
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1)
    ),
    UseDCSFiltering = cms.bool(True),
    TH1ClusterChargeCorr = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(399.5)
    ),
    TH1ClusterCharge = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(999.5)
    ),
    AlgoName = cms.string('GenTk'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    TrackProducer = cms.string('generalTracks'),
    TrajectoryInEvent = cms.bool(True),
    ModulesToBeExcluded = cms.vuint32(),
    TH1ClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(20),
        xmax = cms.double(19.5)
    ),
    RingFlag_On = cms.bool(False),
    Trend_On = cms.bool(False),
    ClusterConditions = cms.PSet(
        minWidth = cms.double(0.0),
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        minStoN = cms.double(0.0),
        maxWidth = cms.double(200.0)
    ),
    andOr = cms.bool(False),
    l1DBKey = cms.string('SiStripDQM_L1'),
    l1Algorithms = cms.vstring('NOT L1Tech_BSC_halo_beam2_inner.v0', 
        'NOT L1Tech_BSC_halo_beam2_outer.v0', 
        'NOT L1Tech_BSC_halo_beam1_inner.v0', 
        'NOT L1Tech_BSC_halo_beam1_outer.v0', 
        'NOT (L1Tech_BSC_splash_beam1.v0 AND NOT L1Tech_BSC_splash_beam2.v0)', 
        'NOT (L1Tech_BSC_splash_beam2.v0 AND NOT L1Tech_BSC_splash_beam1.v0)'),
    andOrL1 = cms.bool(False),
    errorReplyL1 = cms.bool(True)
)


process.SiStripMonitorTrack_hi = cms.EDAnalyzer("SiStripMonitorTrack",
    OutputMEsInRootFile = cms.bool(False),
    Mod_On = cms.bool(False),
    Trending = cms.PSet(
        UpdateMode = cms.int32(1),
        Nbins = cms.int32(10),
        Steps = cms.int32(5)
    ),
    TH1ClusterNoise = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(20),
        xmax = cms.double(9.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        xmin = cms.double(-0.1),
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    l1Algorithms = cms.vstring('NOT L1Tech_BSC_halo_beam2_inner.v0', 
        'NOT L1Tech_BSC_halo_beam2_outer.v0', 
        'NOT L1Tech_BSC_halo_beam1_inner.v0', 
        'NOT L1Tech_BSC_halo_beam1_outer.v0', 
        'NOT (L1Tech_BSC_splash_beam1.v0 AND NOT L1Tech_BSC_splash_beam2.v0)', 
        'NOT (L1Tech_BSC_splash_beam2.v0 AND NOT L1Tech_BSC_splash_beam1.v0)'),
    TkHistoMap_On = cms.bool(True),
    TH1nClustersOff = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(999.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(200),
        xmax = cms.double(199.5)
    ),
    TProfileClusterPGV = cms.PSet(
        ymax = cms.double(1.2),
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymin = cms.double(-0.1)
    ),
    RawDigis_On = cms.bool(False),
    TH1ClusterWidthCC = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5)
    ),
    OutputFileName = cms.string('test_monitortrackparameters_rs.root'),
    RawDigiLabel = cms.string('VirginRaw'),
    TH1ClusterStoNCorrMod = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5)
    ),
    RingFlag_On = cms.bool(False),
    Trend_On = cms.bool(False),
    TH1nClustersOn = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(499.5)
    ),
    HistoFlag_On = cms.bool(False),
    TH1ClusterStoN = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(299.5)
    ),
    OffHisto_On = cms.bool(True),
    TH1ClusterEstimatorCC = cms.PSet(
        xmin = cms.double(-0.1),
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1)
    ),
    UseDCSFiltering = cms.bool(True),
    TH1ClusterChargeCorr = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(399.5)
    ),
    TH1ClusterCharge = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(100),
        xmax = cms.double(999.5)
    ),
    AlgoName = cms.string('GenTk'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    andOr = cms.bool(False),
    TrackProducer = cms.string('hiGlobalPrimTracks'),
    l1DBKey = cms.string('SiStripDQM_L1'),
    ModulesToBeExcluded = cms.vuint32(),
    TH1ClusterWidth = cms.PSet(
        xmin = cms.double(-0.5),
        Nbinx = cms.int32(20),
        xmax = cms.double(19.5)
    ),
    TrackLabel = cms.string(''),
    andOrL1 = cms.bool(False),
    TrajectoryInEvent = cms.bool(True),
    errorReplyL1 = cms.bool(True),
    ClusterConditions = cms.PSet(
        minWidth = cms.double(0.0),
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        minStoN = cms.double(0.0),
        maxWidth = cms.double(200.0)
    )
)


process.TrackEffClient = cms.EDAnalyzer("TrackEfficiencyClient",
    effPhiMin = cms.double(-3.2),
    effEtaMin = cms.double(-3.2),
    trackEfficiency = cms.bool(True),
    effEtaMax = cms.double(3.2),
    FolderName = cms.string('Track/Efficiencies'),
    effXMin = cms.double(-100),
    effZBin = cms.int32(50),
    effXMax = cms.double(100),
    effYMin = cms.double(-100),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effYMax = cms.double(100),
    effPhiBin = cms.int32(50),
    effCompatibleLayersBin = cms.int32(10),
    effYBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    AlgoName = cms.string('CTF'),
    effZMax = cms.double(500),
    effD0Min = cms.double(-100),
    effZMin = cms.double(-500),
    effD0Bin = cms.int32(50),
    effEtaBin = cms.int32(50),
    effXBin = cms.int32(50),
    effD0Max = cms.double(100)
)


process.TrackMon_hi = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    TECHitMin = cms.double(-0.5),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    X0Bin = cms.int32(100),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TrackPzBin = cms.int32(100),
    TrackQMax = cms.double(2.5),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    Chi2Min = cms.double(-0.5),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('Tracking/TrackParameters/BeamSpotParameters'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('HeavyIonTk'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(299.5),
    Chi2NDFMax = cms.double(49.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    RecHitBin = cms.int32(40),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("hiPrimTrackCandidates"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('ImpactPoint'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    TCSizeMin = cms.double(-0.5),
    SeedDxyMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    OutputFileName = cms.string('MonitorTrack.root'),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    TOBLayMax = cms.double(9.5),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    SeedProducer = cms.InputTag("hiPixelTrackSeeds"),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    NClus2DTotMax = cms.double(14999.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    MeanHitBin = cms.int32(30),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    DxyMin = cms.double(-0.5),
    MeanHitMin = cms.double(-0.5),
    doSeedParameterHistos = cms.bool(True),
    FolderName = cms.string('Tracking/TrackParameters'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    NClusPxBin = cms.int32(50),
    PXBHitBin = cms.int32(10),
    TIDLayMax = cms.double(5.5),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(100),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    VXBin = cms.int32(100),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    TkSizeBin = cms.int32(300),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    X0Min = cms.double(-0.5),
    PXFLayBin = cms.int32(6),
    NClusPxMin = cms.double(-0.5),
    TrackPtMin = cms.double(0.1),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    TCDxyMin = cms.double(-100.0),
    NTrk2DBin = cms.int32(20),
    Chi2Max = cms.double(199.5),
    TrackPBin = cms.int32(100),
    pyErrMax = cms.double(0.5),
    EtaBin = cms.int32(80),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(True),
    TrackQBin = cms.int32(8),
    NClus2DStrBin = cms.int32(50),
    TCDzMax = cms.double(400.0),
    pyErrMin = cms.double(0.0),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    TCHitMin = cms.double(-0.5),
    PhiMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    PhiMin = cms.double(-3.2),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    VXMax = cms.double(0.5),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("hiGlobalPrimTracks"),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    NTrk2DMin = cms.double(-0.5),
    RecLostBin = cms.int32(10)
)


process.TrackerCollisionTrackMon = cms.EDAnalyzer("TrackingMonitor",
    SeedHitMin = cms.double(-0.5),
    TOBHitMax = cms.double(14.5),
    TkSeedSizeBin = cms.int32(150),
    NClus2DStrBin = cms.int32(50),
    Chi2ProbBin = cms.int32(100),
    Z0Min = cms.double(-60.0),
    TECLayBin = cms.int32(15),
    TOBLayMax = cms.double(9.5),
    Chi2Bin = cms.int32(100),
    TrackPMax = cms.double(100),
    TCSizeBin = cms.int32(150),
    SeedDzBin = cms.int32(120),
    Z0Max = cms.double(60.0),
    pyErrMax = cms.double(0.5),
    pErrBin = cms.int32(100),
    TrackPMin = cms.double(0),
    RecLayBin = cms.int32(25),
    VZMax = cms.double(30.0),
    SeedHitMax = cms.double(5.5),
    PXFHitBin = cms.int32(10),
    pyErrMin = cms.double(0.0),
    TIBLayMin = cms.double(-0.5),
    ptErrMin = cms.double(0.0),
    TrackPxMin = cms.double(-20.0),
    PXBHitMin = cms.double(-0.5),
    BSFolderName = cms.string('Tracking/TrackParameters/BeamSpotParameters'),
    PXFLayMax = cms.double(5.5),
    pErrMin = cms.double(0.0),
    PXBLayBin = cms.int32(6),
    TIDLayBin = cms.int32(6),
    VZMin = cms.double(-30.0),
    pErrMax = cms.double(0.1),
    PXFLayMin = cms.double(-0.5),
    AlgoName = cms.string('GenTk'),
    TrackPyMin = cms.double(-20.0),
    PXBHitMax = cms.double(9.5),
    Chi2NDFMin = cms.double(-0.5),
    TkSizeMax = cms.double(299.5),
    Chi2NDFMax = cms.double(49.5),
    TrackPtBin = cms.int32(100),
    TrackPyMax = cms.double(20.0),
    phiErrMin = cms.double(0.0),
    doTrackerSpecific = cms.bool(True),
    TECLayMin = cms.double(-0.5),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TIBLayMax = cms.double(5.5),
    ptErrMax = cms.double(0.1),
    PhiMax = cms.double(3.2),
    Y0Min = cms.double(-0.5),
    TCProducer = cms.InputTag("newTrackCandidateMaker"),
    Chi2ProbMin = cms.double(0.0),
    TIDHitMax = cms.double(14.5),
    MeasurementState = cms.string('ImpactPoint'),
    TIBHitMin = cms.double(-0.5),
    SeedDxyMin = cms.double(-0.5),
    PhiMin = cms.double(-3.2),
    SeedDxyMax = cms.double(0.5),
    VXMax = cms.double(0.5),
    TIBHitMax = cms.double(14.5),
    Chi2ProbMax = cms.double(1.0),
    TrackPzMin = cms.double(-30.0),
    TOBLayMin = cms.double(-0.5),
    NClus2DPxBin = cms.int32(20),
    TCHitMax = cms.double(39.5),
    NClus2DStrMax = cms.double(14999.5),
    RecHitMax = cms.double(39.5),
    NClus2DStrMin = cms.double(-0.5),
    VYMin = cms.double(-0.5),
    TrackPxMax = cms.double(20.0),
    TkSeedSizeMin = cms.double(-0.5),
    TrackPzMax = cms.double(30.0),
    VYMax = cms.double(0.5),
    PXFHitMin = cms.double(-0.5),
    SeedHitBin = cms.int32(6),
    Z0Bin = cms.int32(120),
    RecHitMin = cms.double(-0.5),
    TCDxyBin = cms.int32(200),
    X0Bin = cms.int32(100),
    pzErrMin = cms.double(0.0),
    TIBHitBin = cms.int32(15),
    phiErrBin = cms.int32(100),
    TECHitBin = cms.int32(25),
    etaErrBin = cms.int32(100),
    RecLayMax = cms.double(24.5),
    NTrk2DMax = cms.double(199.5),
    TCDzBin = cms.int32(200),
    pzErrMax = cms.double(0.5),
    RecLayMin = cms.double(-0.5),
    MeanLayMin = cms.double(-0.5),
    etaErrMax = cms.double(0.1),
    X0Min = cms.double(-0.5),
    PXFHitMax = cms.double(9.5),
    etaErrMin = cms.double(0.0),
    pxErrMax = cms.double(0.5),
    PXBLayMax = cms.double(5.5),
    ptErrBin = cms.int32(100),
    TIBLayBin = cms.int32(6),
    DxyBin = cms.int32(100),
    NClusPxMin = cms.double(-0.5),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    ThetaBin = cms.int32(100),
    MeanLayMax = cms.double(19.5),
    TOBHitMin = cms.double(-0.5),
    PXBLayMin = cms.double(-0.5),
    pxErrMin = cms.double(0.0),
    PhiBin = cms.int32(36),
    OutputMEsInRootFile = cms.bool(False),
    TIDLayMax = cms.double(5.5),
    DxyMin = cms.double(-0.5),
    NTrk2DBin = cms.int32(20),
    NClusPxBin = cms.int32(50),
    doSeedParameterHistos = cms.bool(True),
    FolderName = cms.string('Tracking/TrackParameters'),
    TIDLayMin = cms.double(-0.5),
    MeanLayBin = cms.int32(20),
    doBeamSpotPlots = cms.bool(True),
    SeedDzMin = cms.double(-30.0),
    pyErrBin = cms.int32(100),
    TrackPxBin = cms.int32(100),
    doAllPlots = cms.bool(True),
    SeedDzMax = cms.double(30.0),
    DxyMax = cms.double(0.5),
    MeanHitMin = cms.double(-0.5),
    PXBHitBin = cms.int32(10),
    OutputFileName = cms.string('MonitorTrack.root'),
    TkSeedSizeMax = cms.double(149.5),
    NClus2DPxMax = cms.double(1999.5),
    EtaMin = cms.double(-4.0),
    TOBHitBin = cms.int32(15),
    EtaMax = cms.double(4.0),
    NClus2DPxMin = cms.double(-0.5),
    NClus2DTotBin = cms.int32(50),
    MeanHitMax = cms.double(29.5),
    TrackPtMax = cms.double(100),
    NClusStrBin = cms.int32(150),
    NClusPxMax = cms.double(1999.5),
    NClus2DTotMin = cms.double(-0.5),
    TCDxyMin = cms.double(-100.0),
    TECLayMax = cms.double(14.5),
    VZBin = cms.int32(100),
    X0Max = cms.double(0.5),
    SeedDxyBin = cms.int32(100),
    TkSizeBin = cms.int32(300),
    Chi2Max = cms.double(199.5),
    Chi2NDFBin = cms.int32(100),
    TrackQMin = cms.double(-2.5),
    TIDHitMin = cms.double(-0.5),
    RecLostBin = cms.int32(10),
    NClus2DTotMax = cms.double(14999.5),
    PXFLayBin = cms.int32(6),
    MeanHitBin = cms.int32(30),
    TrackPtMin = cms.double(0.1),
    phiErrMax = cms.double(0.1),
    Y0Max = cms.double(0.5),
    VXBin = cms.int32(100),
    RecHitBin = cms.int32(40),
    SeedProducer = cms.InputTag("newSeedFromTriplets"),
    TrackPBin = cms.int32(100),
    TrackPzBin = cms.int32(100),
    TCDxyMax = cms.double(100.0),
    doLumiAnalysis = cms.bool(True),
    TrackQBin = cms.int32(8),
    TECHitMin = cms.double(-0.5),
    TCDzMax = cms.double(400.0),
    EtaBin = cms.int32(80),
    TkSizeMin = cms.double(-0.5),
    TIDHitBin = cms.int32(15),
    Y0Bin = cms.int32(100),
    Chi2Min = cms.double(-0.5),
    ThetaMin = cms.double(0.0),
    TCSizeMin = cms.double(-0.5),
    TECHitMax = cms.double(24.5),
    pxErrBin = cms.int32(100),
    TrackPyBin = cms.int32(100),
    VXMin = cms.double(-0.5),
    ThetaMax = cms.double(3.2),
    TCSizeMax = cms.double(149.5),
    TCDzMin = cms.double(-400.0),
    TOBLayBin = cms.int32(10),
    VYBin = cms.int32(100),
    RecLostMax = cms.double(9.5),
    TCHitBin = cms.int32(40),
    NClusStrMin = cms.double(-0.5),
    TrackProducer = cms.InputTag("generalTracks"),
    NTrk2DMin = cms.double(-0.5),
    NClusStrMax = cms.double(14999.5),
    RecLostMin = cms.double(-0.5),
    pzErrBin = cms.int32(100),
    Quality = cms.string(''),
    TCHitMin = cms.double(-0.5),
    TrackQMax = cms.double(2.5),
    andOr = cms.bool(False),
    dcsInputTag = cms.InputTag("scalersRawToDigi"),
    dcsPartitions = cms.vint32(24, 25, 26, 27, 28, 
        29),
    andOrDcs = cms.bool(False),
    errorReplyDcs = cms.bool(True),
    l1DBKey = cms.string('SiStripDQM_L1'),
    l1Algorithms = cms.vstring('NOT L1Tech_BSC_halo_beam2_inner.v0', 
        'NOT L1Tech_BSC_halo_beam2_outer.v0', 
        'NOT L1Tech_BSC_halo_beam1_inner.v0', 
        'NOT L1Tech_BSC_halo_beam1_outer.v0', 
        'NOT (L1Tech_BSC_splash_beam1.v0 AND NOT L1Tech_BSC_splash_beam2.v0)', 
        'NOT (L1Tech_BSC_splash_beam2.v0 AND NOT L1Tech_BSC_splash_beam1.v0)'),
    andOrL1 = cms.bool(False),
    errorReplyL1 = cms.bool(True)
)


process.cscMonitor = cms.EDAnalyzer("CSCOfflineMonitor",
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    outputFileName = cms.string('test.root'),
    cscRecHitTag = cms.InputTag("csc2DRecHits"),
    saveHistos = cms.bool(False),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    cscSegTag = cms.InputTag("cscSegments")
)


process.dqmCSCClient = cms.EDAnalyzer("CSCMonitorModule",
    BOOKING_XML_FILE = cms.FileInPath('DQM/CSCMonitorModule/data/emuDQMBooking.xml'),
    EventProcessor = cms.untracked.PSet(
        EFF_ERR_SIGFAIL = cms.untracked.double(5.0),
        FRAEFF_AUTO_UPDATE = cms.untracked.bool(False),
        EFF_NODATA_THRESHOLD = cms.untracked.double(0.99),
        FRAEFF_AUTO_UPDATE_START = cms.untracked.uint32(5),
        BINCHECK_MASK = cms.untracked.uint32(384563190),
        BINCHECKER_CRC_CLCT = cms.untracked.bool(True),
        EFF_COLD_SIGFAIL = cms.untracked.double(2.0),
        PROCESS_DDU = cms.untracked.bool(True),
        EFF_NODATA_SIGFAIL = cms.untracked.double(5.0),
        BINCHECKER_MODE_DDU = cms.untracked.bool(False),
        BINCHECKER_CRC_ALCT = cms.untracked.bool(True),
        EFF_HOT_THRESHOLD = cms.untracked.double(2.0),
        FOLDER_DDU = cms.untracked.string('CSC/DDU/'),
        BINCHECKER_CRC_CFEB = cms.untracked.bool(True),
        EVENTS_ECHO = cms.untracked.uint32(1000),
        DDU_CHECK_MASK = cms.untracked.uint32(4294959103),
        FRAEFF_SEPARATE_THREAD = cms.untracked.bool(False),
        PROCESS_EFF_PARAMETERS = cms.untracked.bool(False),
        EFF_HOT_SIGFAIL = cms.untracked.double(5.0),
        FOLDER_PAR = cms.untracked.string('CSC/EventInfo/reportSummaryContents/'),
        FRAEFF_AUTO_UPDATE_FREQ = cms.untracked.uint32(200),
        EFF_COLD_THRESHOLD = cms.untracked.double(0.1),
        FOLDER_EMU = cms.untracked.string('CSC/Summary/'),
        DDU_BINCHECK_MASK = cms.untracked.uint32(384563190),
        PROCESS_CSC = cms.untracked.bool(True),
        PROCESS_EFF_HISTOS = cms.untracked.bool(False),
        MO_FILTER = cms.untracked.vstring('+/^.*$/', 
            '-/DDU_[0-9]+/', 
            '-/CSC_[0-9]+_[0-9]+/'),
        FOLDER_CSC = cms.untracked.string('CSC/CSC/'),
        EFF_ERR_THRESHOLD = cms.untracked.double(0.1),
        BINCHECKER_OUTPUT = cms.untracked.bool(False)
    ),
    PREBOOK_EFF_PARAMS = cms.untracked.bool(False),
    InputObjects = cms.untracked.InputTag("source")
)


process.dqmDcsInfo = cms.EDAnalyzer("DQMDcsInfo",
    subSystemFolder = cms.untracked.string('Info'),
    dcsInfoFolder = cms.untracked.string('DcsInfo')
)


process.dqmInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Pixel')
)


process.dqmInfoDT = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('DT')
)


process.dqmInfoEB = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalBarrel')
)


process.dqmInfoEE = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalEndcap')
)


process.dqmInfoHcal = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Hcal')
)


process.dqmInfoMuons = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Muons')
)


process.dqmInfoSiStrip = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('SiStrip')
)


process.dtAlcaResolutionMonitor = cms.EDAnalyzer("DTResolutionAnalysisTask",
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('AlCaReco/DtCalibSynch/01-Calibration'),
    ResetCycle = cms.untracked.int32(10000)
)


process.dtEfficiencyMonitor = cms.EDAnalyzer("DTChamberEfficiency",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    cscSegments = cms.InputTag("dummy"),
    theMinNrec = cms.double(20.0),
    RPCLayers = cms.bool(False),
    NavigationType = cms.string('Standard'),
    theMaxChi2 = cms.double(100.0),
    TrackCollection = cms.InputTag("standAloneMuons"),
    theRPCRecHits = cms.InputTag("dummy"),
    debug = cms.untracked.bool(True),
    dt4DSegments = cms.InputTag("dt4DSegments"),
    theNSigma = cms.double(3.0)
)


process.dtResolutionAnalysisMonitor = cms.EDAnalyzer("DTResolutionAnalysisTask",
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('DT/02-Segments'),
    ResetCycle = cms.untracked.int32(10000)
)


process.dtSegmentAnalysisMonitor = cms.EDAnalyzer("DTSegmentAnalysisTask",
    checkNoisyChannels = cms.untracked.bool(True),
    slideTimeBins = cms.untracked.bool(False),
    hltDQMMode = cms.untracked.bool(False),
    nLSTimeBin = cms.untracked.int32(5),
    recHits4DLabel = cms.string('dt4DSegments'),
    nTimeBins = cms.untracked.int32(100),
    debug = cms.untracked.bool(False),
    topHistoFolder = cms.untracked.string('DT/02-Segments'),
    detailedAnalysis = cms.untracked.bool(True)
)


process.dtSegmentsMonitor = cms.EDAnalyzer("DTSegmentsTask",
    OutputMEsInRootFile = cms.bool(False),
    checkNoisyChannels = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    recHits4DLabel = cms.string('dt4DSegments'),
    OutputFileName = cms.string('SegmentsMonitoring.root')
)


process.dtTriggerEfficiencyMonitor = cms.EDAnalyzer("DTTriggerEfficiencyTask",
    processDCC = cms.untracked.bool(True),
    processDDU = cms.untracked.bool(True),
    inputTagSEG = cms.untracked.InputTag("dt4DSegments"),
    inputTagDDU = cms.untracked.InputTag("muonDTDigis"),
    minBXDDU = cms.untracked.int32(7),
    maxBXDDU = cms.untracked.int32(15),
    inputTagDCC = cms.untracked.InputTag("dttfDigis"),
    inputTagGMT = cms.untracked.InputTag("gtDigis"),
    detailedAnalysis = cms.untracked.bool(False)
)


process.dtTriggerSynchMonitor = cms.EDAnalyzer("DTLocalTriggerSynchTask",
    DCCInputTag = cms.InputTag("dttfDigis"),
    angleRange = cms.double(30.0),
    tTrigMode = cms.string('DTTTrigSyncFromDB'),
    baseDir = cms.string('AlCaReco/DtCalibSynch/02-Synchronization'),
    SEGInputTag = cms.InputTag("dt4DSegmentsNoWire"),
    staticBooking = cms.untracked.bool(True),
    rangeWithinBX = cms.bool(False),
    nBXLow = cms.int32(-2),
    nBXHigh = cms.int32(3),
    DDUInputTag = cms.InputTag("muonDTDigis"),
    bxTimeInterval = cms.double(25),
    tTrigModeConfig = cms.PSet(
        vPropWire = cms.double(24.4),
        doTOFCorrection = cms.bool(False),
        tofCorrType = cms.int32(0),
        wirePropCorrType = cms.int32(0),
        tTrigLabel = cms.string(''),
        doWirePropCorrection = cms.bool(False),
        doT0Correction = cms.bool(False),
        debug = cms.untracked.bool(False)
    ),
    minHitsPhi = cms.int32(7)
)


process.ecalBarrelBeamCaloTask = cms.EDAnalyzer("EBBeamCaloTask",
    mergeRuns = cms.untracked.bool(False),
    EBDigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EcalTBEventHeader = cms.InputTag("ecalEBunpacker"),
    enableCleanup = cms.untracked.bool(False),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    prefixME = cms.untracked.string('EcalBarrel')
)


process.ecalBarrelBeamHodoTask = cms.EDAnalyzer("EBBeamHodoTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    mergeRuns = cms.untracked.bool(False),
    EcalTBEventHeader = cms.InputTag("ecalEBunpacker"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalTBHodoscopeRawInfo = cms.InputTag("ecalEBunpacker"),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    enableCleanup = cms.untracked.bool(False),
    EcalTBTDCRawInfo = cms.InputTag("ecalEBunpacker"),
    EcalTBHodoscopeRecInfo = cms.InputTag("ecal2006TBHodoscopeReconstructor","EcalTBHodoscopeRecInfo"),
    EcalTBTDCRecInfo = cms.InputTag("ecal2006TBTDCReconstructor","EcalTBTDCRecInfo")
)


process.ecalBarrelClusterTask = cms.EDAnalyzer("EBClusterTask",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    BasicClusterCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    prefixME = cms.untracked.string('EcalBarrel'),
    SuperClusterCollection = cms.InputTag("correctedHybridSuperClusters")
)


process.ecalBarrelClusterTaskExtras = cms.EDAnalyzer("EBClusterTaskExtras",
    l1GlobalMuonReadoutRecord = cms.InputTag("gtDigis"),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    l1GlobalReadoutRecord = cms.InputTag("gtDigis"),
    BasicClusterCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    enableCleanup = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    SuperClusterCollection = cms.InputTag("correctedHybridSuperClusters")
)


process.ecalBarrelCosmicTask = cms.EDAnalyzer("EBCosmicTask",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    prefixME = cms.untracked.string('EcalBarrel')
)


process.ecalBarrelDaqInfoTask = cms.EDAnalyzer("EBDaqInfoTask",
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalBarrelDataCertificationTask = cms.EDAnalyzer("EBDataCertificationTask",
    cloneME = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalBarrelDcsInfoTask = cms.EDAnalyzer("EBDcsInfoTask",
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalBarrelHltTask = cms.EDAnalyzer("EBHltTask",
    mergeRuns = cms.untracked.bool(False),
    FEDRawDataCollection = cms.InputTag("source"),
    EBDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EBDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBDetIdCollection0 = cms.InputTag("ecalDigis","EcalIntegrityDCCSizeErrors"),
    enableCleanup = cms.untracked.bool(False),
    folderName = cms.untracked.string('FEDIntegrity'),
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalElectronicsIdCollection5 = cms.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    EcalElectronicsIdCollection4 = cms.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    EcalElectronicsIdCollection6 = cms.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors")
)


process.ecalBarrelIntegrityTask = cms.EDAnalyzer("EBIntegrityTask",
    mergeRuns = cms.untracked.bool(False),
    EBDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EBDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBDetIdCollection0 = cms.InputTag("ecalDigis","EcalIntegrityDCCSizeErrors"),
    enableCleanup = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalElectronicsIdCollection5 = cms.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    EcalElectronicsIdCollection4 = cms.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    EcalElectronicsIdCollection6 = cms.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors")
)


process.ecalBarrelLaserTask = cms.EDAnalyzer("EBLaserTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    mergeRuns = cms.untracked.bool(False),
    laserWavelengths = cms.untracked.vint32(1, 2, 3, 4),
    EBDigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    enableCleanup = cms.untracked.bool(False),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalBarrelMonitorModule = cms.EDAnalyzer("EcalBarrelMonitorModule",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False),
    EBDigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    runNumber = cms.untracked.int32(0),
    enableEventDisplay = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    runType = cms.untracked.int32(-1),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    debug = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel')
)


process.ecalBarrelOccupancyTask = cms.EDAnalyzer("EBOccupancyTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    EBDigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalDigis")
)


process.ecalBarrelPedestalOnlineTask = cms.EDAnalyzer("EBPedestalOnlineTask",
    EBDigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalBarrelPedestalTask = cms.EDAnalyzer("EBPedestalTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    mergeRuns = cms.untracked.bool(False),
    MGPAGains = cms.untracked.vint32(1, 6, 12),
    EBDigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    MGPAGainsPN = cms.untracked.vint32(1, 16),
    enableCleanup = cms.untracked.bool(False),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalBarrelRawDataTask = cms.EDAnalyzer("EBRawDataTask",
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    FEDRawDataCollection = cms.InputTag("source")
)


process.ecalBarrelSelectiveReadoutTask = cms.EDAnalyzer("EBSelectiveReadoutTask",
    mergeRuns = cms.untracked.bool(False),
    FEDRawDataCollection = cms.InputTag("source"),
    EBDigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    dccWeights = cms.vdouble(-1.1865, 0.0195, 0.29, 0.3477, 0.3008, 
        0.2266),
    enableCleanup = cms.untracked.bool(False),
    EBUsuppressedDigiCollection = cms.InputTag("ecalUnsuppressedDigis"),
    prefixME = cms.untracked.string('EcalBarrel'),
    ecalDccZs1stSample = cms.int32(3),
    EBSRFlagCollection = cms.InputTag("ecalDigis"),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalBarrelStatusFlagsTask = cms.EDAnalyzer("EBStatusFlagsTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis")
)


process.ecalBarrelTestPulseTask = cms.EDAnalyzer("EBTestPulseTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    mergeRuns = cms.untracked.bool(False),
    MGPAGains = cms.untracked.vint32(1, 6, 12),
    EBDigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    MGPAGainsPN = cms.untracked.vint32(1, 16),
    enableCleanup = cms.untracked.bool(False),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalBarrelTimingTask = cms.EDAnalyzer("EBTimingTask",
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis")
)


process.ecalBarrelTriggerTowerTask = cms.EDAnalyzer("EBTriggerTowerTask",
    mergeRuns = cms.untracked.bool(False),
    EcalTrigPrimDigiCollectionReal = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    HLTCaloHLTBit = cms.untracked.string('HLT_EgammaSuperClusterOnly_L1R'),
    EBDigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    OutputRootFile = cms.untracked.string(''),
    enableCleanup = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalBarrel'),
    EcalTrigPrimDigiCollectionEmul = cms.InputTag("valEcalTriggerPrimitiveDigis"),
    HLTMuonHLTBit = cms.untracked.string('HLT_L1MuOpen'),
    HLTResultsCollection = cms.InputTag("TriggerResults")
)


process.ecalEndcapBeamCaloTask = cms.EDAnalyzer("EEBeamCaloTask",
    mergeRuns = cms.untracked.bool(False),
    EBDigiCollection = cms.InputTag("ecalEBunpacker","ebDigis"),
    EcalTBEventHeader = cms.InputTag("ecalEBunpacker"),
    enableCleanup = cms.untracked.bool(False),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    prefixME = cms.untracked.string('EcalEndcap')
)


process.ecalEndcapBeamHodoTask = cms.EDAnalyzer("EEBeamHodoTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    mergeRuns = cms.untracked.bool(False),
    EcalTBEventHeader = cms.InputTag("ecalEBunpacker"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalTBHodoscopeRawInfo = cms.InputTag("ecalEBunpacker"),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEB"),
    enableCleanup = cms.untracked.bool(False),
    EcalTBTDCRawInfo = cms.InputTag("ecalEBunpacker"),
    EcalTBHodoscopeRecInfo = cms.InputTag("ecal2006TBHodoscopeReconstructor","EcalTBHodoscopeRecInfo"),
    EcalTBTDCRecInfo = cms.InputTag("ecal2006TBTDCReconstructor","EcalTBTDCRecInfo")
)


process.ecalEndcapClusterTask = cms.EDAnalyzer("EEClusterTask",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    BasicClusterCollection = cms.InputTag("multi5x5BasicClusters","multi5x5EndcapBasicClusters"),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    prefixME = cms.untracked.string('EcalEndcap'),
    SuperClusterCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters")
)


process.ecalEndcapClusterTaskExtras = cms.EDAnalyzer("EEClusterTaskExtras",
    l1GlobalMuonReadoutRecord = cms.InputTag("gtDigis"),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    l1GlobalReadoutRecord = cms.InputTag("gtDigis"),
    BasicClusterCollection = cms.InputTag("multi5x5BasicClusters","multi5x5EndcapBasicClusters"),
    enableCleanup = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    SuperClusterCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters")
)


process.ecalEndcapCosmicTask = cms.EDAnalyzer("EECosmicTask",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEE"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    prefixME = cms.untracked.string('EcalEndcap')
)


process.ecalEndcapDaqInfoTask = cms.EDAnalyzer("EEDaqInfoTask",
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalEndcapDataCertificationTask = cms.EDAnalyzer("EEDataCertificationTask",
    cloneME = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalEndcapDcsInfoTask = cms.EDAnalyzer("EEDcsInfoTask",
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalEndcapHltTask = cms.EDAnalyzer("EEHltTask",
    mergeRuns = cms.untracked.bool(False),
    FEDRawDataCollection = cms.InputTag("source"),
    enableCleanup = cms.untracked.bool(False),
    folderName = cms.untracked.string('FEDIntegrity'),
    EEDetIdCollection0 = cms.InputTag("ecalDigis","EcalIntegrityDCCSizeErrors"),
    EEDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalElectronicsIdCollection5 = cms.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    EcalElectronicsIdCollection4 = cms.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    EcalElectronicsIdCollection6 = cms.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors")
)


process.ecalEndcapIntegrityTask = cms.EDAnalyzer("EEIntegrityTask",
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EEDetIdCollection0 = cms.InputTag("ecalDigis","EcalIntegrityDCCSizeErrors"),
    EEDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalElectronicsIdCollection5 = cms.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    EcalElectronicsIdCollection4 = cms.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    EcalElectronicsIdCollection6 = cms.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors")
)


process.ecalEndcapLaserTask = cms.EDAnalyzer("EELaserTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EEDigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    laserWavelengths = cms.untracked.vint32(1, 2, 3, 4),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalEndcapLedTask = cms.EDAnalyzer("EELedTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EEDigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    enableCleanup = cms.untracked.bool(False),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker"),
    ledWavelengths = cms.untracked.vint32(1, 2)
)


process.ecalEndcapMonitorModule = cms.EDAnalyzer("EcalEndcapMonitorModule",
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False),
    runNumber = cms.untracked.int32(0),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    enableEventDisplay = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    runType = cms.untracked.int32(-1),
    EEDigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    debug = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap')
)


process.ecalEndcapOccupancyTask = cms.EDAnalyzer("EEOccupancyTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    EEDigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    mergeRuns = cms.untracked.bool(False),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalDigis")
)


process.ecalEndcapPedestalOnlineTask = cms.EDAnalyzer("EEPedestalOnlineTask",
    mergeRuns = cms.untracked.bool(False),
    EEDigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    prefixME = cms.untracked.string('EcalEndcap'),
    enableCleanup = cms.untracked.bool(False)
)


process.ecalEndcapPedestalTask = cms.EDAnalyzer("EEPedestalTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EEDigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    MGPAGains = cms.untracked.vint32(1, 6, 12),
    enableCleanup = cms.untracked.bool(False),
    MGPAGainsPN = cms.untracked.vint32(1, 16),
    mergeRuns = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalEndcapRawDataTask = cms.EDAnalyzer("EERawDataTask",
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalRawDataCollection = cms.InputTag("ecalDigis"),
    FEDRawDataCollection = cms.InputTag("source")
)


process.ecalEndcapSelectiveReadoutTask = cms.EDAnalyzer("EESelectiveReadoutTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EEDigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    FEDRawDataCollection = cms.InputTag("source"),
    dccWeights = cms.vdouble(-1.1865, 0.0195, 0.29, 0.3477, 0.3008, 
        0.2266),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    EESRFlagCollection = cms.InputTag("ecalDigis"),
    ecalDccZs1stSample = cms.int32(3),
    EcalTrigPrimDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EEUsuppressedDigiCollection = cms.InputTag("ecalUnsuppressedDigis")
)


process.ecalEndcapStatusFlagsTask = cms.EDAnalyzer("EEStatusFlagsTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis")
)


process.ecalEndcapTestPulseTask = cms.EDAnalyzer("EETestPulseTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EEDigiCollection = cms.InputTag("ecalEBunpacker","eeDigis"),
    MGPAGains = cms.untracked.vint32(1, 6, 12),
    EcalUncalibratedRecHitCollection = cms.InputTag("ecalUncalibHit","EcalUncalibRecHitsEE"),
    EcalRawDataCollection = cms.InputTag("ecalEBunpacker"),
    MGPAGainsPN = cms.untracked.vint32(1, 16),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalPnDiodeDigiCollection = cms.InputTag("ecalEBunpacker")
)


process.ecalEndcapTimingTask = cms.EDAnalyzer("EETimingTask",
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    mergeRuns = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    EcalRawDataCollection = cms.InputTag("ecalDigis")
)


process.ecalEndcapTriggerTowerTask = cms.EDAnalyzer("EETriggerTowerTask",
    EEDigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EcalTrigPrimDigiCollectionReal = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    HLTCaloHLTBit = cms.untracked.string('HLT_EgammaSuperClusterOnly_L1R'),
    OutputRootFile = cms.untracked.string(''),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    prefixME = cms.untracked.string('EcalEndcap'),
    EcalTrigPrimDigiCollectionEmul = cms.InputTag("valEcalTriggerPrimitiveDigis"),
    HLTMuonHLTBit = cms.untracked.string('HLT_L1MuOpen'),
    HLTResultsCollection = cms.InputTag("TriggerResults")
)


process.ecalPreshowerFEDIntegrityTask = cms.EDAnalyzer("ESFEDIntegrityTask",
    OutputFile = cms.untracked.string(''),
    FEDRawDataCollection = cms.InputTag("source"),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    FEDDirName = cms.untracked.string('FEDIntegrity'),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerIntegrityTask = cms.EDAnalyzer("ESIntegrityTask",
    OutputFile = cms.untracked.string(''),
    DoLumiAnalysis = cms.bool(True),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    prefixME = cms.untracked.string('EcalPreshower'),
    LookupTable = cms.untracked.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat')
)


process.ecalPreshowerOccupancyTask = cms.EDAnalyzer("ESOccupancyTask",
    DigiLabel = cms.InputTag("ecalPreshowerDigis"),
    RecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerRawDataTask = cms.EDAnalyzer("ESRawDataTask",
    OutputFile = cms.untracked.string(''),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    prefixME = cms.untracked.string('EcalPreshower'),
    FEDRawDataCollection = cms.InputTag("source")
)


process.ecalPreshowerTrendTask = cms.EDAnalyzer("ESTrendTask",
    RecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.hcalBeamMonitor = cms.EDAnalyzer("HcalBeamMonitor",
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    mergeRuns = cms.untracked.bool(False),
    lumiqualitydir = cms.untracked.string(''),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    occupancyThresh = cms.untracked.double(0.0625),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    hotrate = cms.untracked.double(0.25),
    minEvents = cms.untracked.int32(500),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    NLumiBlocks = cms.untracked.int32(4000),
    minBadCells = cms.untracked.int32(10),
    AllowedCalibTypes = cms.untracked.vint32(),
    Overwrite = cms.untracked.bool(False),
    TaskFolder = cms.untracked.string('BeamMonitor_Hcal/')
)


process.hcalCoarsePedestalMonitor = cms.EDAnalyzer("HcalCoarsePedestalMonitor",
    excludeHORing2 = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    ADCDiffThresh = cms.untracked.double(1.0),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('CoarsePedestalMonitor_Hcal/'),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    makeDiagnostics = cms.untracked.bool(False),
    AllowedCalibTypes = cms.untracked.vint32(1),
    minEvents = cms.untracked.int32(25)
)


process.hcalDataIntegrityMonitor = cms.EDAnalyzer("HcalDataIntegrityTask",
    mergeRuns = cms.untracked.bool(False),
    UnpackerReportLabel = cms.untracked.InputTag("hcalDigis"),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('FEDIntegrity/'),
    online = cms.untracked.bool(False),
    RawDataLabel = cms.untracked.InputTag("source"),
    AllowedCalibTypes = cms.untracked.vint32()
)


process.hcalDeadCellMonitor = cms.EDAnalyzer("HcalDeadCellMonitor",
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    excludeHORing2 = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    test_rechits = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    NLumiBlocks = cms.untracked.int32(4000),
    MissingRechitEnergyThreshold = cms.untracked.double(-99.0),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    makeDiagnostics = cms.untracked.bool(True),
    test_digis = cms.untracked.bool(True),
    AllowedCalibTypes = cms.untracked.vint32(),
    minDeadEventCount = cms.untracked.int32(1000),
    TaskFolder = cms.untracked.string('DeadCellMonitor_Hcal/')
)


process.hcalDetDiagLEDMonitor = cms.EDAnalyzer("HcalDetDiagLEDMonitor",
    triggerLabel = cms.untracked.InputTag("l1GtUnpack"),
    mergeRuns = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(True),
    ReferenceData = cms.untracked.string(''),
    enableCleanup = cms.untracked.bool(False),
    AllowedCalibTypes = cms.untracked.vint32(1, 2, 3, 4, 5),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    debug = cms.untracked.int32(0),
    UseDB = cms.untracked.bool(False),
    LEDRmsThreshold = cms.untracked.double(0.1),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DetDiagLEDMonitor_Hcal/'),
    online = cms.untracked.bool(False),
    calibDigiLabel = cms.untracked.InputTag("hcalDigis"),
    makeDiagnostics = cms.untracked.bool(False),
    OutputFilePath = cms.untracked.string(''),
    LEDMeanThreshold = cms.untracked.double(0.1)
)


process.hcalDetDiagLaserMonitor = cms.EDAnalyzer("HcalDetDiagLaserMonitor",
    LaserReferenceData = cms.untracked.string(''),
    XmlFilePath = cms.untracked.string(''),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(True),
    enableCleanup = cms.untracked.bool(False),
    AllowedCalibTypes = cms.untracked.vint32(1, 2, 3, 4, 5),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    mergeRuns = cms.untracked.bool(False),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DetDiagLaserMonitor_Hcal/'),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    makeDiagnostics = cms.untracked.bool(False),
    LaserEnergyThreshold = cms.untracked.double(0.1),
    LaserTimingThreshold = cms.untracked.double(0.2),
    OutputFilePath = cms.untracked.string(''),
    Overwrite = cms.untracked.bool(True)
)


process.hcalDetDiagNoiseMonitor = cms.EDAnalyzer("HcalDetDiagNoiseMonitor",
    UseMonitoringTrigger = cms.untracked.bool(False),
    PhysDeclaredRequirement = cms.untracked.string('HLT_PhysicsDeclared'),
    subSystemFolder = cms.untracked.string('Hcal/'),
    UseDB = cms.untracked.bool(False),
    MonitoringTriggerRequirement = cms.untracked.string('HLT_MET100'),
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5),
    MaxJetHadronicEnergyFraction = cms.untracked.double(0.98),
    HLTriggerResults = cms.untracked.InputTag("TriggerResults","","HLT"),
    ConstituentsToJetMatchingDeltaR = cms.untracked.double(0.5),
    MetSource = cms.untracked.InputTag("met"),
    mergeRuns = cms.untracked.bool(False),
    NoiseReferenceData = cms.untracked.string(''),
    TrackMaxIp = cms.untracked.double(0.1),
    skipOutOfOrderLS = cms.untracked.bool(True),
    rbxCollName = cms.untracked.string('hcalnoise'),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    online = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(False),
    UseVertexCuts = cms.untracked.bool(True),
    MinJetChargeFraction = cms.untracked.double(0.05),
    TrackSource = cms.untracked.InputTag("generalTracks"),
    debug = cms.untracked.int32(0),
    NLumiBlocks = cms.untracked.int32(4000),
    RawDataLabel = cms.untracked.InputTag("source"),
    TrackMinThreshold = cms.untracked.double(1.0),
    JetMaxEta = cms.untracked.double(2.0),
    JetSource = cms.untracked.InputTag("iterativeCone5CaloJets"),
    VertexSource = cms.untracked.InputTag("offlinePrimaryVertices"),
    caloTowerCollName = cms.InputTag("towerMaker"),
    TaskFolder = cms.untracked.string('DetDiagNoiseMonitor_Hcal/'),
    JetMinEt = cms.untracked.double(10.0)
)


process.hcalDetDiagPedestalMonitor = cms.EDAnalyzer("HcalDetDiagPedestalMonitor",
    HEMeanTreshold = cms.untracked.double(0.2),
    subSystemFolder = cms.untracked.string('Hcal/'),
    HERmsTreshold = cms.untracked.double(0.3),
    HFMeanTreshold = cms.untracked.double(0.2),
    HFRmsTreshold = cms.untracked.double(0.3),
    HORmsTreshold = cms.untracked.double(0.3),
    XmlFilePath = cms.untracked.string(''),
    skipOutOfOrderLS = cms.untracked.bool(True),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    online = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(False),
    AllowedCalibTypes = cms.untracked.vint32(1),
    debug = cms.untracked.int32(0),
    mergeRuns = cms.untracked.bool(False),
    NLumiBlocks = cms.untracked.int32(4000),
    OutputFilePath = cms.untracked.string(''),
    HOMeanTreshold = cms.untracked.double(0.2),
    PedestalReferenceData = cms.untracked.string(''),
    HBMeanTreshold = cms.untracked.double(0.2),
    TaskFolder = cms.untracked.string('DetDiagPedestalMonitor_Hcal/'),
    rawDataLabel = cms.untracked.InputTag("source"),
    HBRmsTreshold = cms.untracked.double(0.3),
    Overwrite = cms.untracked.bool(True)
)


process.hcalDetDiagTimingMonitor = cms.EDAnalyzer("HcalDetDiagTimingMonitor",
    GCTTriggerBit3 = cms.untracked.int32(17),
    mergeRuns = cms.untracked.bool(False),
    FEDRawDataCollection = cms.untracked.InputTag("source"),
    CosmicsCorr = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(True),
    gtLabel = cms.untracked.InputTag("l1GtUnpack"),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    GCTTriggerBit2 = cms.untracked.int32(16),
    GCTTriggerBit1 = cms.untracked.int32(15),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DetDiagTimingMonitor_Hcal/'),
    GCTTriggerBit5 = cms.untracked.int32(19),
    GCTTriggerBit4 = cms.untracked.int32(18),
    debug = cms.untracked.int32(0),
    makeDiagnostics = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    AllowedCalibTypes = cms.untracked.vint32(0),
    enableCleanup = cms.untracked.bool(False)
)


process.hcalDigiMonitor = cms.EDAnalyzer("HcalDigiMonitor",
    subSystemFolder = cms.untracked.string('Hcal/'),
    MinBiasHLTBits = cms.untracked.vstring('HLT_MinBiasBSC'),
    shapeThresh = cms.untracked.int32(20),
    minDigiSize = cms.untracked.int32(10),
    mergeRuns = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    maxDigiSize = cms.untracked.int32(10),
    makeDiagnostics = cms.untracked.bool(True),
    AllowedCalibTypes = cms.untracked.vint32(),
    checkForMissingDigis = cms.untracked.bool(False),
    ExpectedOrbitMessageTime = cms.untracked.int32(3559),
    checkCapID = cms.untracked.bool(True),
    online = cms.untracked.bool(False),
    checkADCsum = cms.untracked.bool(True),
    NLumiBlocks = cms.untracked.int32(4000),
    checkDVerr = cms.untracked.bool(True),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    shapeThreshHB = cms.untracked.int32(20),
    shutOffOrbitTest = cms.untracked.bool(False),
    shapeThreshHE = cms.untracked.int32(20),
    shapeThreshHF = cms.untracked.int32(20),
    shapeThreshHO = cms.untracked.int32(20),
    checkDigiSize = cms.untracked.bool(True),
    TaskFolder = cms.untracked.string('DigiMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.hcalHotCellMonitor = cms.EDAnalyzer("HcalHotCellMonitor",
    test_persistent = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/'),
    ETThreshold = cms.untracked.double(5.0),
    minErrorFlag = cms.untracked.double(0.1),
    excludeHORing2 = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    energyThreshold_HF = cms.untracked.double(200.0),
    persistentThreshold_HF = cms.untracked.double(10.0),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    ETThreshold_HF = cms.untracked.double(5.0),
    minEvents = cms.untracked.int32(200),
    online = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(True),
    AllowedCalibTypes = cms.untracked.vint32(),
    persistentETThreshold = cms.untracked.double(3.0),
    energyThreshold = cms.untracked.double(50.0),
    NLumiBlocks = cms.untracked.int32(4000),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    test_et = cms.untracked.bool(True),
    test_neighbor = cms.untracked.bool(False),
    test_energy = cms.untracked.bool(False),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    TaskFolder = cms.untracked.string('HotCellMonitor_Hcal/'),
    persistentETThreshold_HF = cms.untracked.double(3.0),
    debug = cms.untracked.int32(0),
    persistentThreshold = cms.untracked.double(6.0)
)


process.hcalLSbyLSMonitor = cms.EDAnalyzer("HcalLSbyLSMonitor",
    mergeRuns = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('LSbyLS_Hcal/'),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    makeDiagnostics = cms.untracked.bool(False),
    TaskDirectories = cms.untracked.vstring('DeadCellMonitor_Hcal/', 
        'DigiMonitor_Hcal/', 
        'HotCellMonitor_Hcal/', 
        'BeamMonitor_Hcal/'),
    AllowedCalibTypes = cms.untracked.vint32(),
    minEvents = cms.untracked.int32(1000)
)


process.hcalMonitor = cms.EDAnalyzer("HcalMonitorModule",
    mergeRuns = cms.untracked.bool(False),
    FEDRawDataCollection = cms.untracked.InputTag("source"),
    subSystemFolder = cms.untracked.string('Hcal/'),
    enableCleanup = cms.untracked.bool(False),
    UnpackerReport = cms.untracked.InputTag("hcalDigis"),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0)
)


process.hcalNZSMonitor = cms.EDAnalyzer("HcalNZSMonitor",
    NZSeventPeriod = cms.untracked.int32(4096),
    mergeRuns = cms.untracked.bool(False),
    nzsHLTnames = cms.untracked.vstring('HLT_HcalPhiSym', 
        'HLT_HcalNZS_8E29'),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('NZSMonitor_Hcal/'),
    online = cms.untracked.bool(False),
    RawDataLabel = cms.untracked.InputTag("source"),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT"),
    AllowedCalibTypes = cms.untracked.vint32()
)


process.hcalRawDataMonitor = cms.EDAnalyzer("HcalRawDataMonitor",
    mergeRuns = cms.bool(False),
    FEDRawDataCollection = cms.untracked.InputTag("source"),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('RawDataMonitor_Hcal/'),
    online = cms.bool(False),
    debug = cms.untracked.int32(0),
    AllowedCalibTypes = cms.untracked.vint32()
)


process.hcalRecHitMonitor = cms.EDAnalyzer("HcalRecHitMonitor",
    collisiontimediffThresh = cms.untracked.double(10.0),
    subSystemFolder = cms.untracked.string('Hcal/'),
    MinBiasHLTBits = cms.untracked.vstring('HLT_MinBiasBSC', 
        'HLT_L1Tech_BSC_minBias'),
    ETThreshold = cms.untracked.double(0.0),
    mergeRuns = cms.untracked.bool(False),
    HO_energyThreshold = cms.untracked.double(5.0),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(True),
    AllowedCalibTypes = cms.untracked.vint32(),
    HF_ETThreshold = cms.untracked.double(0.0),
    L1GTLabel = cms.untracked.InputTag("l1GtUnpack"),
    energyThreshold = cms.untracked.double(2.0),
    NLumiBlocks = cms.untracked.int32(4000),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    HF_energyThreshold = cms.untracked.double(3.0),
    HcalHLTBits = cms.untracked.vstring('HLT_L1Tech_HCAL_HF_coincidence_PM', 
        'HLT_L1Tech_HCAL_HF'),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    TaskFolder = cms.untracked.string('RecHitMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.hcalTrigPrimMonitor = cms.EDAnalyzer("HcalTrigPrimMonitor",
    mergeRuns = cms.untracked.bool(False),
    ZSAlarmThreshold = cms.vint32(0, 10, 10, 10, 10, 
        10, 10, 10, 10, 10, 
        10, 10, 10, 10, 10, 
        40, 40, 10, 20, 20, 
        20, 13, 13, 13, 13, 
        13, 13, 10, 10, 3, 
        3, 2, 2),
    subSystemFolder = cms.untracked.string('Hcal/'),
    skipOutOfOrderLS = cms.untracked.bool(False),
    enableCleanup = cms.untracked.bool(False),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('TrigPrimMonitor_Hcal/'),
    online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    emulLabel = cms.InputTag("valHcalTriggerPrimitiveDigis"),
    dataLabel = cms.InputTag("hcalDigis"),
    AllowedCalibTypes = cms.untracked.vint32()
)


process.hltMonBitSummary = cms.EDAnalyzer("HLTMonBitSummary",
    eventSetupPathsKey = cms.untracked.string(''),
    HLTPaths = cms.vstring('HLT_.*'),
    histLabel = cms.untracked.string('myHistLabel'),
    denominator = cms.untracked.string(''),
    denominatorWild = cms.untracked.string(''),
    directory = cms.untracked.string('myDirectory'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.muRecoTest = cms.EDAnalyzer("MuonRecoTest",
    phiMin = cms.double(-3.2),
    diagnosticPrescale = cms.untracked.int32(1),
    etaMin = cms.double(-3.0),
    efficiencyTestName = cms.untracked.string('EfficiencyInRange'),
    etaBin = cms.int32(100),
    phiBin = cms.int32(100),
    etaMax = cms.double(3.0),
    phiMax = cms.double(3.2)
)


process.muTrackResidualsTest = cms.EDAnalyzer("MuonTrackResidualsTest",
    sigmaTestName = cms.untracked.string('ResidualsSigmaInRange'),
    meanTestName = cms.untracked.string('ResidualsMeanInRange'),
    diagnosticPrescale = cms.untracked.int32(1),
    resDistributionTestName = cms.untracked.string('ResidualsDistributionGaussianTest')
)


process.muonAnalyzer = cms.EDAnalyzer("MuonAnalyzer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    OutputMEsInRootFile = cms.bool(False),
    trackSegmentsAnalysis = cms.PSet(
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(200),
        SegmentsTrackAssociatorParameters = cms.PSet(
            segmentsDt = cms.untracked.InputTag("dt4DSegments"),
            SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
            segmentsCSC = cms.untracked.InputTag("cscSegments")
        ),
        ptMin = cms.double(0.0),
        etaMin = cms.double(-3.0),
        etaBin = cms.int32(100),
        phiBin = cms.int32(100),
        ptMax = cms.double(200.0),
        etaMax = cms.double(3.0),
        phiMax = cms.double(3.2)
    ),
    GlobalMuTrackCollection = cms.InputTag("globalMuons"),
    SeedCollection = cms.InputTag("ancientMuonSeed"),
    muonRecoAnalysis = cms.PSet(
        ptBin = cms.int32(500),
        thetaBin = cms.int32(100),
        pResMin = cms.double(-0.01),
        rhMin = cms.double(0.0),
        pMin = cms.double(0.0),
        etaMin = cms.double(-3.0),
        etaMax = cms.double(3.0),
        pMax = cms.double(500.0),
        chi2Min = cms.double(0),
        thetaMin = cms.double(0.0),
        phiMin = cms.double(-3.2),
        rhBin = cms.int32(25),
        pResMax = cms.double(0.01),
        thetaMax = cms.double(3.2),
        rhMax = cms.double(1.001),
        etaBin = cms.int32(100),
        pBin = cms.int32(500),
        ptMax = cms.double(500.0),
        ptMin = cms.double(0.0),
        phiMax = cms.double(3.2),
        pResBin = cms.int32(50),
        phiBin = cms.int32(100),
        chi2Max = cms.double(50),
        chi2Bin = cms.int32(100)
    ),
    DoMuonKinVsEtaAnalysis = cms.untracked.bool(True),
    DoMuonSeedAnalysis = cms.untracked.bool(True),
    DoTrackSegmentsAnalysis = cms.untracked.bool(True),
    seedsAnalysis = cms.PSet(
        phiErrMax = cms.double(3.2),
        pxyzErrMin = cms.double(-100.0),
        seedPxyzMin = cms.double(-50.0),
        pxyzErrMax = cms.double(100.0),
        RecHitBin = cms.int32(25),
        etaErrMin = cms.double(0.0),
        seedPtMin = cms.double(0.0),
        seedPxyzBin = cms.int32(100),
        ThetaBin = cms.int32(100),
        RecHitMin = cms.double(0.0),
        EtaMin = cms.double(-3.0),
        pErrBin = cms.int32(200),
        phiErrBin = cms.int32(160),
        EtaMax = cms.double(3.0),
        etaErrBin = cms.int32(200),
        seedPxyzMax = cms.double(50.0),
        ThetaMin = cms.double(0.0),
        PhiMin = cms.double(-3.2),
        pxyzErrBin = cms.int32(100),
        RecHitMax = cms.double(25.0),
        ThetaMax = cms.double(3.2),
        etaErrMax = cms.double(0.5),
        EtaBin = cms.int32(100),
        pErrMax = cms.double(200.0),
        seedPtMax = cms.double(200.0),
        seedPtBin = cms.int32(1000),
        phiErrMin = cms.double(0.0),
        PhiBin = cms.int32(100),
        debug = cms.bool(False),
        pErrMin = cms.double(0.0),
        PhiMax = cms.double(3.2)
    ),
    muonKinVsEtaAnalysis = cms.PSet(
        etaECMin = cms.double(0.9),
        etaBMin = cms.double(0.0),
        ptBin = cms.int32(500),
        phiMin = cms.double(-3.2),
        pBin = cms.int32(500),
        etaECMax = cms.double(2.4),
        etaBMax = cms.double(1.1),
        pMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMin = cms.double(-3.0),
        ptMin = cms.double(0.0),
        phiBin = cms.int32(100),
        etaOvlpMin = cms.double(0.9),
        etaOvlpMax = cms.double(1.1),
        ptMax = cms.double(500.0),
        etaMax = cms.double(3.0),
        pMax = cms.double(500.0),
        phiMax = cms.double(3.2)
    ),
    DoMuonEnergyAnalysis = cms.untracked.bool(True),
    STAMuTrackCollection = cms.InputTag("standAloneMuons"),
    DoMuonRecoAnalysis = cms.untracked.bool(True),
    OutputFileName = cms.string('MuonMonitoring.root'),
    MuonCollection = cms.InputTag("muons"),
    muonEnergyAnalysis = cms.PSet(
        hadS9SizeMin = cms.double(0.0),
        hoS9SizeMax = cms.double(4.0),
        emSizeMin = cms.double(0.0),
        emS9SizeBin = cms.int32(100),
        emS9SizeMin = cms.double(0.0),
        hoSizeMax = cms.double(4.0),
        hoS9SizeBin = cms.int32(100),
        hoSizeMin = cms.double(0.0),
        emSizeMax = cms.double(4.0),
        hadS9SizeMax = cms.double(10.0),
        hoS9SizeMin = cms.double(0.0),
        hadSizeMin = cms.double(0.0),
        hadSizeBin = cms.int32(200),
        hadS9SizeBin = cms.int32(200),
        debug = cms.bool(False),
        AlgoName = cms.string('muons'),
        emS9SizeMax = cms.double(4.0),
        hadSizeMax = cms.double(10.0),
        hoSizeBin = cms.int32(100),
        emSizeBin = cms.int32(100)
    )
)


process.muonClientsQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/QualityTests2.xml')
)


process.muonComp2RefKolmoQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/Mu_Comp2RefKolmogorov.xml')
)


process.muonComp2RefQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/Mu_Comp2RefChi2.xml')
)


process.muonCosmicTestSummary = cms.EDAnalyzer("MuonTestSummary",
    expPeakHadS9_max = cms.double(3.0),
    resSegmTrack_rms_max = cms.double(1.1),
    resChargeLimit_tkSta = cms.double(0.18),
    expPeakHadS9_min = cms.double(1.0),
    expMultiplicityTk_max = cms.double(0.045),
    expMultiplicityTk_min = cms.double(0.0),
    chi2Spread = cms.double(0.2),
    matchesFractionDt_min = cms.double(0.75),
    resOneOvPSpread_glbSta = cms.double(0.05),
    matchesFractionDt_max = cms.double(1.0),
    resSegmTrack_mean_min = cms.double(-0.2),
    resSegmTrack_rms_min = cms.double(0.9),
    resSegmTrack_mean_max = cms.double(0.2),
    pullPhiSpread = cms.double(2.0),
    pullEtaSpread = cms.double(1.3),
    numMatchedExpected_min = cms.double(3.0),
    expMultiplicityGlb_min = cms.double(0.0),
    expMultiplicityGlb_max = cms.double(0.1),
    resEtaSpread_tkGlb = cms.double(0.001),
    expPeakEcalS9_max = cms.double(0.3),
    matchesFractionCsc_min = cms.double(0.75),
    expPeakEcalS9_min = cms.double(0.1),
    pullOneOvPSpread = cms.double(2.0),
    resOneOvPSpread_tkGlb = cms.double(0.001),
    matchesFractionCsc_max = cms.double(1.0),
    etaExpected = cms.double(0.5),
    resEtaSpread_glbSta = cms.double(0.05),
    phiExpected = cms.double(0.01),
    resChargeLimit_glbSta = cms.double(0.14),
    expMultiplicitySta_max = cms.double(0.95),
    resChargeLimit_tkGlb = cms.double(0.1),
    chi2Fraction = cms.double(0.4),
    resPhiSpread_tkGlb = cms.double(0.001),
    resPhiSpread_glbSta = cms.double(0.05),
    expMultiplicitySta_min = cms.double(0.75),
    numMatchedExpected_max = cms.double(5.0)
)


process.muonIdDQM = cms.EDAnalyzer("MuonIdDQM",
    baseFolder = cms.untracked.string('Muons/MuonIdDQM'),
    useGlobalMuonsNotTrackerMuons = cms.untracked.bool(False),
    useGlobalMuons = cms.untracked.bool(True),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    useTrackerMuons = cms.untracked.bool(True),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputMuonCollection = cms.InputTag("muons"),
    useTrackerMuonsNotGlobalMuons = cms.untracked.bool(True)
)


process.muonSourcesQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/QualityTests1.xml')
)


process.muonTestSummary = cms.EDAnalyzer("MuonTestSummary",
    resEtaSpread_glbSta = cms.double(0.05),
    resSegmTrack_rms_max = cms.double(1.1),
    resChargeLimit_tkSta = cms.double(0.18),
    expPeakHadS9_min = cms.double(1.0),
    expMultiplicityTk_max = cms.double(0.16),
    numMatchedExpected_min = cms.double(3.0),
    expMultiplicityTk_min = cms.double(0.08),
    matchesFractionDt_min = cms.double(0.75),
    resOneOvPSpread_glbSta = cms.double(0.05),
    matchesFractionDt_max = cms.double(1.0),
    resSegmTrack_mean_min = cms.double(-0.2),
    resSegmTrack_rms_min = cms.double(0.9),
    resSegmTrack_mean_max = cms.double(0.2),
    pullPhiSpread = cms.double(2.0),
    pullEtaSpread = cms.double(1.3),
    expMultiplicityGlb_min = cms.double(0.75),
    expMultiplicityGlb_max = cms.double(0.95),
    resEtaSpread_tkGlb = cms.double(0.001),
    expPeakEcalS9_max = cms.double(0.3),
    matchesFractionCsc_min = cms.double(0.75),
    chi2Spread = cms.double(0.2),
    expPeakEcalS9_min = cms.double(0.1),
    pullOneOvPSpread = cms.double(2.0),
    resOneOvPSpread_tkGlb = cms.double(0.001),
    matchesFractionCsc_max = cms.double(1.0),
    etaExpected = cms.double(1.0),
    expPeakHadS9_max = cms.double(3.0),
    phiExpected = cms.double(1.0),
    resChargeLimit_glbSta = cms.double(0.14),
    expMultiplicitySta_max = cms.double(0.02),
    resChargeLimit_tkGlb = cms.double(0.1),
    chi2Fraction = cms.double(0.4),
    resPhiSpread_tkGlb = cms.double(0.001),
    resPhiSpread_glbSta = cms.double(0.05),
    expMultiplicitySta_min = cms.double(0.01),
    numMatchedExpected_max = cms.double(5.0)
)


process.qualityStatistics = cms.EDAnalyzer("SiStripQualityStatistics",
    TkMapFileName = cms.untracked.string(''),
    dataLabel = cms.untracked.string('unbiased')
)


process.rpcDcsInfo = cms.EDAnalyzer("RPCDcsInfo",
    ScalersRawToDigiLabel = cms.untracked.string('scalersRawToDigi'),
    subSystemFolder = cms.untracked.string('RPC'),
    dcsInfoFolder = cms.untracked.string('DCSInfo')
)


process.rpcEfficiency = cms.EDAnalyzer("RPCEfficiency",
    cscSegments = cms.untracked.string('cscSegments'),
    rangestripsRB4 = cms.untracked.double(4.0),
    incldtMB4 = cms.untracked.bool(True),
    DuplicationCorrection = cms.untracked.int32(1),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    rangestrips = cms.untracked.double(1.0),
    inves = cms.untracked.bool(True),
    EffRootFileName = cms.untracked.string('/tmp/carrillo/RPCEfficiencyFIRST.root'),
    EffSaveRootFile = cms.untracked.bool(False),
    inclcsc = cms.untracked.bool(True),
    MaxDrb4 = cms.untracked.double(150.0),
    MinCosAng = cms.untracked.double(0.99),
    MaxD = cms.untracked.double(80.0),
    dt4DSegments = cms.untracked.string('dt4DSegments'),
    incldt = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    EffSaveRootFileEventsInterval = cms.untracked.int32(100),
    muonRPCDigis = cms.untracked.string('muonRPCDigis')
)


process.rpcEventInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('RPC')
)


process.rpcFEDIntegrity = cms.EDAnalyzer("RPCFEDIntegrity",
    MaximumFEDID = cms.untracked.int32(792),
    RPCRawCountsInputTag = cms.untracked.InputTag("muonRPCDigis"),
    MinimumFEDID = cms.untracked.int32(790),
    RPCPrefixDir = cms.untracked.string('RPC/FEDIntegrity'),
    NumberOfFED = cms.untracked.int32(3)
)


process.rpcMonitorLinkSynchro = cms.EDAnalyzer("RPCMonitorLinkSynchro",
    dumpDelays = cms.untracked.bool(False),
    useFirstHitOnly = cms.untracked.bool(False)
)


process.rpcMonitorRaw = cms.EDAnalyzer("RPCMonitorRaw",
    watchedErrors = cms.untracked.vint32(8, 9)
)


process.rpcdigidqm = cms.EDAnalyzer("RPCMonitorDigi",
    moduleLogName = cms.untracked.string('DigiModule'),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    dqmexpert = cms.untracked.bool(True),
    DigiEventsInterval = cms.untracked.int32(100),
    DigiLabel = cms.InputTag("muonRPCDigis"),
    MergeDifferentRuns = cms.untracked.bool(False),
    dqmsuperexpert = cms.untracked.bool(False),
    DigiDQMSaveRootFile = cms.untracked.bool(False),
    dqmshifter = cms.untracked.bool(True),
    RootFileNameDigi = cms.untracked.string('RPCMonitorDigi.root')
)


process.siStripFEDCheck = cms.EDAnalyzer("SiStripFEDCheckPlugin",
    PrintDebugMessages = cms.untracked.bool(False),
    CheckChannelStatus = cms.untracked.bool(True),
    DoPayloadChecks = cms.untracked.bool(True),
    CheckChannelLengths = cms.untracked.bool(True),
    WriteDQMStore = cms.untracked.bool(False),
    CheckFELengths = cms.untracked.bool(True),
    RawDataTag = cms.InputTag("source"),
    HistogramUpdateFrequency = cms.untracked.uint32(0),
    CheckChannelPacketCodes = cms.untracked.bool(True),
    DirName = cms.untracked.string('SiStrip/FEDIntegrity/')
)


process.siStripFEDMonitor = cms.EDAnalyzer("SiStripFEDMonitorPlugin",
    nTotalBadActiveChannelsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    FeMajAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    DataMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    AnyFEProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    OOSBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    MedianAPV0HistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(False),
        NBins = cms.untracked.uint32(256)
    ),
    TkHistoMapHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    DQMStoreFileName = cms.untracked.string('DQMStore.root'),
    BadDAQPacketHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    APVErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    InvalidBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVStatusBitHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nOutOfSyncHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    nAPVAddressErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    ErrorFractionByLumiBlockHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nAPVAddressErrorHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    BadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    AnyDAQProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    UnlockedBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDCorruptBuffersvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    DataPresentHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nBadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    PrintDebugMessages = cms.untracked.uint32(0),
    ApveAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEOverflowsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDDAQProblemsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(100.5),
        Min = cms.untracked.double(-0.5),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(101)
    ),
    nFEDCorruptBuffersHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(100.5),
        Min = cms.untracked.double(-0.5),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(101)
    ),
    FillWithEventNumber = cms.untracked.bool(False),
    nUnlockedHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    nFEDsWithMissingFEsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVErrorHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    FETimeDiffTECBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadMajorityAddressesDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FillAllDetailedHistograms = cms.untracked.bool(False),
    CorruptBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nTotalBadChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDsWithFEProblemsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nBadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    FEMissingDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadAPVStatusBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nUnconnectedChannelsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    BadDAQCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nTotalBadChannelsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(250)
    ),
    nUnlockedvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVStatusBitvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDErrorsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(100.5),
        Min = cms.untracked.double(-0.5),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(101)
    ),
    FEMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FETimeDiffTECFHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    APVAddressErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    TimeHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(False),
        NBins = cms.untracked.uint32(600)
    ),
    BadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    RawDataTag = cms.untracked.InputTag("source"),
    nFEDsWithFEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDErrorsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    AnyFEDErrorsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTIBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    WriteDQMStore = cms.untracked.bool(False),
    nFEDsWithFEProblemsHistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(100.5),
        Min = cms.untracked.double(-0.5),
        Enabled = cms.untracked.bool(True),
        NBins = cms.untracked.uint32(101)
    ),
    nFEDsWithFEBadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    HistogramFolderName = cms.untracked.string('SiStrip/ReadoutView/FedMonitoringSummary'),
    BadFEDCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FETimeDiffTOBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadIDsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nTotalBadActiveChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nOutOfSyncvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    MedianAPV1HistogramConfig = cms.untracked.PSet(
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        Enabled = cms.untracked.bool(False),
        NBins = cms.untracked.uint32(256)
    )
)


process.zdcMonitor = cms.EDAnalyzer("ZDCMonitorModule",
    diagnosticPrescaleEvt = cms.untracked.int32(-1),
    ZDCMonitor_checkNevents = cms.untracked.int32(1000),
    BadCells = cms.untracked.vstring(),
    FEDRawDataCollection = cms.untracked.InputTag("source"),
    ZDCMonitor = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/ZDCMonitor'),
    zdcRecHitLabel = cms.InputTag("zdcreco"),
    ZDCMonitor_deadthresholdrate = cms.untracked.double(0.0),
    gtLabel = cms.InputTag("l1GtUnpack"),
    AllowedCalibTypes = cms.untracked.vint32(),
    digiLabel = cms.InputTag("hcalDigis"),
    checkNevents = cms.untracked.int32(1000),
    showTiming = cms.untracked.bool(False),
    Nlumiblocks = cms.untracked.int32(1000),
    diagnosticPrescaleLS = cms.untracked.int32(-1),
    Online = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    checkZDC = cms.untracked.bool(True),
    pedestalsInFC = cms.untracked.bool(True)
)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsVetoSeeds*process.cosmicsVetoTrackCandidates*process.cosmicsVetoTracksRaw*process.cosmicsVetoTracks*process.cosmicsVeto)


process.ALCARECOTkAlMinBiasHIDQM = cms.Sequence(process.ALCARECOTkAlMinBiasHITrackingDQM+process.ALCARECOTkAlMinBiasHITkAlDQM+process.ALCARECOTkAlMinBiasHIHLTDQM)


process.islandClusteringSequence = cms.Sequence(process.islandBasicClusters*process.islandSuperClusters*process.correctedIslandBarrelSuperClusters*process.correctedIslandEndcapSuperClusters)


process.seqALCARECOHcalCalDijets = cms.Sequence(process.dijetsHLT*process.DiJProd)


process.hcalLocalRecoSequence = cms.Sequence(process.hbhereco+process.hfreco+process.horeco+process.zdcreco)


process.deCsc = cms.Sequence(process.valCscTriggerPrimitiveDigis)


process.seqALCARECORpcCalHLT = cms.Sequence(process.ALCARECORpcCalHLTFilter)


process.ALCARECOMuAlGlobalCosmicsInCollisionsDQM = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsInCollisionsTrackingDQM+process.ALCARECOMuAlGlobalCosmicsInCollisionsHLTDQM)


process.ALCARECOTkAlCosmicsCTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCTF0TTkAlDQM+process.ALCARECOTkAlCosmicsCTF0THLTDQM)


process.ALCARECOMuAlGlobalCosmicsDQM = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsTrackingDQM+process.ALCARECOMuAlGlobalCosmicsHLTDQM)


process.csclocalreco = cms.Sequence(process.csc2DRecHits*process.cscSegments)


process.hcalLocalRecoSequenceNZS = cms.Sequence(process.hbherecoMB*process.hfrecoMB*process.horecoMB)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression*process.siStripClusters*process.siStripMatchedRecHits)


process.alcaBeamMonitor = cms.Sequence(process.AlcaBeamMonitor)


process.ALCARECOTkAlLASDQM = cms.Sequence(process.ALCARECOTkAlLASDigiDQM)


process.cscSources = cms.Sequence(process.dqmCSCClient)


process.gamIsoFromDeposits = cms.Sequence(process.gamIsoFromDepsTk*process.gamIsoFromDepsEcalFromHits*process.gamIsoFromDepsHcalFromTowers*process.gamIsoFromDepsHcalDepth1FromTowers*process.gamIsoFromDepsHcalDepth2FromTowers)


process.seqALCARECOTkAlCosmicsCTF = cms.Sequence(process.ALCARECOTkAlCosmicsCTF)


process.hiEcalIsolation = cms.Sequence(process.isoC1+process.isoC2+process.isoC3+process.isoC4+process.isoC5)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits*process.dt4DSegments+process.dt1DCosmicRecHits*process.dt4DCosmicSegments)


process.seqALCARECOMuAlBeamHalo = cms.Sequence(process.ALCARECOMuAlBeamHaloHLT+process.ALCARECOMuAlBeamHaloDCSFilter+process.ALCARECOMuAlBeamHalo)


process.ecalBarrelCertificationSequence = cms.Sequence(process.ecalBarrelDaqInfoTask*process.ecalBarrelDcsInfoTask*process.ecalBarrelDataCertificationTask)


process.ValL1MuTriggerPrimitives = cms.Sequence(process.valCscTriggerPrimitiveDigis+process.valDtTriggerPrimitiveDigis)


process.ValL1TechnicalTriggers = cms.Sequence(process.valRpcTechTrigDigis+process.valHcalTechTrigDigis)


process.ALCARECODTCalibSynchDQM = cms.Sequence(process.dtAlcaResolutionMonitor+process.dtTriggerSynchMonitor)


process.es_dqm_source_offline = cms.Sequence(process.ecalPreshowerRawDataTask*process.ecalPreshowerFEDIntegrityTask*process.ecalPreshowerIntegrityTask*process.ecalPreshowerOccupancyTask*process.ecalPreshowerTrendTask)


process.ALCARECOTkAlCosmicsCosmicTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM+process.ALCARECOTkAlCosmicsCosmicTF0THLTDQM)


process.pfClusteringECAL = cms.Sequence(process.particleFlowRecHitECAL*process.particleFlowClusterECAL)


process.muonQualityTests = cms.Sequence(process.muonSourcesQualityTests*process.muTrackResidualsTest*process.muRecoTest*process.muonClientsQualityTests*process.muonComp2RefQualityTests*process.muonComp2RefKolmoQualityTests*process.muonTestSummary)


process.deGct = cms.Sequence(process.valGctDigis)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClusters*process.siPixelRecHits)


process.seqALCARECOTkAlZMuMu = cms.Sequence(process.ALCARECOTkAlZMuMuHLT+process.ALCARECOTkAlZMuMuDCSFilter+process.ALCARECOTkAlZMuMu)


process.photonSequence = cms.Sequence(process.photonCore+process.photons)


process.ALCARECOMuAlOverlapsDQM = cms.Sequence(process.ALCARECOMuAlOverlapsTrackingDQM+process.ALCARECOMuAlOverlapsHLTDQM)


process.alcaBeamSpot = cms.Sequence(process.alcaBeamSpotProducer)


process.recoPFJets = cms.Sequence(process.kt4PFJets+process.kt6PFJets+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets)


process.ecalEndcapDefaultTasksSequence = cms.Sequence(process.ecalEndcapOccupancyTask*process.ecalEndcapIntegrityTask*process.ecalEndcapStatusFlagsTask*process.ecalEndcapSelectiveReadoutTask*process.ecalEndcapRawDataTask*process.ecalEndcapLaserTask*process.ecalEndcapLedTask*process.ecalEndcapPedestalOnlineTask*process.ecalEndcapPedestalTask*process.ecalEndcapTestPulseTask*process.ecalEndcapTriggerTowerTask*process.ecalEndcapTimingTask)


process.seqALCARECOTkAlMuonIsolated = cms.Sequence(process.ALCARECOTkAlMuonIsolatedHLT+process.ALCARECOTkAlMuonIsolatedDCSFilter+process.ALCARECOTkAlMuonIsolated)


process.muoncosmicreco2legsHighLevel = cms.Sequence(process.globalCosmicMuons*process.muonsFromCosmics)


process.eleIsoDeposits = cms.Sequence(process.eleIsoDepositTk+process.eleIsoDepositEcalFromHits+process.eleIsoDepositHcalFromTowers+process.eleIsoDepositHcalDepth1FromTowers+process.eleIsoDepositHcalDepth2FromTowers)


process.ALCARECOMuAlZMuMuDQM = cms.Sequence(process.ALCARECOMuAlZMuMuTrackingDQM+process.ALCARECOMuAlZMuMuMuAlDQM+process.ALCARECOMuAlZMuMuHLTDQM)


process.muIsoDQM_seq = cms.Sequence(process.MuIsoDQM_trk+process.MuIsoDQM_sta+process.MuIsoDQM_glb)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.hcalMonitorTasksCalibrationSequence = cms.Sequence(process.hcalRecHitMonitor*process.hcalRawDataMonitor*process.hcalDetDiagPedestalMonitor*process.hcalDetDiagLaserMonitor*process.hcalDetDiagNoiseMonitor*process.hcalDetDiagTimingMonitor)


process.standAloneMuonSeeds = cms.Sequence(process.ancientMuonSeed)


process.hiPhotonSequence = cms.Sequence(process.highPurityTracks*process.photonSequence)


process.hiTrackVetoConeIsolation = cms.Sequence(process.isoDR11+process.isoDR12+process.isoDR13+process.isoDR14+process.isoDR21+process.isoDR22+process.isoDR23+process.isoDR24+process.isoDR31+process.isoDR32+process.isoDR33+process.isoDR34+process.isoDR41+process.isoDR42+process.isoDR43+process.isoDR44)


process.hiEgammaSequence = cms.Sequence(process.hiPhotonSequence)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.correctedMulti5x5SuperClustersWithPreshower*process.multi5x5PreshowerClusterShape)


process.hiTracksWithQuality = cms.Sequence(process.hiTracksWithLooseQuality*process.hiTracksWithTightQuality*process.hiSelectedTracks)


process.seqALCARECOPromptCalibProd = cms.Sequence(process.ALCARECOTkAlMinBiasFilterForBS*process.L1CollTrigger*process.alcaBeamSpotProducer)


process.dtlocalreco_with_2DSegments = cms.Sequence(process.dt1DRecHits*process.dt2DSegments*process.dt4DSegments+process.dt1DCosmicRecHits*process.dt2DCosmicSegments*process.dt4DCosmicSegments)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalGlobalUncalibRecHit*process.ecalDetIdToBeRecovered*process.ecalRecHit*process.ecalCompactTrigPrim*process.ecalTPSkim+process.ecalPreshowerRecHit)


process.ALCARECOMuAlBeamHaloDQM = cms.Sequence(process.ALCARECOMuAlBeamHaloTrackingDQM+process.ALCARECOMuAlBeamHaloHLTDQM)


process.seqALCARECOTkAlJpsiMuMu = cms.Sequence(process.ALCARECOTkAlJpsiMuMuHLT+process.ALCARECOTkAlJpsiMuMuDCSFilter+process.ALCARECOTkAlJpsiMuMu)


process.bestHiVertex = cms.Sequence(process.hiBestAdaptiveVertex*process.hiSelectedVertex)


process.muoncosmicreco1legHighLevel = cms.Sequence(process.globalCosmicMuons1Leg*process.muonsFromCosmics1Leg)


process.seqALCARECOEcalCalEtaCalib = cms.Sequence(process.ecaletaCalibHLT*process.ecalEtaCorrected)


process.pfElectronTranslatorSequence = cms.Sequence(process.pfElectronTranslator+process.pfElectronInterestingEcalDetIdEB+process.pfElectronInterestingEcalDetIdEE)


process.ALCARECOTkAlMuonIsolatedDQM = cms.Sequence(process.ALCARECOTkAlMuonIsolatedTrackingDQM+process.ALCARECOTkAlMuonIsolatedTkAlDQM+process.ALCARECOTkAlMuonIsolatedHLTDQM)


process.muonlocalreco_with_2DSegments = cms.Sequence(process.dtlocalreco_with_2DSegments+process.csclocalreco+process.rpcRecHits)


process.photonIDSequence = cms.Sequence(process.PhotonIDProd)


process.siPixelOfflineDQM_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource+process.SiPixelHitEfficiencySource+process.dqmInfo)


process.muonSelectionTypeSequence = cms.Sequence(process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight)


process.ecalEndcapCertificationSequence = cms.Sequence(process.ecalEndcapDaqInfoTask*process.ecalEndcapDcsInfoTask*process.ecalEndcapDataCertificationTask)


process.RawToDigi = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gctDigis+process.gtDigis+process.gtEvmDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi)


process.seqALCARECOTkAlCosmicsCTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0T)


process.seqALCARECOSiStripCalMinBias = cms.Sequence(process.ALCARECOSiStripCalMinBiasHLT*process.HLTPixelActivityFilterForSiStripCalMinBias*process.DCSStatusForSiStripCalMinBias*process.ALCARECOSiStripCalMinBias)


process.ee_dqm_source_offline1 = cms.Sequence(process.ecalEndcapMonitorModule*process.dqmInfoEE*process.ecalEndcapOccupancyTask*process.ecalEndcapIntegrityTask*process.ecalEndcapStatusFlagsTask*process.ecalEndcapSelectiveReadoutTask*process.ecalEndcapRawDataTask*process.ecalEndcapPedestalOnlineTask*process.ecalEndcapTriggerTowerTask*process.ecalEndcapClusterTask*process.ecalEndcapHltTask*process.ecalEndcapClusterTaskExtras)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.pfConversions*process.pfV0*process.particleFlowDisplacedVertexCandidate*process.particleFlowDisplacedVertex*process.pfDisplacedTrackerVertex*process.pfTrackElec)


process.hcalMonitorTasksOnlineSequence = cms.Sequence(process.hcalDigiMonitor*process.hcalHotCellMonitor*process.hcalDeadCellMonitor*process.hcalRecHitMonitor*process.hcalBeamMonitor*process.hcalRawDataMonitor*process.hcalTrigPrimMonitor*process.hcalCoarsePedestalMonitor*process.hcalDetDiagNoiseMonitor*process.hcalDetDiagTimingMonitor*process.hcalNZSMonitor)


process.hiEcalIsolationBckSubtracted = cms.Sequence(process.isoCC1+process.isoCC2+process.isoCC3+process.isoCC4+process.isoCC5)


process.seqALCARECOEcalCalPi0Calib = cms.Sequence(process.ecalpi0CalibHLT*process.ecalPi0Corrected)


process.deGmt = cms.Sequence(process.valGmtDigis)


process.muontracking_with_SET = cms.Sequence(process.SETMuonSeed*process.standAloneSETMuons*process.globalSETMuons)


process.seldigis = cms.Sequence(process.selectDigi)


process.seqALCARECOTkAlCosmicsCTFHLT = cms.Sequence(process.ALCARECOTkAlCosmicsHLT+process.seqALCARECOTkAlCosmicsCTF)


process.muoncosmicreco1legSTA = cms.Sequence(process.CosmicMuonSeed*process.cosmicMuons1Leg)


process.L1Reco = cms.Sequence(process.l1extraParticles+process.l1GtTriggerMenuLite+process.conditionsInEdm)


process.siPixelOfflineDQM_cosmics_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_Cosmics+process.dqmInfo)


process.caloReco = cms.Sequence(process.ecalLocalRecoSequence*process.hcalLocalRecoSequence)


process.dtSources = cms.Sequence(process.dtDataIntegrityUnpacker+process.dtSegmentAnalysisMonitor+process.dtResolutionAnalysisMonitor+process.dtEfficiencyMonitor+process.dtTriggerEfficiencyMonitor+process.dqmInfoDT)


process.pfClusteringHCALall = cms.Sequence(process.particleFlowClusterHCAL+process.particleFlowClusterHFHAD+process.particleFlowClusterHFEM)


process.muonreco_with_SET = cms.Sequence(process.muontracking_with_SET)


process.deHcal = cms.Sequence(process.valHcalTriggerPrimitiveDigis)


process.seqALCARECOMuAlGlobalCosmics = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsHLT+process.ALCARECOMuAlGlobalCosmicsDCSFilter+process.ALCARECOMuAlGlobalCosmics)


process.ALCARECOTkAlCosmicsCosmicTFDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTFTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTFTkAlDQM+process.ALCARECOTkAlCosmicsCosmicTFHLTDQM)


process.eb_dqm_source_offline = cms.Sequence(process.ecalBarrelMonitorModule*process.dqmInfoEB*process.ecalBarrelOccupancyTask*process.ecalBarrelIntegrityTask*process.ecalBarrelStatusFlagsTask*process.ecalBarrelRawDataTask*process.ecalBarrelPedestalOnlineTask*process.ecalBarrelTriggerTowerTask*process.ecalBarrelClusterTask*process.ecalBarrelHltTask*process.ecalBarrelClusterTaskExtras)


process.rpcefficiency = cms.Sequence(process.rpcEfficiency)


process.seqALCARECOMuAlGlobalCosmicsInCollisions = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsInCollisionsHLT+process.ALCARECOMuAlGlobalCosmicsInCollisionsDCSFilter+process.ALCARECOMuAlGlobalCosmicsInCollisions)


process.seqALCARECOHcalCalHOCosmics = cms.Sequence(process.ALCARECOHcalCalHOCosmicHLT*process.hoCalibCosmicsProducer)


process.siPixelOfflineDQM_heavyions_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_HeavyIons+process.SiPixelHitEfficiencySource_HeavyIons+process.dqmInfo)


process.seqALCARECOTkAlBeamHalo = cms.Sequence(process.ALCARECOTkAlBeamHaloDCSFilter+process.ALCARECOTkAlBeamHalo)


process.seqALCARECOSiStripCalZeroBias = cms.Sequence(process.ALCARECOSiStripCalZeroBiasHLT*process.HLTPixelActivityFilterForSiStripCalZeroBias*process.DCSStatusForSiStripCalZeroBias*process.calZeroBiasClusters*process.APVPhases*process.consecutiveHEs)


process.seqALCARECOMuAlZMuMu = cms.Sequence(process.ALCARECOMuAlZMuMuHLT+process.ALCARECOMuAlZMuMuDCSFilter+process.ALCARECOMuAlZMuMu)


process.hiTrackCountingIsolation = cms.Sequence(process.isoT11+process.isoT12+process.isoT13+process.isoT14+process.isoT21+process.isoT22+process.isoT23+process.isoT24+process.isoT31+process.isoT32+process.isoT33+process.isoT34+process.isoT41+process.isoT42+process.isoT43+process.isoT44)


process.dynamicHybridClusteringSequence = cms.Sequence(process.dynamicHybridSuperClusters*process.correctedDynamicHybridSuperClusters)


process.deRct = cms.Sequence(process.valRctDigis)


process.ALCARECOTkAlZMuMuDQM = cms.Sequence(process.ALCARECOTkAlZMuMuTrackingDQM+process.ALCARECOTkAlZMuMuTkAlDQM+process.ALCARECOTkAlZMuMuHLTDQM)


process.hcalMonitorTasksTestSequence = cms.Sequence(process.hcalDigiMonitor*process.hcalHotCellMonitor*process.hcalDeadCellMonitor*process.hcalRecHitMonitor*process.hcalBeamMonitor*process.hcalRawDataMonitor*process.hcalTrigPrimMonitor*process.hcalNZSMonitor*process.hcalLSbyLSMonitor)


process.seqALCARECOTkAlMinBias = cms.Sequence(process.ALCARECOTkAlMinBiasHLT*~process.ALCARECOTkAlMinBiasNOTHLT+process.ALCARECOTkAlMinBiasDCSFilter+process.ALCARECOTkAlMinBias)


process.caloTowersRec = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.seqALCARECOMuAlBeamHaloOverlaps = cms.Sequence(process.ALCARECOMuAlBeamHaloOverlapsHLT+process.ALCARECOMuAlBeamHaloOverlapsDCSFilter+process.ALCARECOMuAlBeamHaloOverlapsEnergyCut*process.ALCARECOMuAlBeamHaloOverlaps)


process.hiPrimSeeds = cms.Sequence(process.hiPixel3PrimTracks*process.hiPixelTrackSeeds)


process.pfClusteringPS = cms.Sequence(process.particleFlowRecHitPS*process.particleFlowClusterPS)


process.hiHcalIsolationBckSubtracted = cms.Sequence(process.isoCR1+process.isoCR2+process.isoCR3+process.isoCR4+process.isoCR5)


process.deEcal = cms.Sequence(process.valEcalTriggerPrimitiveDigis)


process.seqALCARECOTkAlUpsilonMuMu = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuHLT+process.ALCARECOTkAlUpsilonMuMuDCSFilter+process.ALCARECOTkAlUpsilonMuMu)


process.seqALCARECOMuAlCalIsolatedMu = cms.Sequence(process.ALCARECOMuAlCalIsolatedMuHLT+process.ALCARECOMuAlCalIsolatedMu)


process.hiCaloIsolationBckSubtracted = cms.Sequence(process.hiEcalIsolationBckSubtracted+process.hiHcalIsolationBckSubtracted)


process.reducedRecHitsSequence = cms.Sequence(process.interestingEcalDetIdEB*process.interestingEcalDetIdEE*process.reducedEcalRecHitsEB*process.reducedEcalRecHitsEE*process.seldigis)


process.seqAPVCycleFilter = cms.Sequence(~process.PotentialTIBTECHugeEvents*~process.PotentialTIBTECFrameHeaderEventsFPeak*~process.PotentialTIBTECFrameHeaderEventsAdditionalPeak)


process.hiRecoJets = cms.Sequence(process.caloTowersRec*process.caloTowers*process.iterativeConePu5CaloJets)


process.muIsoDeposits_ParamGlobalMuons = cms.Sequence(process.muParamGlobalIsoDepositTk+process.muParamGlobalIsoDepositCalByAssociatorTowers+process.muParamGlobalIsoDepositJets)


process.seqALCARECOHcalCalGammaJet = cms.Sequence(process.gammajetHLT*process.GammaJetProd)


process.ecalBarrelDefaultTasksSequence = cms.Sequence(process.ecalBarrelOccupancyTask*process.ecalBarrelIntegrityTask*process.ecalBarrelStatusFlagsTask*process.ecalBarrelSelectiveReadoutTask*process.ecalBarrelRawDataTask*process.ecalBarrelLaserTask*process.ecalBarrelPedestalOnlineTask*process.ecalBarrelPedestalTask*process.ecalBarrelTestPulseTask*process.ecalBarrelTriggerTowerTask*process.ecalBarrelTimingTask)


process.cosmicMuonQualityTests = cms.Sequence(process.ClientTrackEfficiencyTkTracks*process.ClientTrackEfficiencySTACosmicMuons*process.muonSourcesQualityTests*process.muTrackResidualsTest*process.muRecoTest*process.muonClientsQualityTests*process.muonComp2RefQualityTests*process.muonComp2RefKolmoQualityTests*process.muonCosmicTestSummary)


process.muIsoDeposits_ParamGlobalMuonsOld = cms.Sequence(process.muParamGlobalIsoDepositGsTk+process.muParamGlobalIsoDepositCalEcal+process.muParamGlobalIsoDepositCalHcal)


process.seqALCARECOHcalCalNoise = cms.Sequence(process.noiseHLT*process.prescaler*process.HcalNoiseProd)


process.ALCARECOTkAlCosmicsInCollisionsDQM = cms.Sequence(process.ALCARECOTkAlCosmicsInCollisionsTrackingDQM+process.ALCARECOTkAlCosmicsInCollisionsTkAlDQM+process.ALCARECOTkAlCosmicsInCollisionsHLTDQM)


process.deGt = cms.Sequence(process.valGtDigis)


process.ALCARECOTkAlJpsiMuMuDQM = cms.Sequence(process.ALCARECOTkAlJpsiMuMuTrackingDQM+process.ALCARECOTkAlJpsiMuMuTkAlDQM+process.ALCARECOTkAlJpsiMuMuHLTDQM)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters*process.uncleanedHybridSuperClusters*process.hybridSuperClusters*process.correctedHybridSuperClusters)


process.seqALCARECOHcalCalMinBias = cms.Sequence(process.hcalminbiasHLT*process.hcalDigiAlCaMB*process.gtDigisAlCaMB*process.hbherecoNoise*process.hfrecoNoise*process.hfrecoMBspecial*process.horecoNoise)


process.RawToDigi_woGCT = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gtDigis+process.gtEvmDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi)


process.SiStripDQMTier0_hi = cms.Sequence(process.APVPhases*process.consecutiveHEs*process.siStripFEDCheck*process.siStripFEDMonitor*process.SiStripMonitorDigi*process.SiStripMonitorCluster*process.SiStripMonitorTrack_hi*process.MonitorTrackResiduals_hi*process.TrackMon_hi)


process.hcalMonitorTasksOfflineSequence = cms.Sequence(process.hcalDigiMonitor*process.hcalHotCellMonitor*process.hcalDeadCellMonitor*process.hcalRecHitMonitor*process.hcalBeamMonitor*process.hcalRawDataMonitor*process.hcalDetDiagNoiseMonitor*process.hcalLSbyLSMonitor)


process.seqALCARECOSiPixelLorentzAngle = cms.Sequence(process.ALCARECOSiPixelLorentzAngleHLTFilter)


process.hiHcalIsolation = cms.Sequence(process.isoR1+process.isoR2+process.isoR3+process.isoR4+process.isoR5)


process.muonTrackAnalyzers = cms.Sequence(process.MonitorTrackSTAMuons*process.MonitorTrackGLBMuons)


process.seqALCARECOHcalCalIsoTrk = cms.Sequence(process.isoHLT*process.IsoProd)


process.seqALCARECOEcalCalElectronRECO = cms.Sequence(process.alCaIsolatedElectrons)


process.seqALCARECOTkAlCosmicsCosmicTF = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF)


process.ALCARECOTkAlBeamHaloDQM = cms.Sequence(process.ALCARECOTkAlBeamHaloTrackingDQM)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5BasicClusters*process.multi5x5SuperClusters*process.multi5x5SuperClustersWithPreshower)


process.preshowerClusteringSequence = cms.Sequence(process.correctedEndcapSuperClustersWithPreshower*process.preshowerClusterShape)


process.muonMonitors = cms.Sequence(process.muonTrackAnalyzers*process.dtSegmentsMonitor*process.cscMonitor*process.muonAnalyzer*process.muonIdDQM*process.dqmInfoMuons*process.muIsoDQM_seq)


process.ALCARECOSiStripCalMinBiasDQM = cms.Sequence(process.ALCARECOSiStripCalMinBiasTrackingDQM+process.ALCARECOSiStripCalMinBiasTrackerDQM)


process.gamIsoDeposits = cms.Sequence(process.gamIsoDepositTk+process.gamIsoDepositEcalFromHits+process.gamIsoDepositHcalFromTowers+process.gamIsoDepositHcalDepth1FromTowers+process.gamIsoDepositHcalDepth2FromTowers)


process.muIsolation_ParamGlobalMuonsOld = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsOld)


process.SiStripDQMTier0 = cms.Sequence(process.APVPhases*process.consecutiveHEs*process.siStripFEDCheck*process.siStripFEDMonitor*process.SiStripMonitorDigi*process.SiStripMonitorCluster*process.SiStripMonitorTrack*process.MonitorTrackResiduals*process.TrackerCollisionTrackMon*process.dqmInfoSiStrip)


process.ALCARECOMuAlCalIsolatedMuDQM = cms.Sequence(process.ALCARECOMuAlCalIsolatedMuTrackingDQM+process.ALCARECOMuAlCalIsolatedMuMuAlDQM+process.ALCARECOMuAlCalIsolatedMuHLTDQM)


process.particleFlowReco = cms.Sequence(process.particleFlowBlock*process.particleFlow)


process.seqALCARECOTkAlCosmicsCosmicTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0T)


process.muoncosmicreco2legsSTA = cms.Sequence(process.CosmicMuonSeed*process.cosmicMuons)


process.L1Reco_L1Extra = cms.Sequence(process.l1extraParticles)


process.hiTrackerIsolation = cms.Sequence(process.hiTrackCountingIsolation+process.hiTrackVetoConeIsolation)


process.muontracking = cms.Sequence(process.standAloneMuonSeeds*process.standAloneMuons*process.globalMuons)


process.ee_dqm_source_offline = cms.Sequence(process.ecalEndcapMonitorModule*process.dqmInfoEE*process.ecalEndcapOccupancyTask*process.ecalEndcapIntegrityTask*process.ecalEndcapStatusFlagsTask*process.ecalEndcapRawDataTask*process.ecalEndcapPedestalOnlineTask*process.ecalEndcapTriggerTowerTask*process.ecalEndcapClusterTask*process.ecalEndcapHltTask*process.ecalEndcapClusterTaskExtras)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.seqALCARECOTkAlCosmicsInCollisions = cms.Sequence(process.ALCARECOTkAlCosmicsInCollisionsHLT+process.ALCARECOTkAlCosmicsInCollisionsDCSFilter+process.ALCARECOTkAlCosmicsInCollisions)


process.muonIdProducerSequence = cms.Sequence(process.glbTrackQual*process.muons*process.calomuons*process.muonEcalDetIds)


process.ALCARECOTkAlUpsilonMuMuDQM = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuTrackingDQM+process.ALCARECOTkAlUpsilonMuMuTkAlDQM+process.ALCARECOTkAlUpsilonMuMuHLTDQM)


process.seqALCARECOTkAlCosmicsCosmicTFHLT = cms.Sequence(process.ALCARECOTkAlCosmicsHLT+process.seqALCARECOTkAlCosmicsCosmicTF)


process.deDt = cms.Sequence(process.valDtTriggerPrimitiveDigis)


process.L1Reco_L1Extra_L1GtRecord = cms.Sequence(process.l1extraParticles+process.l1GtRecord)


process.ALCARECOTkAlMinBiasDQM = cms.Sequence(process.ALCARECOTkAlMinBiasTrackingDQM+process.ALCARECOTkAlMinBiasTkAlDQM+process.ALCARECOTkAlMinBiasHLTDQM+process.ALCARECOTkAlMinBiasNOTHLTDQM)


process.seqMultiplicityFilter = cms.Sequence(~process.LargeSiStripClusterEvents)


process.siPixelOfflineDQM_source_woTrack = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.dqmInfo)


process.eb_dqm_source_offline1 = cms.Sequence(process.ecalBarrelMonitorModule*process.dqmInfoEB*process.ecalBarrelOccupancyTask*process.ecalBarrelIntegrityTask*process.ecalBarrelStatusFlagsTask*process.ecalBarrelSelectiveReadoutTask*process.ecalBarrelRawDataTask*process.ecalBarrelPedestalOnlineTask*process.ecalBarrelTriggerTowerTask*process.ecalBarrelClusterTask*process.ecalBarrelHltTask*process.ecalBarrelClusterTaskExtras)


process.seqALCARECOHcalCalHO = cms.Sequence(process.ALCARECOHcalCalHOHLT*process.hoCalibProducer)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.ALCARECOTkAlCosmicsCTFDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCTFTrackingDQM+process.ALCARECOTkAlCosmicsCTFTkAlDQM+process.ALCARECOTkAlCosmicsCTFHLTDQM)


process.seqALCARECOEcalCalPhiSym = cms.Sequence(process.ecalphiSymHLT*process.ecalPhiSymCorrected)


process.seqALCARECOMuAlOverlaps = cms.Sequence(process.ALCARECOMuAlOverlapsHLT+process.ALCARECOMuAlOverlapsDCSFilter+process.ALCARECOMuAlOverlapsMuonSelector*process.ALCARECOMuAlOverlaps)


process.eleIsoFromDeposits = cms.Sequence(process.eleIsoFromDepsTk*process.eleIsoFromDepsEcalFromHits*process.eleIsoFromDepsHcalFromTowers*process.eleIsoFromDepsHcalDepth1FromTowers*process.eleIsoFromDepsHcalDepth2FromTowers)


process.deDttf = cms.Sequence(process.valCsctfTrackDigis*process.valDttfDigis*process.muonDtMon)


process.DQMOfflineHeavyIonsPrePOG = cms.Sequence(process.muonMonitors*process.alcaBeamMonitor)


process.hiPixelVertices = cms.Sequence(process.hiPixelClusterVertex*process.hiPixel3ProtoTracks*process.hiPixelMedianVertex*process.hiSelectedProtoTracks*process.hiPixelAdaptiveVertex*process.bestHiVertex)


process.ecal_dqm_source_offline = cms.Sequence(process.eb_dqm_source_offline*process.ee_dqm_source_offline)


process.muonMonitorsAndQualityTests = cms.Sequence(process.muonMonitors*process.muonQualityTests)


process.ecalBarrelTestBeamTasksSequence = cms.Sequence(process.ecalBarrelDefaultTasksSequence*process.ecalBarrelBeamHodoTask*process.ecalBarrelBeamCaloTask)


process.ecalEndcapCosmicTasksSequence = cms.Sequence(process.ecalEndcapDefaultTasksSequence*process.ecalEndcapCosmicTask)


process.seqALCARECODtCalib = cms.Sequence(process.primaryVertexFilter*process.noscraping*process.ALCARECODtCalibHLTFilter*process.DTCalibMuonSelection*process.dt4DSegmentsNoWire)


process.deCsctf = cms.Sequence(process.valCsctfTrackDigis*process.valCsctfDigis*process.muonCscMon)


process.deRpc = cms.Sequence(process.valRpcTriggerDigis)


process.recoAllPFJets = cms.Sequence(process.sisCone5PFJets+process.sisCone7PFJets+process.kt4PFJets+process.kt6PFJets+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets+process.gk5PFJets+process.gk7PFJets+process.ca4PFJets+process.ca6PFJets)


process.seqALCARECOTkAlMinBiasHI = cms.Sequence(process.ALCARECOTkAlMinBiasHIHLT+process.ALCARECOTkAlMinBiasHIDCSFilter+process.ALCARECOTkAlMinBiasHI)


process.ALCARECOSiStripCalZeroBiasDQM = cms.Sequence(process.seqAPVCycleFilter*process.SiStripCalZeroBiasMonitorCluster)


process.ValL1MuTrackFinders = cms.Sequence(process.valCsctfTrackDigis*process.valCsctfDigis*process.valDttfDigis)


process.ecalLocalRecoSequence_nopreshower = cms.Sequence(process.ecalGlobalUncalibRecHit*process.ecalRecHit)


process.ALCARECOMuAlBeamHaloOverlapsDQM = cms.Sequence(process.ALCARECOMuAlBeamHaloOverlapsTrackingDQM+process.ALCARECOMuAlBeamHaloOverlapsHLTDQM)


process.caloRecoNZS = cms.Sequence(process.caloReco+process.hcalLocalRecoSequenceNZS)


process.seqALCARECOTkAlLAS = cms.Sequence(process.TkAlLASsiStripDigis+process.laserAlignmentT0Producer)


process.eleIsolationSequence = cms.Sequence(process.eleIsoDeposits*process.eleIsoFromDeposits)


process.muIsolation_ParamGlobalMuons = cms.Sequence(process.muIsoDeposits_ParamGlobalMuons)


process.ecalEndcapTestBeamTasksSequence = cms.Sequence(process.ecalEndcapDefaultTasksSequence*process.ecalEndcapBeamHodoTask*process.ecalEndcapBeamCaloTask)


process.seqFilters = cms.Sequence(process.seqAPVCycleFilter*process.seqMultiplicityFilter)


process.rpcTier0Source = cms.Sequence(process.rpcdigidqm*process.rpcDcsInfo*process.rpcEventInfo*process.rpcFEDIntegrity*process.rpcefficiency)


process.muoncosmicreco = cms.Sequence(process.muoncosmicreco2legsSTA+process.muoncosmicreco1legSTA)


process.muoncosmichighlevelreco = cms.Sequence((process.muoncosmicreco2legsHighLevel+process.muoncosmicreco1legHighLevel)*process.cosmicsMuonIdSequence)


process.ValL1Emulator = cms.Sequence(process.valEcalTriggerPrimitiveDigis*process.valHcalTriggerPrimitiveDigis*process.valHcalTTPDigis*process.valRctDigis*process.valGctDigis*process.ValL1MuTriggerPrimitives*process.ValL1MuTrackFinders*process.valRpcTriggerDigis*process.valGmtDigis*process.ValL1TechnicalTriggers*process.valGtDigis)


process.ecalBarrelCosmicTasksSequence = cms.Sequence(process.ecalBarrelDefaultTasksSequence*process.ecalBarrelCosmicTask)


process.seqALCARECOTkAlCosmicsCosmicTF0THLT = cms.Sequence(process.ALCARECOTkAlCosmics0THLT+process.seqALCARECOTkAlCosmicsCosmicTF0T)


process.L1HardwareValidation = cms.Sequence(process.deEcal+process.deHcal+process.deRct+process.deGct+process.deDt+process.deDttf+process.deCsc+process.deCsctf+process.deRpc+process.deGmt+process.deGt*process.l1compare)


process.DQMOfflineHeavyIonsPOG = cms.Sequence(process.DQMOfflineHeavyIonsPrePOG*process.DQMMessageLogger)


process.hiEcalClusteringSequence = cms.Sequence(process.islandClusteringSequence*process.hybridClusteringSequence*process.dynamicHybridClusteringSequence*process.multi5x5ClusteringSequence*process.multi5x5PreshowerClusteringSequence*process.preshowerClusteringSequence)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco*process.striptrackerlocalreco)


process.hiRecoAllJets = cms.Sequence(process.caloTowersRec*process.caloTowers*process.iterativeConePu5CaloJets+process.iterativeConePu7CaloJets+process.ic5CaloJets+process.ic7CaloJets+process.akPu5CaloJets+process.akPu7CaloJets+process.ak5CaloJets+process.ak7CaloJets+process.ktPu4CaloJets+process.ktPu6CaloJets+process.kt4CaloJets+process.kt6CaloJets)


process.heavyIonTracking = cms.Sequence(process.hiPixelVertices*process.hiPrimSeeds*process.hiPrimTrackCandidates*process.hiGlobalPrimTracks*process.hiTracksWithQuality)


process.muonreco = cms.Sequence(process.muontracking*process.muonIdProducerSequence)


process.hiCaloIsolation = cms.Sequence(process.hiEcalIsolation+process.hiHcalIsolation)


process.muontracking_with_TeVRefinement = cms.Sequence(process.muontracking*process.tevMuons)


process.hcalOfflineDQMSource = cms.Sequence(process.hcalMonitor+process.zdcMonitor+process.hcalMonitorTasksOfflineSequence+process.dqmInfoHcal)


process.hiEcalClusters = cms.Sequence(process.hiEcalClusteringSequence)


process.seqALCARECOTkAlCosmicsCTF0THLT = cms.Sequence(process.ALCARECOTkAlCosmics0THLT+process.seqALCARECOTkAlCosmicsCTF0T)


process.pfClusteringHCAL = cms.Sequence(process.particleFlowRecHitHCAL*process.pfClusteringHCALall)


process.L1HwVal = cms.Sequence(process.L1HardwareValidation)


process.gamIsolationSequence = cms.Sequence(process.gamIsoDeposits*process.gamIsoFromDeposits)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.muonrecowith_TeVRefinemen = cms.Sequence(process.muontracking_with_TeVRefinement*process.muonIdProducerSequence)


process.DQMOfflineHeavyIonsPreDPG = cms.Sequence(process.dqmDcsInfo*process.ecal_dqm_source_offline*process.hcalOfflineDQMSource*process.SiStripDQMTier0_hi*process.siPixelOfflineDQM_heavyions_source*process.dtSources*process.rpcTier0Source*process.cscSources*process.es_dqm_source_offline)


process.hiCaloIsolationAll = cms.Sequence(process.hiCaloIsolation+process.hiCaloIsolationBckSubtracted)


process.DQMOfflineHeavyIons = cms.Sequence(process.DQMOfflineHeavyIonsPreDPG*process.DQMOfflineHeavyIonsPrePOG*process.DQMMessageLogger)


process.hiEgammaIsolationSequenceAll = cms.Sequence(process.hiCaloIsolationAll+process.hiTrackerIsolation)


process.hiEgammaIsolationSequence = cms.Sequence(process.hiCaloIsolationBckSubtracted+process.hiTrackerIsolation+process.photonIDSequence+process.reducedRecHitsSequence*process.gamIsolationSequence)


process.DQMOfflineHeavyIonsDPG = cms.Sequence(process.DQMOfflineHeavyIonsPreDPG*process.DQMMessageLogger)


process.alcaElectronIsolationSequence = cms.Sequence(process.eleIsolationSequence)


process.particleFlowCluster = cms.Sequence(process.towerMakerPF*process.pfClusteringECAL*process.pfClusteringHCAL*process.pfClusteringPS)


process.seqALCARECOEcalCalElectron = cms.Sequence(process.isolElectronewkHLTFilter*process.superClusterMerger*process.superClusterCands*process.goodSuperClusters*process.goodSuperClusterFilter*process.goodSuperClusters2*process.goodSuperClusterFilter2*process.goodElectrons*process.goodElectronFilter*process.goodElectrons2*process.goodElectronFilter2*process.alcaElectronIsolationSequence*process.seqALCARECOEcalCalElectronRECO)


process.hiEcalClustersIsolation = cms.Sequence(process.hiEgammaSequence*process.hiEgammaIsolationSequence)


process.muonReco = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.lumiProducer)


process.localReco_HcalNZS = cms.Sequence(process.offlineBeamSpot*process.muonReco*process.caloRecoNZS)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.muonrecoComplete_minus_SET_minus_muIDmaps = cms.Sequence(process.muonrecowith_TeVRefinemen*process.muIsolation)


process.muonreco_plus_isolation_plus_SET = cms.Sequence(process.muonrecowith_TeVRefinemen*process.muonreco_with_SET*process.muIsolation)


process.HiParticleFlowReco = cms.Sequence(process.particleFlowCluster*process.trackerDrivenElectronSeeds*process.particleFlowReco*process.recoPFJets)


process.muonrecoComplete = cms.Sequence(process.muonreco_plus_isolation_plus_SET*process.muonSelectionTypeSequence)


process.muonrecoComplete_minus_muIDmaps = cms.Sequence(process.muonreco_plus_isolation_plus_SET)


process.muonreco_plus_isolation = cms.Sequence(process.muonrecowith_TeVRefinemen*process.muIsolation)


process.muonreco_plus_isolation_plus_SET_plus_muIDmaps = cms.Sequence(process.muonreco_plus_isolation_plus_SET*process.muonSelectionTypeSequence)


process.localReco = cms.Sequence(process.offlineBeamSpot*process.muonReco*process.caloReco)


process.muonRecoPbPb = cms.Sequence(process.muonreco_plus_isolation)


process.globalRecoPbPb = cms.Sequence(process.heavyIonTracking*process.hiEcalClusters*process.hiRecoJets*process.muonRecoPbPb*process.hiEgammaSequence*process.hiCentrality*process.hiEvtPlane*process.hcalnoise)


process.reconstruct_PbPb = cms.Sequence(process.localReco*process.globalRecoPbPb)


process.reconstructionHeavyIons_HcalNZS = cms.Sequence(process.localReco_HcalNZS*process.globalRecoPbPb)


process.reconstructionHeavyIons_HcalNZS_withPF = cms.Sequence(process.reconstructionHeavyIons_HcalNZS*process.HiParticleFlowReco)


process.reconstructionHeavyIons = cms.Sequence(process.reconstruct_PbPb)


process.reconstructionHeavyIons_withPF = cms.Sequence(process.reconstructionHeavyIons*process.HiParticleFlowReco)


process.raw2digi_step = cms.Path(process.RawToDigi)


process.L1Reco_step = cms.Path(process.L1Reco)


process.reconstruction_step = cms.Path(process.reconstructionHeavyIons)


process.pathALCARECOHcalCalHOCosmics = cms.Path(process.seqALCARECOHcalCalHOCosmics)


process.pathALCARECOTkAlZMuMu = cms.Path(process.seqALCARECOTkAlZMuMu*process.ALCARECOTkAlZMuMuDQM)


process.pathALCARECOTkAlCosmicsCTF0T = cms.Path(process.seqALCARECOTkAlCosmicsCTF0T*process.ALCARECOTkAlCosmicsCTF0TDQM)


process.pathALCARECOMuAlBeamHalo = cms.Path(process.seqALCARECOMuAlBeamHalo*process.ALCARECOMuAlBeamHaloDQM)


process.pathALCARECOTkAlCosmicsCTF = cms.Path(process.seqALCARECOTkAlCosmicsCTF*process.ALCARECOTkAlCosmicsCTFDQM)


process.pathALCARECOTkAlMinBiasHI = cms.Path(process.seqALCARECOTkAlMinBiasHI*process.ALCARECOTkAlMinBiasHIDQM)


process.pathALCARECOMuAlGlobalCosmicsInCollisions = cms.Path(process.seqALCARECOMuAlGlobalCosmicsInCollisions*process.ALCARECOMuAlGlobalCosmicsInCollisionsDQM)


process.pathALCARECOHcalCalHO = cms.Path(process.seqALCARECOHcalCalHO*process.ALCARECOHcalCalHODQM)


process.pathALCARECOTkAlCosmicsCTFHLT = cms.Path(process.seqALCARECOTkAlCosmicsCTFHLT*process.ALCARECOTkAlCosmicsCTFDQM)


process.pathALCARECODtCalib = cms.Path(process.seqALCARECODtCalib*process.ALCARECODTCalibSynchDQM)


process.pathALCARECOTkAlCosmicsCosmicTFHLT = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTFHLT*process.ALCARECOTkAlCosmicsCosmicTFDQM)


process.pathALCARECOHcalCalMinBias = cms.Path(process.seqALCARECOHcalCalMinBias*process.ALCARECOHcalCalPhisymDQM)


process.pathALCARECOTkAlMuonIsolated = cms.Path(process.seqALCARECOTkAlMuonIsolated*process.ALCARECOTkAlMuonIsolatedDQM)


process.pathALCARECOTkAlUpsilonMuMu = cms.Path(process.seqALCARECOTkAlUpsilonMuMu*process.ALCARECOTkAlUpsilonMuMuDQM)


process.pathALCARECOHcalCalDijets = cms.Path(process.seqALCARECOHcalCalDijets*process.ALCARECOHcalCalDiJetsDQM)


process.pathALCARECOMuAlZMuMu = cms.Path(process.seqALCARECOMuAlZMuMu*process.ALCARECOMuAlZMuMuDQM)


process.pathALCARECOEcalCalPi0Calib = cms.Path(process.seqALCARECOEcalCalPi0Calib*process.ALCARECOEcalCalPi0CalibDQM)


process.pathALCARECOTkAlBeamHalo = cms.Path(process.seqALCARECOTkAlBeamHalo*process.ALCARECOTkAlBeamHaloDQM)


process.pathALCARECOSiPixelLorentzAngle = cms.Path(process.seqALCARECOSiPixelLorentzAngle)


process.pathALCARECOPromptCalibProd = cms.Path(process.seqALCARECOPromptCalibProd)


process.pathALCARECOTkAlCosmicsCosmicTF0T = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF0T*process.ALCARECOTkAlCosmicsCosmicTF0TDQM)


process.pathALCARECOEcalCalElectron = cms.Path(process.seqALCARECOEcalCalElectron*process.ALCARECOEcalCalElectronCalibDQM)


process.pathALCARECOTkAlCosmicsCTF0THLT = cms.Path(process.seqALCARECOTkAlCosmicsCTF0THLT*process.ALCARECOTkAlCosmicsCTF0TDQM)


process.pathALCARECOMuAlCalIsolatedMu = cms.Path(process.seqALCARECOMuAlCalIsolatedMu*process.ALCARECOMuAlCalIsolatedMuDQM*process.ALCARECODTCalibrationDQM)


process.pathALCARECOSiStripCalZeroBias = cms.Path(process.seqALCARECOSiStripCalZeroBias*process.ALCARECOSiStripCalZeroBiasDQM)


process.pathALCARECOEcalCalEtaCalib = cms.Path(process.seqALCARECOEcalCalEtaCalib*process.ALCARECOEcalCalEtaCalibDQM)


process.pathALCARECOHcalCalIsoTrk = cms.Path(process.seqALCARECOHcalCalIsoTrk*process.ALCARECOHcalCalIsoTrackDQM)


process.pathALCARECOSiStripCalMinBias = cms.Path(process.seqALCARECOSiStripCalMinBias*process.ALCARECOSiStripCalMinBiasDQM)


process.pathALCARECODQM = cms.Path(process.MEtoEDMConverter)


process.pathALCARECOTkAlLAS = cms.Path(process.seqALCARECOTkAlLAS*process.ALCARECOTkAlLASDQM)


process.pathALCARECORpcCalHLT = cms.Path(process.seqALCARECORpcCalHLT)


process.pathALCARECOHcalCalGammaJet = cms.Path(process.seqALCARECOHcalCalGammaJet)


process.pathALCARECOMuAlBeamHaloOverlaps = cms.Path(process.seqALCARECOMuAlBeamHaloOverlaps*process.ALCARECOMuAlBeamHaloOverlapsDQM)


process.pathALCARECOTkAlCosmicsCosmicTF0THLT = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF0THLT*process.ALCARECOTkAlCosmicsCosmicTF0TDQM)


process.pathALCARECOTkAlCosmicsInCollisions = cms.Path(process.seqALCARECOTkAlCosmicsInCollisions*process.ALCARECOTkAlCosmicsInCollisionsDQM)


process.pathALCARECOHcalCalNoise = cms.Path(process.seqALCARECOHcalCalNoise)


process.pathALCARECOMuAlOverlaps = cms.Path(process.seqALCARECOMuAlOverlaps*process.ALCARECOMuAlOverlapsDQM)


process.pathALCARECOTkAlCosmicsCosmicTF = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF*process.ALCARECOTkAlCosmicsCosmicTFDQM)


process.pathALCARECOEcalCalPhiSym = cms.Path(process.seqALCARECOEcalCalPhiSym*process.ALCARECOEcalCalPhisymDQM)


process.pathALCARECOMuAlGlobalCosmics = cms.Path(process.seqALCARECOMuAlGlobalCosmics*process.ALCARECOMuAlGlobalCosmicsDQM)


process.pathALCARECOTkAlJpsiMuMu = cms.Path(process.seqALCARECOTkAlJpsiMuMu*process.ALCARECOTkAlJpsiMuMuDQM)


process.l1hwval_step = cms.Path(process.L1HwVal)


process.dqmoffline_step = cms.Path(process.DQMOfflineHeavyIons)


process.endjob_step = cms.Path(process.endOfProcess)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore")


process.DTDataIntegrityTask = cms.Service("DTDataIntegrityTask",
    processingMode = cms.untracked.string('Offline'),
    getSCInfo = cms.untracked.bool(True)
)


process.MessageLogger = cms.Service("MessageLogger",
    suppressInfo = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    suppressDebug = cms.untracked.vstring(),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    cerr_stats = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        output = cms.untracked.string('cerr'),
        optionalPSet = cms.untracked.bool(True)
    ),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    cerr = cms.untracked.PSet(
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        noTimeStamps = cms.untracked.bool(False),
        FwkReport = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        threshold = cms.untracked.string('INFO'),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        FwkSummary = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    FrameworkJobReport = cms.untracked.PSet(
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        )
    ),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    debugModules = cms.untracked.vstring(),
    infos = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        placeholder = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport')
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    hiSignalG4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simCastorDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(12345678),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    generator = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonRPCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignal = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simEcalUnsuppressedDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    saveFileName = cms.untracked.string(''),
    simSiStripDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    mix = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simHcalUnsuppressedDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(11223344),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    LHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(87654321),
        engineName = cms.untracked.string('TRandom3')
    ),
    simMuonCSCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(11223344),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    mixData = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    VtxSmeared = cms.PSet(
        initialSeed = cms.untracked.uint32(98765432),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    g4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonDTDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simSiPixelDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignalLHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(88776655),
        engineName = cms.untracked.string('TRandom3')
    )
)


process.SiStripDetInfoFileReader = cms.Service("SiStripDetInfoFileReader")


process.TkDetMap = cms.Service("TkDetMap")


process.UpdaterService = cms.Service("UpdaterService")


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    PropagationDirection = cms.string('anyDirection')
)


process.AutoMagneticFieldESProducer = cms.ESProducer("AutoMagneticFieldESProducer",
    valueOverride = cms.int32(-1),
    nominalCurrents = cms.untracked.vint32(-1, 0, 9558, 14416, 16819, 
        18268, 19262),
    mapLabels = cms.untracked.vstring('090322_3_8t', 
        '0t', 
        '071212_2t', 
        '071212_3t', 
        '071212_3_5t', 
        '090322_3_8t', 
        '071212_4t'),
    label = cms.untracked.string('')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string(''),
    useDDD = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string(''),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(True)
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz')
)


process.CaloTowerGeometryFromDBEP = cms.ESProducer("CaloTowerGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorGeometryFromDBEP = cms.ESProducer("CastorGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuRefit')
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader')
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForRefit')
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2')
)


process.CkfTrajectoryBuilder = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('Chi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(False),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(30.0)
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    MaxComponents = cms.int32(4),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D')
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter')
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(False),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryFromDBEP = cms.ESProducer("EcalBarrelGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryFromDBEP = cms.ESProducer("EcalEndcapGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryFromDBEP = cms.ESProducer("EcalPreshowerGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator'),
    Mass = cms.double(0.000511),
    BetheHeitlerCorrection = cms.int32(2)
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(1000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2STA')
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(4),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GroupedCkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GroupedCkfTrajectoryBuilderP5 = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilterP5'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilderP5'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ErrorRescaling = cms.double(100.0),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId')
)


process.HcalAlignmentEP = cms.ESProducer("HcalAlignmentEP")


process.HcalGeometryFromDBEP = cms.ESProducer("HcalGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    read_FG_LUTs = cms.bool(False),
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    MaskBit = cms.int32(32768),
    read_Ascii_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    LUTGenerationMode = cms.bool(False),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat')
)


process.HcalTopologyIdealEP = cms.ESProducer("HcalTopologyIdealEP")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterSTA'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmootherSTA'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator')
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.L1DTConfig = cms.ESProducer("DTConfigTrivialProducer",
    DTTPGMap = cms.untracked.PSet(
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18)
    ),
    DTTPGParameters = cms.PSet(
        SectCollParameters = cms.PSet(
            SCCSP5 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCECF4 = cms.bool(False),
            SCCSP1 = cms.int32(0),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCCSP4 = cms.int32(0),
            SCECF1 = cms.bool(False),
            Debug = cms.untracked.bool(False)
        ),
        Debug = cms.untracked.bool(False),
        TracoLutsFromDB = cms.bool(False),
        TUParameters = cms.PSet(
            TracoParameters = cms.PSet(
                SPRGCOMP = cms.int32(2),
                FHTMSK = cms.int32(0),
                DD = cms.int32(18),
                SSLMSK = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                Debug = cms.untracked.int32(0),
                FSLMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SHTMSK = cms.int32(0),
                TRGENB3 = cms.int32(1),
                SHISM = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                FLTMSK = cms.int32(1),
                LTS = cms.int32(0),
                SLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                TRGENB9 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                FHTPRF = cms.int32(1),
                LTF = cms.int32(0),
                TRGENB1 = cms.int32(1),
                TRGENB0 = cms.int32(1),
                FHISM = cms.int32(0),
                TRGENB2 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                REUSEO = cms.int32(1),
                REUSEI = cms.int32(1),
                BTIC = cms.int32(32)
            ),
            TSPhiParameters = cms.PSet(
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSTREN9 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN0 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSMCCE2 = cms.bool(False),
                TSTREN19 = cms.bool(True),
                TSMCCE1 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSSMSK2 = cms.int32(312),
                TSTREN10 = cms.bool(True),
                TSMMSK2 = cms.int32(312),
                TSMMSK1 = cms.int32(312),
                TSMHSP = cms.int32(1),
                TSSNOE2 = cms.bool(False),
                TSSNOE1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSCCEC = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMHTE2 = cms.bool(False),
                Debug = cms.untracked.bool(False),
                TSSHTE2 = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSSHTE1 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSSNOEC = cms.bool(False),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSSHTEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSMHTEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSSGS2 = cms.int32(1),
                TSMNOEC = cms.bool(False),
                TSSGS1 = cms.int32(1),
                TSTREN18 = cms.bool(True),
                TSMHTE1 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            DIGIOFFSET = cms.int32(500),
            SINCROTIME = cms.int32(0),
            BtiParameters = cms.PSet(
                KACCTHETA = cms.int32(1),
                WEN8 = cms.int32(1),
                ACH = cms.int32(1),
                DEAD = cms.int32(31),
                ACL = cms.int32(2),
                PTMS20 = cms.int32(1),
                Debug = cms.untracked.int32(0),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                SET = cms.int32(7),
                RON = cms.bool(True),
                WEN2 = cms.int32(1),
                LL = cms.int32(2),
                LH = cms.int32(21),
                WEN3 = cms.int32(1),
                RE43 = cms.int32(2),
                WEN0 = cms.int32(1),
                RL = cms.int32(42),
                WEN1 = cms.int32(1),
                RH = cms.int32(61),
                LTS = cms.int32(3),
                CH = cms.int32(41),
                CL = cms.int32(22),
                PTMS15 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS10 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS12 = cms.int32(1),
                XON = cms.bool(False),
                WEN7 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS31 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS5 = cms.int32(1),
                PTMS4 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS1 = cms.int32(0),
                PTMS0 = cms.int32(0),
                PTMS3 = cms.int32(0),
                WEN6 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS9 = cms.int32(1),
                PTMS8 = cms.int32(1),
                ST43 = cms.int32(42),
                AC2 = cms.int32(3),
                AC1 = cms.int32(0),
                KMAX = cms.int32(64),
                PTMS21 = cms.int32(1)
            ),
            LutParameters = cms.PSet(
                WHEEL = cms.untracked.int32(-1),
                Debug = cms.untracked.bool(False),
                BTIC = cms.untracked.int32(31),
                XCN = cms.untracked.double(80.2),
                D = cms.untracked.double(66.5)
            )
        ),
        UseBtiAcceptParam = cms.bool(False)
    ),
    UseBtiAcceptParam = cms.bool(False),
    TracoLutsFromDB = cms.bool(False)
)


process.MRHFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('MRHFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('MRHSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('MRHFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.MRHTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('MRHFitter'),
    Estimator = cms.string('MRHChi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.MRHTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('MRHSmoother'),
    Estimator = cms.string('MRHChi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.139),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    inactivePixelDetectorLabels = cms.VInputTag(),
    PixelCPE = cms.string('PixelCPEGeneric'),
    stripLazyGetterProducer = cms.string(''),
    OnDemand = cms.bool(False),
    Regional = cms.bool(False),
    UsePixelModuleQualityDB = cms.bool(True),
    pixelClusterProducer = cms.string('siPixelClusters'),
    switchOffPixelsIfEmpty = cms.bool(True),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    MaskBadAPVFibers = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    UseStripAPVFiberQualityDB = cms.bool(True),
    stripClusterProducer = cms.string('siStripClusters'),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    SiStripQualityLabel = cms.string(''),
    badStripCuts = cms.PSet(
        TOB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TID = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TEC = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TIB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        )
    ),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    UseStripModuleQualityDB = cms.bool(True)
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.139),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    EdgeClusterErrorX = cms.double(50.0),
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    TruncatePixelCharge = cms.bool(True),
    size_cutY = cms.double(3.0),
    size_cutX = cms.double(3.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    IrradiationBiasCorrection = cms.bool(False),
    TanLorentzAnglePerTesla = cms.double(0.106),
    inflate_errors = cms.bool(False),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_highY = cms.double(1.0),
    ClusterProbComputationFlag = cms.int32(0),
    EdgeClusterErrorY = cms.double(85.0),
    ComponentName = cms.string('PixelCPEGeneric'),
    eff_charge_cut_lowY = cms.double(0.0),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    Alpha2Order = cms.bool(True)
)


process.PixelCPEInitialESProducer = cms.ESProducer("PixelCPEInitialESProducer",
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEInitial'),
    Alpha2Order = cms.bool(True),
    PixelErrorParametrization = cms.string('NOTcmsim')
)


process.PixelCPEParmErrorESProducer = cms.ESProducer("PixelCPEParmErrorESProducer",
    ComponentName = cms.string('PixelCPEfromTrackAngle'),
    UseNewParametrization = cms.bool(True),
    UseSigma = cms.bool(True),
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    PixelErrorParametrization = cms.string('NOTcmsim')
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerEnd = cms.int32(16),
    towerBeg = cms.int32(0)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    useDDD = cms.untracked.bool(False),
    compatibiltyWith11 = cms.untracked.bool(True)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0)
)


process.SlaveField0 = cms.ESProducer("UniformMagneticFieldESProducer",
    ZFieldInTesla = cms.double(0.0),
    label = cms.untracked.string('slave_0')
)


process.SlaveField20 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('2_0T')
    ),
    label = cms.untracked.string('slave_20')
)


process.SlaveField30 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_0T')
    ),
    label = cms.untracked.string('slave_30')
)


process.SlaveField35 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_5T')
    ),
    label = cms.untracked.string('slave_35')
)


process.SlaveField38 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_8T')
    ),
    label = cms.untracked.string('slave_38')
)


process.SlaveField40 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('4_0T')
    ),
    label = cms.untracked.string('slave_40')
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagator')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAny')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRK')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorRK')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorRKOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    endcapShiftInZNeg = cms.double(0.0),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE')
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle')
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    ComponentName = cms.string('WithAngleAndTemplate')
)


process.TrackerDigiGeometryESModule = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(False),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.TrackerGeometricDetESModule = cms.ESProducer("TrackerGeometricDetESModule",
    fromDDD = cms.bool(False)
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VBF0 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('0t'),
    version = cms.string('grid_1103l_071212_2t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_0'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF20 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_2t'),
    version = cms.string('grid_1103l_071212_2t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_20'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF30 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_3t'),
    version = cms.string('grid_1103l_071212_3t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_30'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF35 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_3_5t'),
    version = cms.string('grid_1103l_071212_3_5t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_35'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF38 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    overrideMasterSector = cms.bool(False),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991),
    label = cms.untracked.string('090322_3_8t'),
    version = cms.string('grid_1103l_090322_3_8t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_38'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF40 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_4t'),
    version = cms.string('grid_1103l_071212_4t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_40'),
    cacheLastVolume = cms.untracked.bool(True)
)


process.XMLFromDBSource = cms.ESProducer("XMLIdealGeometryESProducer",
    rootDDName = cms.string('cms:OCMS'),
    label = cms.string('Extended')
)


process.ZdcGeometryFromDBEP = cms.ESProducer("ZdcGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool')
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.ckfBaseInOutTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minPt = cms.double(0.9),
        minHitsMinPt = cms.int32(3),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseInOutTrajectoryFilter')
)


process.ckfBaseTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minPt = cms.double(0.9),
        minHitsMinPt = cms.int32(3),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(6)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilter')
)


process.ckfBaseTrajectoryFilterP5 = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minPt = cms.double(0.5),
        minHitsMinPt = cms.int32(3),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(4),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(3),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilterP5')
)


process.compositeTrajectoryFilterESProducer = cms.ESProducer("CompositeTrajectoryFilterESProducer",
    filterNames = cms.vstring(),
    ComponentName = cms.string('compositeTrajectoryFilter')
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    noPXB = cms.bool(False),
    noTID = cms.bool(False),
    noPXF = cms.bool(False),
    noTIB = cms.bool(False),
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noTEC = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        RecHitFlags = cms.vstring(''),
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0)
    ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(5)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'HFS8S1Ratio', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HFLongShort'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20)
        )),
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead')
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    file = cms.untracked.string(''),
    dump = cms.untracked.vstring('')
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    useDDD = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string('fakeForIdeal'),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(False)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(False),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(False),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.l1GtTriggerMaskTechTrig = cms.ESProducer("L1GtTriggerMaskTechTrigTrivialProducer",
    TriggerMask = cms.vuint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0)
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    includeBadChambers = cms.bool(False),
    etaBinSize = cms.double(0.125),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool')
)


process.pixellayertriplets = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('PixelLayerTriplets')
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    printDebug = cms.untracked.bool(False),
    appendToDataLabel = cms.string(''),
    APVGain = cms.VPSet(cms.PSet(
        Record = cms.string('SiStripApvGainRcd'),
        NormalizationFactor = cms.untracked.double(1.0),
        Label = cms.untracked.string('')
    ), 
        cms.PSet(
            Record = cms.string('SiStripApvGain2Rcd'),
            NormalizationFactor = cms.untracked.double(1.0),
            Label = cms.untracked.string('')
        )),
    AutomaticNormalization = cms.bool(False)
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    appendToDataLabel = cms.string(''),
    PrintDebugOutput = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        ))
)


process.siStripQualityESProducerUnbiased = cms.ESProducer("SiStripQualityESProducer",
    appendToDataLabel = cms.string('unbiased'),
    PrintDebugOutput = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetCablingRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ))
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    ComponentName = cms.string('PixelCPETemplateReco'),
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    speed = cms.int32(-2),
    UseClusterSplitter = cms.bool(False)
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.19),
    allowSharedFirstHit = cms.bool(True)
)


process.trajectoryCleanerBySharedSeeds = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentType = cms.string('TrajectoryCleanerBySharedSeeds'),
    ComponentName = cms.string('TrajectoryCleanerBySharedSeeds')
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('Fake'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('Fake'),
    ComponentName = cms.string('WithoutRefit')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('WithTrackAngle')
)


process.CaloTPGTranscoder = cms.ESSource("CaloTPGTranscoderULUTs",
    read_Ascii_Compression_LUTs = cms.bool(False),
    LUTfactor = cms.vint32(1, 2, 5, 0),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    read_Ascii_RCT_LUTs = cms.bool(False),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    RCTLSB = cms.double(0.25),
    nominal_gain = cms.double(0.177),
    ZS = cms.vint32(4, 2, 1, 0)
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string('.'),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        connectionRetrialPeriod = cms.untracked.int32(10)
    ),
    BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService'),
    connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
    globaltag = cms.string('GR10_P_V12::All')
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.L1GtTriggerMaskTechTrigRcdSource = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1GtTriggerMaskTechTrigRcd'),
    firstValid = cms.vuint32(1)
)


process.eegeom = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd'),
    firstValid = cms.vuint32(1)
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    toGet = cms.untracked.vstring('GainWidths')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd'),
    firstValid = cms.vuint32(1)
)


process.magfield = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMagneticField.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_1103l.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldParameters_07_2pi.xml', 
        'Geometry/CMSCommonData/data/materials.xml'),
    rootNodeName = cms.string('cmsMagneticField:MAGF')
)


process.rcdsrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('DTConfigManagerRcd'),
    firstValid = cms.vuint32(1)
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd'),
    firstValid = cms.vuint32(1)
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd'),
    firstValid = cms.vuint32(1)
)


process.prefer("magfield")

process.ALCARECOEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'keep edmTriggerResults_*_*_*', 'keep *_ALCARECOTkAlZMuMu_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 'keep siStripDigis_DetIdCollection_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep Si*Cluster*_si*Clusters_*_*', 'keep recoMuons_muons1Leg_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlCosmicsCTF_*_*', 'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 'keep siStripDigis_DetIdCollection_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep Si*Cluster*_si*Clusters_*_*', 'keep recoMuons_muons1Leg_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlCosmicsCTF_*_*', 'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 'keep siStripDigis_DetIdCollection_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep Si*Cluster*_si*Clusters_*_*', 'keep recoMuons_muons1Leg_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlCosmics*0T_*_*', 'keep siStripDigis_DetIdCollection_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep Si*Cluster*_si*Clusters_*_*', 'keep recoMuons_muons1Leg_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlCosmics*0T_*_*', 'keep siStripDigis_DetIdCollection_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep Si*Cluster*_si*Clusters_*_*', 'keep recoMuons_muons1Leg_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_laserAlignmentT0Producer_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlMuonIsolated_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlJpsiMuMu_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlUpsilonMuMu_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlMinBias_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_offlinePrimaryVertices_*_*', 'keep *_offlineBeamSpot_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOTkAlBeamHalo_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOSiStripCalZeroBias_*_*', 'keep *_calZeroBiasClusters_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep *_TriggerResults_*_*', 'keep *_ALCARECOSiStripCalMinBias_*_*', 'keep *_siStripClusters_*_*', 'keep *_siPixelClusters_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEB_*', 'keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEE_*', 'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep recoGsfElectronCores_*_*_*', 'keep recoSuperClusters_*_*_*', 'keep *_electronGsfTracks_*_*', 'keep  *_gsfElectrons_*_*', 'keep  *_alCaIsolatedElectrons_*_*', 'keep recoCaloMETs_met_*_*', 'keep edmTriggerResults_TriggerResults__*', 'keep edmHepMCProduct_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_DiJProd_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_GammaJetProd_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_IsoProd_*_*', 'keep *_offlinePrimaryVertices_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_IsoProd_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_gtDigisAlCaMB_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 'keep HBHERecHitsSorted_hbherecoNoise_*_*', 'keep HORecHitsSorted_horecoNoise_*_*', 'keep HFRecHitsSorted_hfrecoNoise_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_hoCalibProducer_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep HOCalibVariabless_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_HcalNoiseProd_*_*', 'keep edmTriggerResults_*_*_HLT', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlStandAloneCosmics_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_muonDTDigis_*_*', 'keep *_muonRPCDigis_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt2DSegments_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_muonDTDigis_*_*', 'keep *_muonRPCDigis_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt2DSegments_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlGlobalCosmics_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_muonDTDigis_*_*', 'keep *_muonRPCDigis_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt2DSegments_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlCalIsolatedMu_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_muonDTDigis_*_*', 'keep *_muonRPCDigis_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt2DSegments_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlZMuMu_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_muonDTDigis_*_*', 'keep *_muonRPCDigis_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt2DSegments_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlOverlaps_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_ALCARECOMuAlBeamHalo_*_*', 'keep *_muonCSCDigis_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep DcsStatuss_scalersRawToDigi_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_muonDTDigis_*_*', 'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*')+cms.untracked.vstring('keep *_dt4DSegments_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 'keep recoMuons_muonsNoRPC_*_*', 'keep L1MuRegionalCands_*_RPCb_*', 'keep L1MuRegionalCands_*_RPCf_*', 'keep L1MuGMTCands_*_*_*', 'keep L1MuGMTReadoutCollection_*_*_*', 'keep *_dt4DSegments_*_*', 'keep *_dt4DSegmentsNoWire_*_*', 'keep *_muonDTDigis_*_*', 'keep *_dttfDigis_*_*', 'keep *_gtDigis_*_*', 'keep *_TriggerResults_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep *_MEtoEDMConverter_*_*', 'drop *_MEtoEDMConverter_*_*'))
)

process.AODEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_castorreco_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridBarrelSuperClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_ak5TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak5JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak5JetExtender_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_ak5JetID_*_*', 
        'keep *_ak7JetID_*_*', 
        'keep *_kt4JetID_*_*', 
        'keep *_kt6JetID_*_*', 
        'keep *_ak7BasicJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep recoCaloMETs_met_*_*', 
        'keep recoCaloMETs_metNoHF_*_*', 
        'keep recoCaloMETs_corMetGlobalMuons_*_*', 
        'keep recoMETs_htMetAK5_*_*', 
        'keep recoMETs_htMetAK7_*_*', 
        'keep recoMETs_htMetIC5_*_*', 
        'keep recoMETs_htMetKT4_*_*', 
        'keep recoMETs_htMetKT6_*_*', 
        'keep recoMETs_tcMet_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 
        'keep uintedmValueMap_cosmicsVeto_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedSecondaryVertexMVABJetTags_*_*', 
        'keep *_softElectronBJetTags_*_*', 
        'keep *_softElectronByIP3dBJetTags_*_*', 
        'keep *_softElectronByPtBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfRecoTauTagInfoProducer_*_*', 
        'keep *_hpsPFTauProducer*_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_shrinkingConePFTauProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 
        'keep *_shrinkingConePFTauDiscrimination*_*_*', 
        'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_caloRecoTauTagInfoProducer_*_*', 
        'keep recoCaloTaus_caloRecoTauProducer*_*_*', 
        'keep *_caloRecoTauDiscrimination*_*_*', 
        'keep  *_offlinePrimaryVertices_*_*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_trackerOnlyConversions_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep recoTracks_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*')
)

process.AODSIMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_castorreco_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridBarrelSuperClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_ak5TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak5JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak5JetExtender_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_ak5JetID_*_*', 
        'keep *_ak7JetID_*_*', 
        'keep *_kt4JetID_*_*', 
        'keep *_kt6JetID_*_*', 
        'keep *_ak7BasicJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep recoCaloMETs_met_*_*', 
        'keep recoCaloMETs_metNoHF_*_*', 
        'keep recoCaloMETs_corMetGlobalMuons_*_*', 
        'keep recoMETs_htMetAK5_*_*', 
        'keep recoMETs_htMetAK7_*_*', 
        'keep recoMETs_htMetIC5_*_*', 
        'keep recoMETs_htMetKT4_*_*', 
        'keep recoMETs_htMetKT6_*_*', 
        'keep recoMETs_tcMet_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 
        'keep uintedmValueMap_cosmicsVeto_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedSecondaryVertexMVABJetTags_*_*', 
        'keep *_softElectronBJetTags_*_*', 
        'keep *_softElectronByIP3dBJetTags_*_*', 
        'keep *_softElectronByPtBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfRecoTauTagInfoProducer_*_*', 
        'keep *_hpsPFTauProducer*_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_shrinkingConePFTauProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 
        'keep *_shrinkingConePFTauDiscrimination*_*_*', 
        'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_caloRecoTauTagInfoProducer_*_*', 
        'keep recoCaloTaus_caloRecoTauProducer*_*_*', 
        'keep *_caloRecoTauDiscrimination*_*_*', 
        'keep  *_offlinePrimaryVertices_*_*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_trackerOnlyConversions_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_kt4GenJets_*_*', 
        'keep *_kt6GenJets_*_*', 
        'keep *_ak5GenJets_*_*', 
        'keep *_ak7GenJets_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep recoTracks_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.AnomalousCellParameters = cms.PSet(
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        KACCTHETA = cms.int32(1),
        WEN8 = cms.int32(1),
        ACH = cms.int32(1),
        DEAD = cms.int32(31),
        ACL = cms.int32(2),
        PTMS20 = cms.int32(1),
        Debug = cms.untracked.int32(0),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        SET = cms.int32(7),
        RON = cms.bool(True),
        WEN2 = cms.int32(1),
        LL = cms.int32(2),
        LH = cms.int32(21),
        WEN3 = cms.int32(1),
        RE43 = cms.int32(2),
        WEN0 = cms.int32(1),
        RL = cms.int32(42),
        WEN1 = cms.int32(1),
        RH = cms.int32(61),
        LTS = cms.int32(3),
        CH = cms.int32(41),
        CL = cms.int32(22),
        PTMS15 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS10 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS12 = cms.int32(1),
        XON = cms.bool(False),
        WEN7 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS31 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS5 = cms.int32(1),
        PTMS4 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS1 = cms.int32(0),
        PTMS0 = cms.int32(0),
        PTMS3 = cms.int32(0),
        WEN6 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS9 = cms.int32(1),
        PTMS8 = cms.int32(1),
        ST43 = cms.int32(42),
        AC2 = cms.int32(3),
        AC1 = cms.int32(0),
        KMAX = cms.int32(64),
        PTMS21 = cms.int32(1)
    )
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3)
)

process.CSCSegAlgoDF = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoDF'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1),
    algo_psets = cms.VPSet(cms.PSet(
        tanThetaMax = cms.double(1.2),
        maxRatioResidualPrune = cms.double(3.0),
        dPhiFineMax = cms.double(0.025),
        tanPhiMax = cms.double(0.5),
        dXclusBoxMax = cms.double(8.0),
        preClustering = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        minHitsPerSegment = cms.int32(3),
        minHitsForPreClustering = cms.int32(10),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        nHitsPerClusterIsShower = cms.int32(20),
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            tanThetaMax = cms.double(2.0),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.8),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(10),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(12.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(12.0)
        ), 
        cms.PSet(
            tanThetaMax = cms.double(1.2),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.5),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(30),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoSK = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoSK'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.025),
        verboseInfo = cms.untracked.bool(True),
        chi2Max = cms.double(99999.0),
        dPhiMax = cms.double(0.003),
        wideSeg = cms.double(3.0),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.025),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoST = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    algo_name = cms.string('CSCSegAlgoST'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        maxRatioResidualPrune = cms.double(3),
        yweightPenalty = cms.double(1.5),
        maxRecHitsInCluster = cms.int32(20),
        preClusteringUseChaining = cms.bool(True),
        ForceCovariance = cms.bool(False),
        hitDropLimit6Hits = cms.double(0.3333),
        NormChi2Cut2D = cms.double(20.0),
        BPMinImprovement = cms.double(10000.0),
        Covariance = cms.double(0.0),
        tanPhiMax = cms.double(0.5),
        onlyBestSegment = cms.bool(False),
        SeedBig = cms.double(0.0015),
        dRPhiFineMax = cms.double(8.0),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        dXclusBoxMax = cms.double(4.0),
        BrutePruning = cms.bool(True),
        curvePenaltyThreshold = cms.double(0.85),
        CorrectTheErrors = cms.bool(True),
        hitDropLimit4Hits = cms.double(0.6),
        useShowering = cms.bool(False),
        CSCDebug = cms.untracked.bool(False),
        yweightPenaltyThreshold = cms.double(1.0),
        tanThetaMax = cms.double(1.2),
        NormChi2Cut3D = cms.double(10.0),
        minHitsPerSegment = cms.int32(3),
        ForceCovarianceAll = cms.bool(False),
        dPhiFineMax = cms.double(0.025),
        prePrunLimit = cms.double(3.17),
        hitDropLimit5Hits = cms.double(0.8),
        preClustering = cms.bool(True),
        prePrun = cms.bool(True),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        Pruning = cms.bool(True),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            maxRatioResidualPrune = cms.double(3),
            yweightPenalty = cms.double(1.5),
            maxRecHitsInCluster = cms.int32(24),
            preClusteringUseChaining = cms.bool(True),
            ForceCovariance = cms.bool(False),
            hitDropLimit6Hits = cms.double(0.3333),
            NormChi2Cut2D = cms.double(20.0),
            BPMinImprovement = cms.double(10000.0),
            Covariance = cms.double(0.0),
            tanPhiMax = cms.double(0.5),
            onlyBestSegment = cms.bool(False),
            SeedBig = cms.double(0.0015),
            dRPhiFineMax = cms.double(8.0),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            dXclusBoxMax = cms.double(4.0),
            BrutePruning = cms.bool(True),
            curvePenaltyThreshold = cms.double(0.85),
            CorrectTheErrors = cms.bool(True),
            hitDropLimit4Hits = cms.double(0.6),
            useShowering = cms.bool(False),
            CSCDebug = cms.untracked.bool(False),
            yweightPenaltyThreshold = cms.double(1.0),
            tanThetaMax = cms.double(1.2),
            NormChi2Cut3D = cms.double(10.0),
            minHitsPerSegment = cms.int32(3),
            ForceCovarianceAll = cms.bool(False),
            dPhiFineMax = cms.double(0.025),
            prePrunLimit = cms.double(3.17),
            hitDropLimit5Hits = cms.double(0.8),
            preClustering = cms.bool(True),
            prePrun = cms.bool(True),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            Pruning = cms.bool(True),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoTC = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoTC'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.02),
        verboseInfo = cms.untracked.bool(True),
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        dPhiMax = cms.double(0.003),
        chi2ndfProbMin = cms.double(0.0001),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.013),
            verboseInfo = cms.untracked.bool(True),
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            dPhiMax = cms.double(0.00198),
            chi2ndfProbMin = cms.double(0.0001),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6)
        ))
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        debug = cms.bool(False),
        PruneCut = cms.double(100.0),
        CSCsegments = cms.InputTag("csc2DSegments"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        CSCTimeOffset = cms.double(0.0)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    minPt = cms.double(0.9),
    minHitsMinPt = cms.int32(3),
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    maxLostHits = cms.int32(1),
    maxNumberOfHits = cms.int32(100),
    maxConsecLostHits = cms.int32(1),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0),
    chargeSignificance = cms.double(-1.0)
)

process.ClusterFilterBlock = cms.PSet(
    ComponentName = cms.string('ClusterShapeTrackFilter'),
    ptMin = cms.double(1.5)
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string('.'),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        connectionRetrialPeriod = cms.untracked.int32(10)
    )
)

process.DATAMIXEREventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep CaloTowersSorted_calotoweroptmaker_*_*', 
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*', 
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*', 
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep HBHEDataFramesSorted_hcalDigis_*_*', 
        'keep HFDataFramesSorted_hcalDigis_*_*', 
        'keep HODataFramesSorted_hcalDigis_*_*', 
        'keep EBDigiCollection_ecalDigis_*_*', 
        'keep EEDigiCollection_ecalDigis_*_*', 
        'keep ESDataFramesSorted_ecalPreshowerDigis_*_*')
)

process.DF_ME1234_1 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DF_ME1234_2 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(2.0),
    tanPhiMax = cms.double(0.8),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(12.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(12.0)
)

process.DF_ME1A = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(30),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DQMEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConverter_*_*')
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(2),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(1),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(100.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(100.0),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(2),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(1),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        segmCleanerMode = cms.int32(1),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB_NoWire = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                minTime = cms.double(-3.0),
                maxTime = cms.double(420.0),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                tTrigMode = cms.string('DTTTrigSyncFromDB')
            ),
            segmCleanerMode = cms.int32(2),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(1.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            minTime = cms.double(-3.0),
            maxTime = cms.double(420.0),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            tTrigMode = cms.string('DTTTrigSyncFromDB')
        ),
        hit_afterT0_resolution = cms.double(0.03),
        doWirePropCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    recAlgo = cms.string('DTLinearDriftAlgo')
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        minTime = cms.double(-3.0),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        tTrigMode = cms.string('DTTTrigSyncFromDB')
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        minTime = cms.double(-3.0),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        tTrigMode = cms.string('DTTTrigSyncFromDB')
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18)
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        SectCollParameters = cms.PSet(
            SCCSP5 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCECF4 = cms.bool(False),
            SCCSP1 = cms.int32(0),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCCSP4 = cms.int32(0),
            SCECF1 = cms.bool(False),
            Debug = cms.untracked.bool(False)
        ),
        Debug = cms.untracked.bool(False),
        TracoLutsFromDB = cms.bool(False),
        TUParameters = cms.PSet(
            TracoParameters = cms.PSet(
                SPRGCOMP = cms.int32(2),
                FHTMSK = cms.int32(0),
                DD = cms.int32(18),
                SSLMSK = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                Debug = cms.untracked.int32(0),
                FSLMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SHTMSK = cms.int32(0),
                TRGENB3 = cms.int32(1),
                SHISM = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                FLTMSK = cms.int32(1),
                LTS = cms.int32(0),
                SLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                TRGENB9 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                FHTPRF = cms.int32(1),
                LTF = cms.int32(0),
                TRGENB1 = cms.int32(1),
                TRGENB0 = cms.int32(1),
                FHISM = cms.int32(0),
                TRGENB2 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                REUSEO = cms.int32(1),
                REUSEI = cms.int32(1),
                BTIC = cms.int32(32)
            ),
            TSPhiParameters = cms.PSet(
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSTREN9 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN0 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSMCCE2 = cms.bool(False),
                TSTREN19 = cms.bool(True),
                TSMCCE1 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSSMSK2 = cms.int32(312),
                TSTREN10 = cms.bool(True),
                TSMMSK2 = cms.int32(312),
                TSMMSK1 = cms.int32(312),
                TSMHSP = cms.int32(1),
                TSSNOE2 = cms.bool(False),
                TSSNOE1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSCCEC = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMHTE2 = cms.bool(False),
                Debug = cms.untracked.bool(False),
                TSSHTE2 = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSSHTE1 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSSNOEC = cms.bool(False),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSSHTEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSMHTEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSSGS2 = cms.int32(1),
                TSMNOEC = cms.bool(False),
                TSSGS1 = cms.int32(1),
                TSTREN18 = cms.bool(True),
                TSMHTE1 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            DIGIOFFSET = cms.int32(500),
            SINCROTIME = cms.int32(0),
            BtiParameters = cms.PSet(
                KACCTHETA = cms.int32(1),
                WEN8 = cms.int32(1),
                ACH = cms.int32(1),
                DEAD = cms.int32(31),
                ACL = cms.int32(2),
                PTMS20 = cms.int32(1),
                Debug = cms.untracked.int32(0),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                SET = cms.int32(7),
                RON = cms.bool(True),
                WEN2 = cms.int32(1),
                LL = cms.int32(2),
                LH = cms.int32(21),
                WEN3 = cms.int32(1),
                RE43 = cms.int32(2),
                WEN0 = cms.int32(1),
                RL = cms.int32(42),
                WEN1 = cms.int32(1),
                RH = cms.int32(61),
                LTS = cms.int32(3),
                CH = cms.int32(41),
                CL = cms.int32(22),
                PTMS15 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS10 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS12 = cms.int32(1),
                XON = cms.bool(False),
                WEN7 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS31 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS5 = cms.int32(1),
                PTMS4 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS1 = cms.int32(0),
                PTMS0 = cms.int32(0),
                PTMS3 = cms.int32(0),
                WEN6 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS9 = cms.int32(1),
                PTMS8 = cms.int32(1),
                ST43 = cms.int32(42),
                AC2 = cms.int32(3),
                AC1 = cms.int32(0),
                KMAX = cms.int32(64),
                PTMS21 = cms.int32(1)
            ),
            LutParameters = cms.PSet(
                WHEEL = cms.untracked.int32(-1),
                Debug = cms.untracked.bool(False),
                BTIC = cms.untracked.int32(31),
                XCN = cms.untracked.double(80.2),
                D = cms.untracked.double(66.5)
            )
        ),
        UseBtiAcceptParam = cms.bool(False)
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        DoWireCorr = cms.bool(False),
        PruneCut = cms.double(10000.0),
        DTsegments = cms.InputTag("dt4DSegments"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        RequireBothProjections = cms.bool(False),
        HitsMin = cms.int32(3),
        debug = cms.bool(False),
        UseSegmentT0 = cms.bool(False)
    )
)

process.DefaultAlgorithms = cms.PSet(
    Fraction = cms.double(0.2),
    PedestalSubtractionFedMode = cms.bool(False),
    CutToAvoidSignal = cms.double(2.0),
    minStripsToFit = cms.uint32(4),
    consecThreshold = cms.uint32(5),
    hitStripThreshold = cms.uint32(40),
    Deviation = cms.uint32(25),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    TruncateInSuppressor = cms.bool(True),
    restoreThreshold = cms.double(0.5),
    APVInspectMode = cms.string('BaselineFollower'),
    ForceNoRestore = cms.bool(False),
    useRealMeanCM = cms.bool(False),
    DeltaCMThreshold = cms.uint32(20),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    APVRestoreMode = cms.string('BaselineFollower'),
    distortionThreshold = cms.uint32(40),
    Iterations = cms.int32(3),
    nSmooth = cms.uint32(9),
    SelfSelectRestoreAlgo = cms.bool(False)
)

process.DefaultClusterizer = cms.PSet(
    ChannelThreshold = cms.double(2.0),
    MaxSequentialBad = cms.uint32(1),
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    MaxSequentialHoles = cms.uint32(0),
    MaxAdjacentBad = cms.uint32(0),
    QualityLabel = cms.string(''),
    SeedThreshold = cms.double(3.0),
    ClusterThreshold = cms.double(5.0)
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*')
)

process.EleIsoEcalFromHitsExtractorBlock = cms.PSet(
    isolationVariable = cms.string('et'),
    spikeIdThreshold = cms.double(0.95),
    tryBoth = cms.bool(True),
    recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
    ComponentName = cms.string('EgammaRecHitExtractor'),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    intStrip = cms.double(0.0),
    intRadius = cms.double(0.0),
    severityRecHitThreshold = cms.double(5.0),
    severityLevelCut = cms.int32(3),
    energyMin = cms.double(0.08),
    extRadius = cms.double(0.6),
    subtractSuperClusterEnergy = cms.bool(False),
    spikeIdString = cms.string('kSwissCross'),
    vetoClustered = cms.bool(False),
    etMin = cms.double(0.0),
    DepositLabel = cms.untracked.string(''),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)

process.EleIsoHcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaHcalExtractor'),
    intRadius = cms.double(0.0),
    extRadius = cms.double(0.6),
    DepositLabel = cms.untracked.string(''),
    hcalRecHits = cms.InputTag("hbhereco"),
    etMin = cms.double(-999.0)
)

process.EleIsoHcalFromTowersExtractorBlock = cms.PSet(
    caloTowers = cms.InputTag("towerMaker"),
    ComponentName = cms.string('EgammaTowerExtractor'),
    hcalDepth = cms.int32(-1),
    intRadius = cms.double(0.0),
    extRadius = cms.double(0.6),
    DepositLabel = cms.untracked.string(''),
    etMin = cms.double(-999.0)
)

process.EleIsoTrackExtractorBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    dzOption = cms.string('vz'),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('EgammaTrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(9999.0),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.0),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.FEVTDEBUGEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_g4SimHits_*_*', 'keep edmHepMCProduct_source_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep EBSrFlagsSorted_simEcalDigis_*_*', 'keep EESrFlagsSorted_simEcalDigis_*_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenJets_*_*_*', 'keep *_genParticle_*_*', 'keep recoGenMETs_*_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_randomEngineStateProducer_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*')+cms.untracked.vstring('keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenMETs_*_*_*', 'keep *_kt4GenJets_*_*', 'keep *_kt6GenJets_*_*', 'keep *_ak5GenJets_*_*', 'keep *_ak7GenJets_*_*', 'keep *_iterativeCone5GenJets_*_*', 'keep *_genParticle_*_*', 'keep edmHepMCProduct_source_*_*', 'keep SimTracks_g4SimHits_*_*', 'keep SimVertexs_g4SimHits_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_simCscTriggerPrimitiveDigis_*_*', 'keep *_simDtTriggerPrimitiveDigis_*_*', 'keep *_simRpcTriggerDigis_*_*', 'keep *_simRctDigis_*_*', 'keep *_simCsctfDigis_*_*', 'keep *_simCsctfTrackDigis_*_*', 'keep *_simDttfDigis_*_*', 'keep *_simGctDigis_*_*', 'keep *_simGmtDigis_*_*', 'keep *_simGtDigis_*_*', 'keep *_cscTriggerPrimitiveDigis_*_*', 'keep *_dtTriggerPrimitiveDigis_*_*', 'keep *_rpcTriggerDigis_*_*', 'keep *_rctDigis_*_*', 'keep *_csctfDigis_*_*', 'keep *_csctfTrackDigis_*_*', 'keep *_dttfDigis_*_*', 'keep *_gctDigis_*_*', 'keep *_gmtDigis_*_*', 'keep *_gtDigis_*_*', 'keep *_gtEvmDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_trackingtruthprod_*_*', 'drop *_electrontruth_*_*', 'keep *_mergedtruth_MergedTrackTruth_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep *_simSiPixelDigis_*_*', 'keep *_simSiStripDigis_*_*', 'keep *_allTrackMCMatch_*_*', 'keep *_trackingParticleRecoTrackAsssociation_*_*', 'keep *_assoc2secStepTk_*_*', 'keep *_assoc2thStepTk_*_*', 'keep *_assoc2GsfTracks_*_*', 'keep *_assocOutInConversionTracks_*_*', 'keep *_assocInOutConversionTracks_*_*', 'keep *_simMuonCSCDigis_*_*', 'keep *_simMuonDTDigis_*_*', 'keep *_simMuonRPCDigis_*_*', 'keep *_simEcalDigis_*_*', 'keep *_simEcalPreshowerDigis_*_*', 'keep *_simEcalTriggerPrimitiveDigis_*_*', 'keep *_simHcalDigis_*_*', 'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 'keep *_simHcalTriggerPrimitiveDigis_*_*', 'keep *_hiSignal_*_*', 'keep *_hiSignalG4SimHits_*_*', 'keep *_hiGenParticles_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep *_hiPixel3PrimTracks_*_*', 'keep *_hiPixel3ProtoTracks_*_*', 'keep *_hiSelectedProtoTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_g4SimHits_*_*', 'keep edmHepMCProduct_source_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep EBSrFlagsSorted_simEcalDigis_*_*', 'keep EESrFlagsSorted_simEcalDigis_*_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenJets_*_*_*', 'keep *_genParticle_*_*', 'keep recoGenMETs_*_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_randomEngineStateProducer_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*')+cms.untracked.vstring('keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenMETs_*_*_*', 'keep *_kt4GenJets_*_*', 'keep *_kt6GenJets_*_*', 'keep *_ak5GenJets_*_*', 'keep *_ak7GenJets_*_*', 'keep *_iterativeCone5GenJets_*_*', 'keep *_genParticle_*_*', 'keep edmHepMCProduct_source_*_*', 'keep SimTracks_g4SimHits_*_*', 'keep SimVertexs_g4SimHits_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_simCscTriggerPrimitiveDigis_*_*', 'keep *_simDtTriggerPrimitiveDigis_*_*', 'keep *_simRpcTriggerDigis_*_*', 'keep *_simRctDigis_*_*', 'keep *_simCsctfDigis_*_*', 'keep *_simCsctfTrackDigis_*_*', 'keep *_simDttfDigis_*_*', 'keep *_simGctDigis_*_*', 'keep *_simGmtDigis_*_*', 'keep *_simGtDigis_*_*', 'keep *_cscTriggerPrimitiveDigis_*_*', 'keep *_dtTriggerPrimitiveDigis_*_*', 'keep *_rpcTriggerDigis_*_*', 'keep *_rctDigis_*_*', 'keep *_csctfDigis_*_*', 'keep *_csctfTrackDigis_*_*', 'keep *_dttfDigis_*_*', 'keep *_gctDigis_*_*', 'keep *_gmtDigis_*_*', 'keep *_gtDigis_*_*', 'keep *_gtEvmDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_trackingtruthprod_*_*', 'drop *_electrontruth_*_*', 'keep *_mergedtruth_MergedTrackTruth_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep *_simSiPixelDigis_*_*', 'keep *_simSiStripDigis_*_*', 'keep *_allTrackMCMatch_*_*', 'keep *_trackingParticleRecoTrackAsssociation_*_*', 'keep *_assoc2secStepTk_*_*', 'keep *_assoc2thStepTk_*_*', 'keep *_assoc2GsfTracks_*_*', 'keep *_assocOutInConversionTracks_*_*', 'keep *_assocInOutConversionTracks_*_*', 'keep *_simMuonCSCDigis_*_*', 'keep *_simMuonDTDigis_*_*', 'keep *_simMuonRPCDigis_*_*', 'keep *_simEcalDigis_*_*', 'keep *_simEcalPreshowerDigis_*_*', 'keep *_simEcalTriggerPrimitiveDigis_*_*', 'keep *_simHcalDigis_*_*', 'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 'keep *_simHcalTriggerPrimitiveDigis_*_*', 'drop *_hlt*_*_*', 'keep *_hltAlCaEtaRecHitsFilter_*_*', 'keep *_hltAlCaPhiSymStream_*_*', 'keep *_hltAlCaPi0RecHitsFilter_*_*', 'keep *_hltBLifetimeL25AssociatorStartupU_*_*', 'keep *_hltBLifetimeL25BJetTagsStartupU_*_*', 'keep *_hltBLifetimeL25JetsStartupU_*_*', 'keep *_hltBLifetimeL25TagInfosStartupU_*_*', 'keep *_hltBLifetimeL3AssociatorStartupU_*_*', 'keep *_hltBLifetimeL3BJetTagsStartupU_*_*', 'keep *_hltBLifetimeL3JetsStartupU_*_*', 'keep *_hltBLifetimeL3TagInfosStartupU_*_*', 'keep *_hltBLifetimeRegionalCtfWithMaterialTracksStartupU_*_*', 'keep *_hltBSoftMuonL25BJetTagsUByDR_*_*', 'keep *_hltBSoftMuonL25JetsU_*_*', 'keep *_hltBSoftMuonL25TagInfosU_*_*', 'keep *_hltBSoftMuonL3BJetTagsUByDR_*_*', 'keep *_hltBSoftMuonL3BJetTagsUByPt_*_*', 'keep *_hltBSoftMuonL3TagInfosU_*_*', 'keep *_hltCkfL1IsoLargeWindowTrackCandidates_*_*', 'keep *_hltCkfL1NonIsoLargeWindowTrackCandidates_*_*', 'keep *_hltCorrectedHybridSuperClustersL1Isolated_*_*', 'keep *_hltCorrectedHybridSuperClustersL1NonIsolated_*_*', 'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1Isolated_*_*', 'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1NonIsolated_*_*', 'keep *_hltCsc2DRecHits_*_*', 'keep *_hltCscSegments_*_*', 'keep *_hltCtfL1IsoLargeWindowWithMaterialTracks_*_*', 'keep *_hltCtfL1NonIsoLargeWindowWithMaterialTracks_*_*', 'keep *_hltDt1DRecHits_*_*', 'keep *_hltDt4DSegments_*_*', 'keep *_hltFilterL25LeadingTrackPtCutDoubleIsoTau15Trk5_*_*', 'keep *_hltFilterL25LeadingTrackPtCutSingleIsoTau30Trk5MET20_*_*', 'keep *_hltFilterL2EcalIsolationDoubleIsoTau15Trk5_*_*', 'keep *_hltFilterL2EcalIsolationDoubleLooseIsoTau15_*_*', 'keep *_hltFilterL2EcalIsolationSingleIsoTau30Trk5MET20_*_*', 'keep *_hltFilterL2EcalIsolationSingleLooseIsoTau20_*_*', 'keep *_hltFilterL2EtCutDoubleIsoTau15Trk5_*_*', 'keep *_hltFilterL2EtCutDoubleLooseIsoTau15_*_*', 'keep *_hltFilterL2EtCutSingleIsoTau30Trk5MET20_*_*', 'keep *_hltFilterL2EtCutSingleLooseIsoTau20_*_*', 'keep *_hltFilterL3TrackIsolationDoubleIsoTau15Trk5_*_*', 'keep *_hltFilterL3TrackIsolationSingleIsoTau30Trk5MET20_*_*', 'keep *_hltGctDigis_*_*', 'keep *_hltGtDigis_*_*', 'keep *_hltHITCtfWithMaterialTracksHB8E29_*_*', 'keep *_hltHITCtfWithMaterialTracksHE8E29_*_*', 'keep *_hltHITIPTCorrectorHB8E29_*_*', 'keep *_hltHITIPTCorrectorHE8E29_*_*', 'keep *_hltHcalDigis_*_*', 'keep *_hltHoreco_*_*', 'keep *_hltIconeCentral1Regional_*_*', 'keep *_hltIconeCentral2Regional_*_*', 'keep *_hltIconeCentral3Regional_*_*', 'keep *_hltIconeCentral4Regional_*_*', 'keep *_hltIconeTau1Regional_*_*', 'keep *_hltIconeTau2Regional_*_*', 'keep *_hltIconeTau3Regional_*_*', 'keep *_hltIconeTau4Regional_*_*', 'keep *_hltIsolPixelTrackProdHB8E29_*_*', 'keep *_hltIsolPixelTrackProdHE8E29_*_*', 'keep *_hltIterativeCone5CaloJets_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep *_hltL1IsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 'keep *_hltL1IsoEgammaRegionalCkfTrackCandidates_*_*', 'keep *_hltL1IsoEgammaRegionalPixelSeedGenerator_*_*', 'keep *_hltL1IsoHLTClusterShape_*_*', 'keep *_hltL1IsoLargeWindowElectronPixelSeeds_*_*', 'keep *_hltL1IsoPhotonHollowTrackIsol_*_*', 'keep *_hltL1IsoRecoEcalCandidate_*_*', 'keep *_hltL1IsoSiStripElectronPixelSeeds_*_*', 'keep *_hltL1IsoStartUpElectronPixelSeeds_*_*', 'keep *_hltL1IsolatedElectronHcalIsol_*_*', 'keep *_hltL1IsolatedPhotonEcalIsol_*_*', 'keep *_hltL1IsolatedPhotonHcalIsol_*_*', 'keep *_hltL1NonIsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 'keep *_hltL1NonIsoEgammaRegionalCkfTrackCandidates_*_*', 'keep *_hltL1NonIsoEgammaRegionalPixelSeedGenerator_*_*', 'keep *_hltL1NonIsoHLTClusterShape_*_*', 'keep *_hltL1NonIsoLargeWindowElectronPixelSeeds_*_*', 'keep *_hltL1NonIsoPhotonHollowTrackIsol_*_*', 'keep *_hltL1NonIsoRecoEcalCandidate_*_*', 'keep *_hltL1NonIsoSiStripElectronPixelSeeds_*_*', 'keep *_hltL1NonIsoStartUpElectronPixelSeeds_*_*', 'keep *_hltL1NonIsolatedElectronHcalIsol_*_*', 'keep *_hltL1NonIsolatedPhotonEcalIsol_*_*', 'keep *_hltL1NonIsolatedPhotonHcalIsol_*_*', 'keep *_hltL1extraParticles_*_*', 'keep *_hltL1sDoubleLooseIsoTau15_*_*', 'keep *_hltL1sSingleLooseIsoTau20_*_*', 'keep *_hltL25TauConeIsolation_*_*', 'keep *_hltL25TauCtfWithMaterialTracks_*_*', 'keep *_hltL25TauJetTracksAssociator_*_*', 'keep *_hltL25TauLeadingTrackPtCutSelector_*_*', 'keep *_hltL2MuonCandidatesNoVtx_*_*', 'keep *_hltL2MuonCandidates_*_*', 'keep *_hltL2MuonIsolations_*_*', 'keep *_hltL2MuonSeeds_*_*', 'keep *_hltL2Muons_*_*', 'keep *_hltL2TauJets_*_*', 'keep *_hltL2TauNarrowConeIsolationProducer_*_*', 'keep *_hltL2TauRelaxingIsolationSelector_*_*', 'keep *_hltL3MuonCandidatesNoVtx_*_*', 'keep *_hltL3MuonCandidates_*_*', 'keep *_hltL3MuonIsolations_*_*', 'keep *_hltL3MuonsIOHit_*_*', 'keep *_hltL3MuonsLinksCombination_*_*', 'keep *_hltL3MuonsNoVtx_*_*', 'keep *_hltL3MuonsOIHit_*_*', 'keep *_hltL3MuonsOIState_*_*', 'keep *_hltL3Muons_*_*', 'keep *_hltL3TauConeIsolation_*_*', 'keep *_hltL3TauCtfWithMaterialTracks_*_*', 'keep *_hltL3TauIsolationSelector_*_*', 'keep *_hltL3TauJetTracksAssociator_*_*', 'keep *_hltL3TkFromL2OICombination_*_*', 'keep *_hltL3TkTracksFromL2IOHit_*_*', 'keep *_hltL3TkTracksFromL2OIHit_*_*')+cms.untracked.vstring('keep *_hltL3TkTracksFromL2OIState_*_*', 'keep *_hltL3TkTracksFromL2_*_*', 'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 'keep *_hltL3TrackCandidateFromL2OIState_*_*', 'keep *_hltL3TrackCandidateFromL2_*_*', 'keep *_hltL3TrajSeedIOHit_*_*', 'keep *_hltL3TrajSeedOIHit_*_*', 'keep *_hltL3TrajSeedOIState_*_*', 'keep *_hltL3TrajectorySeedNoVtx_*_*', 'keep *_hltL3TrajectorySeed_*_*', 'keep *_hltMCJetCorJetIcone5HF07_*_*', 'keep *_hltMet_*_*', 'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 'keep *_hltMuTrackJpsiCtfTracks_*_*', 'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 'keep *_hltMuTrackJpsiPixelTrackSelector_*_*', 'keep *_hltMuTrackJpsiTrackSeeds_*_*', 'keep *_hltMuonCSCDigis_*_*', 'keep *_hltMuonDTDigis_*_*', 'keep *_hltMuonRPCDigis_*_*', 'keep *_hltOfflineBeamSpot_*_*', 'keep *_hltPixelMatchLargeWindowElectronsL1Iso_*_*', 'keep *_hltPixelMatchLargeWindowElectronsL1NonIso_*_*', 'keep *_hltPixelTracks_*_*', 'keep *_hltPixelVertices_*_*', 'keep *_hltRpcRecHits_*_*', 'keep *_hltSiPixelClusters_*_*', 'keep *_hltSiPixelRecHits_*_*', 'keep *_hltSiStripClusters_*_*', 'keep *_hltSiStripRawToClustersFacility_*_*', 'keep *_hltTowerMakerForAll_*_*', 'keep *_hltTowerMakerForMuons_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 'keep L1MuGMTCands_hltGtDigis_*_*', 'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEventWithRefs_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_hiSignal_*_*', 'keep *_hiSignalG4SimHits_*_*', 'keep *_hiGenParticles_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep *_hiPixel3PrimTracks_*_*', 'keep *_hiPixel3ProtoTracks_*_*', 'keep *_hiSelectedProtoTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.FEVTEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*')+cms.untracked.vstring('keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep *_hiPixel3PrimTracks_*_*', 'keep *_hiPixel3ProtoTracks_*_*', 'keep *_hiSelectedProtoTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.FEVTHLTALLEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*')+cms.untracked.vstring('keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*', 'keep *_*_*_HLT', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep *_hiPixel3PrimTracks_*_*', 'keep *_hiPixel3ProtoTracks_*_*', 'keep *_hiSelectedProtoTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.FEVTSIMEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_g4SimHits_*_*', 'keep edmHepMCProduct_source_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep EBSrFlagsSorted_simEcalDigis_*_*', 'keep EESrFlagsSorted_simEcalDigis_*_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenJets_*_*_*', 'keep *_genParticle_*_*', 'keep recoGenMETs_*_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_randomEngineStateProducer_*_*', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*')+cms.untracked.vstring('keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenMETs_*_*_*', 'keep *_kt4GenJets_*_*', 'keep *_kt6GenJets_*_*', 'keep *_ak5GenJets_*_*', 'keep *_ak7GenJets_*_*', 'keep *_iterativeCone5GenJets_*_*', 'keep *_genParticle_*_*', 'keep edmHepMCProduct_source_*_*', 'keep SimTracks_g4SimHits_*_*', 'keep SimVertexs_g4SimHits_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_hiSignal_*_*', 'keep *_hiSignalG4SimHits_*_*', 'keep *_hiGenParticles_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep *_hiPixel3PrimTracks_*_*', 'keep *_hiPixel3ProtoTracks_*_*', 'keep *_hiSelectedProtoTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.GamIsoEcalFromHitsExtractorBlock = cms.PSet(
    isolationVariable = cms.string('et'),
    spikeIdThreshold = cms.double(0.95),
    tryBoth = cms.bool(True),
    recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
    ComponentName = cms.string('EgammaRecHitExtractor'),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    intStrip = cms.double(0.0),
    intRadius = cms.double(0.0),
    severityRecHitThreshold = cms.double(5.0),
    severityLevelCut = cms.int32(3),
    energyMin = cms.double(0.08),
    extRadius = cms.double(0.6),
    subtractSuperClusterEnergy = cms.bool(False),
    spikeIdString = cms.string('kSwissCross'),
    vetoClustered = cms.bool(False),
    detector = cms.string('Ecal'),
    etMin = cms.double(0.0),
    DepositLabel = cms.untracked.string(''),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)

process.GamIsoHcalFromHitsExtractorBlock = cms.PSet(
    ComponentName = cms.string('EgammaHcalExtractor'),
    intRadius = cms.double(0.0),
    extRadius = cms.double(0.6),
    DepositLabel = cms.untracked.string(''),
    hcalRecHits = cms.InputTag("hbhereco"),
    etMin = cms.double(-999.0)
)

process.GamIsoHcalFromTowersExtractorBlock = cms.PSet(
    caloTowers = cms.InputTag("towerMaker"),
    ComponentName = cms.string('EgammaTowerExtractor'),
    hcalDepth = cms.int32(-1),
    intRadius = cms.double(0.0),
    extRadius = cms.double(0.6),
    DepositLabel = cms.untracked.string(''),
    etMin = cms.double(-999.0)
)

process.GamIsoTrackExtractorBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    dzOption = cms.string('vz'),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('EgammaTrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(9999.0),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.0),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*')
)

process.GlobalMuonRefitter = cms.PSet(
    TrackerSkipSection = cms.int32(-1),
    MuonHitsOption = cms.int32(1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    RefitDirection = cms.string('insideOut'),
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    TrackerSkipSystem = cms.int32(-1),
    DoPredictionsOnly = cms.bool(False),
    Chi2ProbabilityCut = cms.double(30.0),
    PropDirForCosmics = cms.bool(False),
    HitThreshold = cms.int32(1),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    Chi2CutCSC = cms.double(9.0),
    Chi2CutRPC = cms.double(1.0),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    RefitRPCHits = cms.bool(True),
    Chi2CutDT = cms.double(6.0),
    PtCut = cms.double(1.0),
    SkipStation = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(0.001),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(40.0),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        Eta_fixed = cms.double(0.2),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(0.001),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(40.0),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    ScaleTECyFactor = cms.double(-1.0),
    GlbRefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('GlbMuKFFitter'),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        RefitRPCHits = cms.bool(True),
        PtCut = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        SkipStation = cms.int32(-1),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ScaleTECxFactor = cms.double(-1.0),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    RefitRPCHits = cms.bool(True),
    PCut = cms.double(2.5),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True)
    ),
    PtCut = cms.double(1.0),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
)

process.HLTDEBUGEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL25BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL25JetsStartupU_*_*', 
        'keep *_hltBLifetimeL25TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeL3AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL3BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL3JetsStartupU_*_*', 
        'keep *_hltBLifetimeL3TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksStartupU_*_*', 
        'keep *_hltBSoftMuonL25BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL25JetsU_*_*', 
        'keep *_hltBSoftMuonL25TagInfosU_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByPt_*_*', 
        'keep *_hltBSoftMuonL3TagInfosU_*_*', 
        'keep *_hltCkfL1IsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCkfL1NonIsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1Isolated_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1NonIsolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1Isolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1NonIsolated_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltCtfL1IsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltCtfL1NonIsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltDt1DRecHits_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL2EtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EtCutDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EtCutSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL3TrackIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL3TrackIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltGctDigis_*_*', 
        'keep *_hltGtDigis_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHB8E29_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHE8E29_*_*', 
        'keep *_hltHITIPTCorrectorHB8E29_*_*', 
        'keep *_hltHITIPTCorrectorHE8E29_*_*', 
        'keep *_hltHcalDigis_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIconeCentral1Regional_*_*', 
        'keep *_hltIconeCentral2Regional_*_*', 
        'keep *_hltIconeCentral3Regional_*_*', 
        'keep *_hltIconeCentral4Regional_*_*', 
        'keep *_hltIconeTau1Regional_*_*', 
        'keep *_hltIconeTau2Regional_*_*', 
        'keep *_hltIconeTau3Regional_*_*', 
        'keep *_hltIconeTau4Regional_*_*', 
        'keep *_hltIsolPixelTrackProdHB8E29_*_*', 
        'keep *_hltIsolPixelTrackProdHE8E29_*_*', 
        'keep *_hltIterativeCone5CaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1IsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1IsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1IsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1IsoHLTClusterShape_*_*', 
        'keep *_hltL1IsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1IsoRecoEcalCandidate_*_*', 
        'keep *_hltL1IsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1IsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1NonIsoHLTClusterShape_*_*', 
        'keep *_hltL1NonIsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep *_hltL1NonIsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleLooseIsoTau15_*_*', 
        'keep *_hltL1sSingleLooseIsoTau20_*_*', 
        'keep *_hltL25TauConeIsolation_*_*', 
        'keep *_hltL25TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL25TauJetTracksAssociator_*_*', 
        'keep *_hltL25TauLeadingTrackPtCutSelector_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonIsolations_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL2TauNarrowConeIsolationProducer_*_*', 
        'keep *_hltL2TauRelaxingIsolationSelector_*_*', 
        'keep *_hltL3MuonCandidatesNoVtx_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonIsolations_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsNoVtx_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3TauConeIsolation_*_*', 
        'keep *_hltL3TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL3TauIsolationSelector_*_*', 
        'keep *_hltL3TauJetTracksAssociator_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrackCandidateFromL2_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeedNoVtx_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltMCJetCorJetIcone5HF07_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiCtfTracks_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackSelector_*_*', 
        'keep *_hltMuTrackJpsiTrackSeeds_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOfflineBeamSpot_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1NonIso_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiPixelRecHits_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL25BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL25JetsStartupU_*_*', 
        'keep *_hltBLifetimeL25TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeL3AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL3BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL3JetsStartupU_*_*', 
        'keep *_hltBLifetimeL3TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksStartupU_*_*', 
        'keep *_hltBSoftMuonL25BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL25JetsU_*_*', 
        'keep *_hltBSoftMuonL25TagInfosU_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByPt_*_*', 
        'keep *_hltBSoftMuonL3TagInfosU_*_*', 
        'keep *_hltCkfL1IsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCkfL1NonIsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1Isolated_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1NonIsolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1Isolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1NonIsolated_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltCtfL1IsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltCtfL1NonIsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltDt1DRecHits_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL2EtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EtCutDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EtCutSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL3TrackIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL3TrackIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltGctDigis_*_*', 
        'keep *_hltGtDigis_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHB8E29_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHE8E29_*_*', 
        'keep *_hltHITIPTCorrectorHB8E29_*_*', 
        'keep *_hltHITIPTCorrectorHE8E29_*_*', 
        'keep *_hltHcalDigis_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIconeCentral1Regional_*_*', 
        'keep *_hltIconeCentral2Regional_*_*', 
        'keep *_hltIconeCentral3Regional_*_*', 
        'keep *_hltIconeCentral4Regional_*_*', 
        'keep *_hltIconeTau1Regional_*_*', 
        'keep *_hltIconeTau2Regional_*_*', 
        'keep *_hltIconeTau3Regional_*_*', 
        'keep *_hltIconeTau4Regional_*_*', 
        'keep *_hltIsolPixelTrackProdHB8E29_*_*', 
        'keep *_hltIsolPixelTrackProdHE8E29_*_*', 
        'keep *_hltIterativeCone5CaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1IsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1IsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1IsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1IsoHLTClusterShape_*_*', 
        'keep *_hltL1IsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1IsoRecoEcalCandidate_*_*', 
        'keep *_hltL1IsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1IsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1NonIsoHLTClusterShape_*_*', 
        'keep *_hltL1NonIsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep *_hltL1NonIsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleLooseIsoTau15_*_*', 
        'keep *_hltL1sSingleLooseIsoTau20_*_*', 
        'keep *_hltL25TauConeIsolation_*_*', 
        'keep *_hltL25TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL25TauJetTracksAssociator_*_*', 
        'keep *_hltL25TauLeadingTrackPtCutSelector_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonIsolations_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL2TauNarrowConeIsolationProducer_*_*', 
        'keep *_hltL2TauRelaxingIsolationSelector_*_*', 
        'keep *_hltL3MuonCandidatesNoVtx_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonIsolations_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsNoVtx_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3TauConeIsolation_*_*', 
        'keep *_hltL3TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL3TauIsolationSelector_*_*', 
        'keep *_hltL3TauJetTracksAssociator_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrackCandidateFromL2_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeedNoVtx_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltMCJetCorJetIcone5HF07_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiCtfTracks_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackSelector_*_*', 
        'keep *_hltMuTrackJpsiTrackSeeds_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOfflineBeamSpot_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1NonIso_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiPixelRecHits_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL25BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL25JetsStartupU_*_*', 
        'keep *_hltBLifetimeL25TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeL3AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL3BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL3JetsStartupU_*_*', 
        'keep *_hltBLifetimeL3TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksStartupU_*_*', 
        'keep *_hltBSoftMuonL25BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL25JetsU_*_*', 
        'keep *_hltBSoftMuonL25TagInfosU_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByPt_*_*', 
        'keep *_hltBSoftMuonL3TagInfosU_*_*', 
        'keep *_hltCkfL1IsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCkfL1NonIsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1Isolated_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1NonIsolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1Isolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1NonIsolated_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltCtfL1IsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltCtfL1NonIsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltDt1DRecHits_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL2EtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EtCutDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EtCutSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL3TrackIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL3TrackIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltGctDigis_*_*', 
        'keep *_hltGtDigis_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHB8E29_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHE8E29_*_*', 
        'keep *_hltHITIPTCorrectorHB8E29_*_*', 
        'keep *_hltHITIPTCorrectorHE8E29_*_*', 
        'keep *_hltHcalDigis_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIconeCentral1Regional_*_*', 
        'keep *_hltIconeCentral2Regional_*_*', 
        'keep *_hltIconeCentral3Regional_*_*', 
        'keep *_hltIconeCentral4Regional_*_*', 
        'keep *_hltIconeTau1Regional_*_*', 
        'keep *_hltIconeTau2Regional_*_*', 
        'keep *_hltIconeTau3Regional_*_*', 
        'keep *_hltIconeTau4Regional_*_*', 
        'keep *_hltIsolPixelTrackProdHB8E29_*_*', 
        'keep *_hltIsolPixelTrackProdHE8E29_*_*', 
        'keep *_hltIterativeCone5CaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1IsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1IsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1IsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1IsoHLTClusterShape_*_*', 
        'keep *_hltL1IsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1IsoRecoEcalCandidate_*_*', 
        'keep *_hltL1IsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1IsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1NonIsoHLTClusterShape_*_*', 
        'keep *_hltL1NonIsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep *_hltL1NonIsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleLooseIsoTau15_*_*', 
        'keep *_hltL1sSingleLooseIsoTau20_*_*', 
        'keep *_hltL25TauConeIsolation_*_*', 
        'keep *_hltL25TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL25TauJetTracksAssociator_*_*', 
        'keep *_hltL25TauLeadingTrackPtCutSelector_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonIsolations_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL2TauNarrowConeIsolationProducer_*_*', 
        'keep *_hltL2TauRelaxingIsolationSelector_*_*', 
        'keep *_hltL3MuonCandidatesNoVtx_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonIsolations_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsNoVtx_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3TauConeIsolation_*_*', 
        'keep *_hltL3TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL3TauIsolationSelector_*_*', 
        'keep *_hltL3TauJetTracksAssociator_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrackCandidateFromL2_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeedNoVtx_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltMCJetCorJetIcone5HF07_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiCtfTracks_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackSelector_*_*', 
        'keep *_hltMuTrackJpsiTrackSeeds_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOfflineBeamSpot_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1NonIso_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiPixelRecHits_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HcalNoiseParameterSet = cms.PSet(
    lMinRatio = cms.double(0.7),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMinHPDHits = cms.int32(17),
    tMinRBXHits = cms.int32(50),
    minEZeros = cms.double(10.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    minEEMF = cms.double(50.0),
    pMaxHighEHitTime = cms.double(5.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    tMaxRatio = cms.double(0.92),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    pMinE = cms.double(40.0),
    pMaxHPDEMF = cms.double(0.02),
    tMinHighEHitTime = cms.double(-7.0),
    pMaxLowEHitTime = cms.double(6.0),
    lMaxRatio = cms.double(0.96),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(0.73),
    tMaxHighEHitTime = cms.double(6.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    minERatio = cms.double(50.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinZeros = cms.int32(8),
    lMinHPDNoOtherHits = cms.int32(10),
    tMaxLowEHitTime = cms.double(9999.0),
    pMinHPDNoOtherHits = cms.int32(7),
    hlMaxHPDEMF = cms.double(-9999.0)
)

process.HiCaloJetDefaults = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    Rho_EtaMax = cms.double(4.5),
    GhostArea = cms.double(0.01),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)

process.HiCaloJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("towerMaker"),
    doAreaFastjet = cms.bool(True),
    doPVCorrection = cms.bool(False),
    Ghost_EtaMax = cms.double(6.5),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.3),
    doPUOffsetCorr = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    Rho_EtaMax = cms.double(4.5),
    jetPtMin = cms.double(10),
    jetType = cms.string('CaloJet'),
    GhostArea = cms.double(0.01),
    inputEMin = cms.double(0.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    doFastJetNonUniform = cms.bool(True),
    puWidth = cms.double(0.8)
)

process.HiFilterBlock = cms.PSet(
    nSigmaLipMaxTolerance = cms.double(0),
    nSigmaTipMaxTolerance = cms.double(6.0),
    ComponentName = cms.string('HIPixelTrackFilter'),
    chi2 = cms.double(1000.0),
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    useClusterShape = cms.bool(False),
    lipMax = cms.double(0.3),
    tipMax = cms.double(0),
    ptMin = cms.double(1.5)
)

process.HiMixAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGenParticles_*_*')
)

process.HiMixRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiSignal_*_*', 
        'keep *_hiSignalG4SimHits_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.HiMixRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiSignal_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.HiProtoTrackFilterBlock = cms.PSet(
    doVariablePtMin = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    chi2 = cms.double(1000.0),
    ComponentName = cms.string('HIProtoTrackFilter'),
    ptMin = cms.double(1.0),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    tipMax = cms.double(1.0)
)

process.HiTrackingRegionFactoryFromJetsBlock = cms.PSet(
    ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        deltaPhiRegion = cms.double(0.1),
        originHalfLength = cms.double(0.2),
        originRadius = cms.double(0.2),
        deltaEtaRegion = cms.double(0.1),
        ptMin = cms.double(5.0),
        JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
        originZPos = cms.double(0.0),
        vertexSrc = cms.InputTag("hiSelectedVertex")
    )
)

process.HiTrackingRegionFactoryFromSTAMuonsBlock = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        Eta_fixed = cms.double(0.2),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(5.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("hiSelectedVertex"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    ComponentName = cms.string('HIMuonTrackingRegionProducer'),
    MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx")
)

process.HiTrackingRegionForPrimaryVertexBlock = cms.PSet(
    precise = cms.bool(True),
    doVariablePtMin = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    nSigmaZ = cms.double(3.0),
    directionXCoord = cms.double(1.0),
    directionZCoord = cms.double(0.0),
    ptMin = cms.double(0.7),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    directionYCoord = cms.double(1.0),
    originRadius = cms.double(0.1)
)

process.HiTrackingRegionFromClusterVtxBlock = cms.PSet(
    precise = cms.bool(True),
    doVariablePtMin = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    useFixedError = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    sigmaZVertex = cms.double(3.0),
    fixedError = cms.double(2.0),
    directionXCoord = cms.double(1.0),
    directionZCoord = cms.double(0.0),
    VertexCollection = cms.InputTag("hiPixelClusterVertex"),
    ptMin = cms.double(0.7),
    useFoundVertices = cms.bool(True),
    directionYCoord = cms.double(1.0),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    originRadius = cms.double(0.1)
)

process.HiTrackingRegionWithVertexBlock = cms.PSet(
    precise = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    useFixedError = cms.bool(True),
    originRadius = cms.double(0.2),
    sigmaZVertex = cms.double(3.0),
    fixedError = cms.double(0.2),
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    ptMin = cms.double(1.5),
    useFoundVertices = cms.bool(True),
    nSigmaZ = cms.double(3.0)
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.KinematicFilterBlock = cms.PSet(
    chi2 = cms.double(1000.0),
    nSigmaTipMaxTolerance = cms.double(0.0),
    ComponentName = cms.string('PixelTrackFilterByKinematics'),
    nSigmaInvPtTolerance = cms.double(0.0),
    ptMin = cms.double(0.7),
    tipMax = cms.double(1.0)
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*')
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        WHEEL = cms.untracked.int32(-1),
        Debug = cms.untracked.bool(False),
        BTIC = cms.untracked.int32(31),
        XCN = cms.untracked.double(80.2),
        D = cms.untracked.double(66.5)
    )
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MIXINGMODULEEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_cfWriter_*_*')
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    trackDepositName = cms.string('tracker'),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.1),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(True),
    Threshold_HO = cms.double(0.1),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.025)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.5),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(False),
    Threshold_HO = cms.double(0.5),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.2)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.5),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(0.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoJetExtractorBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    ExcludeMuonVeto = cms.bool(True),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    JetCollectionLabel = cms.InputTag("ak5CaloJets"),
    DR_Veto = cms.double(0.1),
    Threshold = cms.double(5.0)
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(1)
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    nSigmaMinPt = cms.double(5.0),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0)
)

process.MultipleAlgoIteratorBlock = cms.PSet(
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTsegments = cms.InputTag("dt4DSegments"),
        TightMatchDT = cms.bool(False),
        TightMatchCSC = cms.bool(True)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        SmoothTkTrack = cms.untracked.bool(False),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        VertexConstraint = cms.bool(False),
        DoSmoothing = cms.bool(True)
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        Eta_fixed = cms.double(0.2),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.NoVertexGeneratorBlock = cms.PSet(
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    )
)

process.OutALCARECODtCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECODtCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep recoGsfElectronCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep *_electronGsfTracks_*_*', 
        'keep  *_gsfElectrons_*_*', 
        'keep  *_alCaIsolatedElectrons_*_*', 
        'keep recoCaloMETs_met_*_*', 
        'keep edmTriggerResults_TriggerResults__*', 
        'keep edmHepMCProduct_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalElectron')
    ),
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep *_electronGsfTracks_*_*', 
        'keep  *_gsfElectrons_*_*', 
        'keep  *_alCaIsolatedElectrons_*_*', 
        'keep recoCaloMETs_met_*_*', 
        'keep edmTriggerResults_TriggerResults__*', 
        'keep edmHepMCProduct_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalEtaCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalEtaCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalPhiSym = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPhiSym')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEB_*', 
        'keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalPhiSym_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPhiSym')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEB_*', 
        'keep *_ecalPhiSymCorrected_phiSymEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalPi0Calib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOEcalCalPi0Calib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalDijets = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_DiJProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalDijets_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('keep *_DiJProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalGammaJet = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_GammaJetProd_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalGammaJet_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('keep *_GammaJetProd_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalHO = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hoCalibProducer_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalHOCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep HOCalibVariabless_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalHOCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep HOCalibVariabless_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalHO_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('keep *_hoCalibProducer_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalIsoTrk = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalIsoTrk_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalNoise = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOHcalCalNoise_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlGlobalCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlGlobalCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOMuAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOPromptCalibProd = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*')
)

process.OutALCARECOPromptCalibProd_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*')
)

process.OutALCARECORpcCalHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECORpcCalHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECOSiPixelLorentzAngle = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiPixelLorentzAngle_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiStripCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOTkAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics0T = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics0THLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics0THLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics0T_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmicsHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmicsHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlJpsiMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlJpsiMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlLAS = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_laserAlignmentT0Producer_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlLAS_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('keep *_laserAlignmentT0Producer_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMuonIsolated = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlMuonIsolated_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.OutALCARECOTkAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_MEtoEDMConverter_*_*')
)

process.ParametrizedSubtractorBlock = cms.PSet(
    subtractorName = cms.string('ParametrizedSubtractorBlock'),
    sumRecHits = cms.bool(False),
    interpolate = cms.bool(False)
)

process.PixelTripletHLTGenerator = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(10000),
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    extraHitRPhitolerance = cms.double(0.032),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.037)
)

process.RAWDEBUGEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mergedtruth_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_hiSignal_*_*', 
        'keep *_hiSignalG4SimHits_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mergedtruth_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL25BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL25JetsStartupU_*_*', 
        'keep *_hltBLifetimeL25TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeL3AssociatorStartupU_*_*', 
        'keep *_hltBLifetimeL3BJetTagsStartupU_*_*', 
        'keep *_hltBLifetimeL3JetsStartupU_*_*', 
        'keep *_hltBLifetimeL3TagInfosStartupU_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksStartupU_*_*', 
        'keep *_hltBSoftMuonL25BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL25JetsU_*_*', 
        'keep *_hltBSoftMuonL25TagInfosU_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByDR_*_*', 
        'keep *_hltBSoftMuonL3BJetTagsUByPt_*_*', 
        'keep *_hltBSoftMuonL3TagInfosU_*_*', 
        'keep *_hltCkfL1IsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCkfL1NonIsoLargeWindowTrackCandidates_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1Isolated_*_*', 
        'keep *_hltCorrectedHybridSuperClustersL1NonIsolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1Isolated_*_*', 
        'keep *_hltCorrectedMulti5x5EndcapSuperClustersWithPreshowerL1NonIsolated_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltCtfL1IsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltCtfL1NonIsoLargeWindowWithMaterialTracks_*_*', 
        'keep *_hltDt1DRecHits_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL25LeadingTrackPtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EcalIsolationDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EcalIsolationSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL2EtCutDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL2EtCutDoubleLooseIsoTau15_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltFilterL2EtCutSingleLooseIsoTau20_*_*', 
        'keep *_hltFilterL3TrackIsolationDoubleIsoTau15Trk5_*_*', 
        'keep *_hltFilterL3TrackIsolationSingleIsoTau30Trk5MET20_*_*', 
        'keep *_hltGctDigis_*_*', 
        'keep *_hltGtDigis_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHB8E29_*_*', 
        'keep *_hltHITCtfWithMaterialTracksHE8E29_*_*', 
        'keep *_hltHITIPTCorrectorHB8E29_*_*', 
        'keep *_hltHITIPTCorrectorHE8E29_*_*', 
        'keep *_hltHcalDigis_*_*', 
        'keep *_hltHoreco_*_*', 
        'keep *_hltIconeCentral1Regional_*_*', 
        'keep *_hltIconeCentral2Regional_*_*', 
        'keep *_hltIconeCentral3Regional_*_*', 
        'keep *_hltIconeCentral4Regional_*_*', 
        'keep *_hltIconeTau1Regional_*_*', 
        'keep *_hltIconeTau2Regional_*_*', 
        'keep *_hltIconeTau3Regional_*_*', 
        'keep *_hltIconeTau4Regional_*_*', 
        'keep *_hltIsolPixelTrackProdHB8E29_*_*', 
        'keep *_hltIsolPixelTrackProdHE8E29_*_*', 
        'keep *_hltIterativeCone5CaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1IsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1IsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1IsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1IsoHLTClusterShape_*_*', 
        'keep *_hltL1IsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1IsoRecoEcalCandidate_*_*', 
        'keep *_hltL1IsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1IsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1IsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCTFFinalFitWithMaterial_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalCkfTrackCandidates_*_*', 
        'keep *_hltL1NonIsoEgammaRegionalPixelSeedGenerator_*_*', 
        'keep *_hltL1NonIsoHLTClusterShape_*_*', 
        'keep *_hltL1NonIsoLargeWindowElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoPhotonHollowTrackIsol_*_*', 
        'keep *_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep *_hltL1NonIsoSiStripElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsoStartUpElectronPixelSeeds_*_*', 
        'keep *_hltL1NonIsolatedElectronHcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep *_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleLooseIsoTau15_*_*', 
        'keep *_hltL1sSingleLooseIsoTau20_*_*', 
        'keep *_hltL25TauConeIsolation_*_*', 
        'keep *_hltL25TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL25TauJetTracksAssociator_*_*', 
        'keep *_hltL25TauLeadingTrackPtCutSelector_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonIsolations_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL2TauNarrowConeIsolationProducer_*_*', 
        'keep *_hltL2TauRelaxingIsolationSelector_*_*', 
        'keep *_hltL3MuonCandidatesNoVtx_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonIsolations_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsNoVtx_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3TauConeIsolation_*_*', 
        'keep *_hltL3TauCtfWithMaterialTracks_*_*', 
        'keep *_hltL3TauIsolationSelector_*_*', 
        'keep *_hltL3TauJetTracksAssociator_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrackCandidateFromL2_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeedNoVtx_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltMCJetCorJetIcone5HF07_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiCtfTracks_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackSelector_*_*', 
        'keep *_hltMuTrackJpsiTrackSeeds_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOfflineBeamSpot_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchLargeWindowElectronsL1NonIso_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiPixelRecHits_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_hiSignal_*_*', 
        'keep *_hiSignalG4SimHits_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.RAWEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.RAWRECOEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'keep  FEDRawDataCollection_rawDataCollector_*_*', 'keep  FEDRawDataCollection_source_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep FEDRawDataCollection_rawDataCollector_*_*', 'keep FEDRawDataCollection_source_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'drop *', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*')+cms.untracked.vstring('keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*'))
)

process.RAWSIMEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_hiSignal_*_*', 
        'keep *_hiSignalG4SimHits_*_*', 
        'keep *_hiGenParticles_*_*')
)

process.RECODEBUGEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'drop *', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*')+cms.untracked.vstring('keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenMETs_*_*_*', 'keep *_kt4GenJets_*_*', 'keep *_kt6GenJets_*_*', 'keep *_ak5GenJets_*_*', 'keep *_ak7GenJets_*_*', 'keep *_iterativeCone5GenJets_*_*', 'keep *_genParticle_*_*', 'keep edmHepMCProduct_source_*_*', 'keep SimTracks_g4SimHits_*_*', 'keep SimVertexs_g4SimHits_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'drop *_trackingtruthprod_*_*', 'drop *_electrontruth_*_*', 'keep *_mergedtruth_MergedTrackTruth_*', 'keep CrossingFramePlaybackInfoExtended_*_*_*', 'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 'keep *_allTrackMCMatch_*_*', 'keep *_hiSignal_*_*', 'keep *_hiSignalG4SimHits_*_*', 'keep *_hiGenParticles_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.RECOEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*', 'keep *_trackerDrivenElectronSeeds_preid_*')+cms.untracked.vstring('keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*'))
)

process.RECOSIMEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = (cms.untracked.vstring('drop *', 'drop *', 'keep DetIdedmEDCollection_siStripDigis_*_*', 'keep *_siPixelClusters_*_*', 'keep *_siStripClusters_*_*', 'keep *_dt1DRecHits_*_*', 'keep *_dt4DSegments_*_*', 'keep *_csc2DRecHits_*_*', 'keep *_cscSegments_*_*', 'keep *_rpcRecHits_*_*', 'keep *_hbhereco_*_*', 'keep *_hfreco_*_*', 'keep *_horeco_*_*', 'keep HBHERecHitsSorted_hbherecoMB_*_*', 'keep HORecHitsSorted_horecoMB_*_*', 'keep HFRecHitsSorted_hfrecoMB_*_*', 'keep ZDCDataFramesSorted_*Digis_*_*', 'keep ZDCRecHitsSorted_*_*_*', 'keep *_castorreco_*_*', 'keep *_ecalPreshowerRecHit_*_*', 'keep *_ecalRecHit_*_*', 'keep *_ecalCompactTrigPrim_*_*', 'keep *_ecalTPSkim_*_*', 'keep *_selectDigi_*_*', 'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 'keep *_hybridSuperClusters_*_*', 'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 'keep *_multi5x5BasicClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClusters_*_*', 'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 'drop recoClusterShapes_*_*_*', 'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 'keep *_CkfElectronCandidates_*_*', 'keep *_GsfGlobalElectronTest_*_*', 'keep *_electronMergedSeeds_*_*', 'keep recoGsfTracks_electronGsfTracks_*_*', 'keep recoGsfTrackExtras_electronGsfTracks_*_*', 'keep recoTrackExtras_electronGsfTracks_*_*', 'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoTrackExtras_generalTracks_*_*', 'keep TrackingRecHitsOwned_generalTracks_*_*', 'keep recoTracks_beamhaloTracks_*_*', 'keep recoTrackExtras_beamhaloTracks_*_*', 'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 'keep recoTracks_regionalCosmicTracks_*_*', 'keep recoTrackExtras_regionalCosmicTracks_*_*', 'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 'keep recoTracks_rsWithMaterialTracks_*_*', 'keep recoTrackExtras_rsWithMaterialTracks_*_*', 'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 'keep *_ctfPixelLess_*_*', 'keep *_dedxTruncated40_*_*', 'keep *_dedxMedian_*_*', 'keep *_dedxHarmonic2_*_*', 'keep *_trackExtrapolator_*_*', 'keep *_kt4CaloJets_*_*', 'keep *_kt6CaloJets_*_*', 'keep *_ak5CaloJets_*_*', 'keep *_ak7CaloJets_*_*', 'keep *_iterativeCone5CaloJets_*_*', 'keep *_iterativeCone15CaloJets_*_*', 'keep *_kt4PFJets_*_*', 'keep *_kt6PFJets_*_*', 'keep *_ak5PFJets_*_*', 'keep *_ak7PFJets_*_*', 'keep *_iterativeCone5PFJets_*_*', 'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_ak5TrackJets_*_*', 'keep *_kt4TrackJets_*_*', 'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 'keep *_caloTowers_*_*', 'keep *_towerMaker_*_*', 'keep *_CastorTowerReco_*_*', 'keep *_ic5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 'keep *_iterativeCone5JetExtender_*_*', 'keep *_kt4JetTracksAssociatorAtVertex_*_*', 'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 'keep *_kt4JetExtender_*_*', 'keep *_ak5JetTracksAssociatorAtVertex_*_*', 'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak5JetExtender_*_*', 'keep *_ak7JetTracksAssociatorAtVertex_*_*', 'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 'keep *_ak7JetExtender_*_*', 'keep *_ak5JetID_*_*', 'keep *_ak7JetID_*_*', 'keep *_ic5JetID_*_*', 'keep *_kt4JetID_*_*', 'keep *_kt6JetID_*_*', 'keep *_ak7BasicJets_*_*', 'keep *_ak7CastorJetID_*_*', 'keep recoCaloMETs_met_*_*', 'keep recoCaloMETs_metNoHF_*_*', 'keep recoCaloMETs_corMetGlobalMuons_*_*', 'keep recoCaloMETs_metNoHFHO_*_*', 'keep recoCaloMETs_metOptHO_*_*', 'keep recoCaloMETs_metOpt_*_*', 'keep recoCaloMETs_metOptNoHFHO_*_*', 'keep recoCaloMETs_metOptNoHF_*_*', 'keep recoMETs_htMetAK5_*_*', 'keep recoMETs_htMetAK7_*_*', 'keep recoMETs_htMetIC5_*_*', 'keep recoMETs_htMetKT4_*_*', 'keep recoMETs_htMetKT6_*_*', 'keep recoMETs_tcMet_*_*', 'keep recoPFMETs_pfMet_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 'keep recoHcalNoiseRBXs_hcalnoise_*_*', 'keep HcalNoiseSummary_hcalnoise_*_*', 'keep *HaloData_*_*_*', 'keep *BeamHaloSummary_BeamHaloSummary_*_*', 'keep *_MuonSeed_*_*', 'keep *_ancientMuonSeed_*_*', 'keep *_mergedStandAloneMuonSeeds_*_*', 'keep TrackingRecHitsOwned_globalMuons_*_*', 'keep TrackingRecHitsOwned_tevMuons_*_*', 'keep recoCaloMuons_calomuons_*_*', 'keep *_CosmicMuonSeed_*_*', 'keep recoTrackExtras_cosmicMuons_*_*', 'keep TrackingRecHitsOwned_cosmicMuons_*_*', 'keep recoTrackExtras_globalCosmicMuons_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 'keep recoTrackExtras_cosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 'keep recoTracks_cosmicsVetoTracks_*_*', 'keep *_SETMuonSeed_*_*', 'keep recoTracks_standAloneSETMuons_*_*', 'keep recoTrackExtras_standAloneSETMuons_*_*', 'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 'keep recoTracks_globalSETMuons_*_*', 'keep recoTrackExtras_globalSETMuons_*_*', 'keep TrackingRecHitsOwned_globalSETMuons_*_*', 'keep recoMuons_muonsWithSET_*_*', 'keep recoTracks_standAloneMuons_*_*', 'keep recoTrackExtras_standAloneMuons_*_*', 'keep TrackingRecHitsOwned_standAloneMuons_*_*', 'keep recoTracks_globalMuons_*_*', 'keep recoTrackExtras_globalMuons_*_*', 'keep recoTracks_tevMuons_*_*', 'keep recoTrackExtras_tevMuons_*_*', 'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 'keep recoTracks_generalTracks_*_*', 'keep recoMuons_muons_*_*', 'keep booledmValueMap_muid*_*_*', 'keep recoMuonTimeExtraedmValueMap_muons_*_*', 'keep recoTracks_cosmicMuons_*_*', 'keep recoTracks_globalCosmicMuons_*_*', 'keep recoMuons_muonsFromCosmics_*_*', 'keep recoTracks_cosmicMuons1Leg_*_*', 'keep recoTracks_globalCosmicMuons1Leg_*_*', 'keep recoMuons_muonsFromCosmics1Leg_*_*', 'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 'keep uintedmValueMap_cosmicsVeto_*_*', 'keep *_muIsoDepositTk_*_*', 'keep *_muIsoDepositCalByAssociatorTowers_*_*', 'keep *_muIsoDepositCalByAssociatorHits_*_*', 'keep *_muIsoDepositJets_*_*', 'keep *_muGlobalIsoDepositCtfTk_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 'keep *_muGlobalIsoDepositJets_*_*', 'keep *_impactParameterTagInfos_*_*', 'keep *_trackCountingHighEffBJetTags_*_*', 'keep *_trackCountingHighPurBJetTags_*_*', 'keep *_jetProbabilityBJetTags_*_*', 'keep *_jetBProbabilityBJetTags_*_*', 'keep *_secondaryVertexTagInfos_*_*', 'keep *_ghostTrackVertexTagInfos_*_*', 'keep *_simpleSecondaryVertexBJetTags_*_*', 'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 'keep *_combinedSecondaryVertexBJetTags_*_*', 'keep *_combinedSecondaryVertexMVABJetTags_*_*', 'keep *_ghostTrackBJetTags_*_*', 'keep *_btagSoftElectrons_*_*', 'keep *_softElectronCands_*_*', 'keep *_softPFElectrons_*_*', 'keep *_softElectronTagInfos_*_*', 'keep *_softElectronBJetTags_*_*', 'keep *_softElectronByIP3dBJetTags_*_*', 'keep *_softElectronByPtBJetTags_*_*', 'keep *_softMuonTagInfos_*_*', 'keep *_softMuonBJetTags_*_*', 'keep *_softMuonByIP3dBJetTags_*_*', 'keep *_softMuonByPtBJetTags_*_*', 'keep *_combinedMVABJetTags_*_*', 'keep *_pfRecoTauTagInfoProducer_*_*', 'keep *_fixedConePFTauProducer*_*_*', 'keep *_fixedConePFTauDiscrimination*_*_*', 'keep *_hpsPFTauProducer*_*_*', 'keep *_hpsPFTauDiscrimination*_*_*', 'keep *_shrinkingConePFTauProducer*_*_*', 'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 'keep *_shrinkingConePFTauDiscrimination*_*_*', 'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 'keep *_caloRecoTauTagInfoProducer_*_*', 'keep recoCaloTaus_caloRecoTauProducer*_*_*', 'keep *_caloRecoTauDiscrimination*_*_*', 'keep  *_offlinePrimaryVertices_*_*', 'keep  *_offlinePrimaryVerticesWithBS_*_*', 'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 'keep  *_nuclearInteractionMaker_*_*', 'keep *_generalV0Candidates_*_*', 'keep recoGsfElectronCores_gsfElectronCores_*_*', 'keep recoGsfElectrons_gsfElectrons_*_*', 'keep floatedmValueMap_eidRobustLoose_*_*', 'keep floatedmValueMap_eidRobustTight_*_*', 'keep floatedmValueMap_eidRobustHighEnergy_*_*', 'keep floatedmValueMap_eidLoose_*_*', 'keep floatedmValueMap_eidTight_*_*', 'keep recoPhotons_photons_*_*', 'keep recoPhotonCores_photonCore_*_*', 'keep recoConversions_conversions_*_*', 'drop *_conversions_uncleanedConversions_*', 'keep recoConversions_trackerOnlyConversions_*_*', 'keep recoTracks_ckfOutInTracksFromConversions_*_*', 'keep recoTracks_ckfInOutTracksFromConversions_*_*', 'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 'keep *_PhotonIDProd_*_*', 'keep *_hfRecoEcalCandidate_*_*', 'keep *_hfEMClusters_*_*', 'keep *_pixelTracks_*_*', 'keep *_pixelVertices_*_*', 'drop CaloTowersSorted_towerMakerPF_*_*', 'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 'keep recoPFClusters_particleFlowClusterECAL_*_*', 'keep recoPFClusters_particleFlowClusterHCAL_*_*', 'keep recoPFClusters_particleFlowClusterHFEM_*_*', 'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 'keep recoPFClusters_particleFlowClusterPS_*_*', 'keep recoPFBlocks_particleFlowBlock_*_*', 'keep recoPFCandidates_particleFlow_*_*', 'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 'keep *_pfElectronTranslator_*_*')+cms.untracked.vstring('keep *_trackerDrivenElectronSeeds_preid_*', 'keep *_offlineBeamSpot_*_*', 'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 'keep *_l1GtRecord_*_*', 'keep *_l1GtTriggerMenuLite_*_*', 'keep *_conditionsInEdm_*_*', 'keep *_l1extraParticles_*_*', 'keep L1MuGMTReadoutCollection_gtDigis_*_*', 'keep L1GctEmCand*_gctDigis_*_*', 'keep L1GctJetCand*_gctDigis_*_*', 'keep L1GctEtHad*_gctDigis_*_*', 'keep L1GctEtMiss*_gctDigis_*_*', 'keep L1GctEtTotal*_gctDigis_*_*', 'keep L1GctHtMiss*_gctDigis_*_*', 'keep L1GctJetCounts*_gctDigis_*_*', 'keep L1GctHFRingEtSums*_gctDigis_*_*', 'keep L1GctHFBitCounts*_gctDigis_*_*', 'keep LumiDetails_lumiProducer_*_*', 'keep LumiSummary_lumiProducer_*_*', 'drop *_hlt*_*_*', 'keep *_hltL1GtObjectMap_*_*', 'keep edmTriggerResults_*_*_*', 'keep triggerTriggerEvent_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep L1AcceptBunchCrossings_*_*_*', 'keep L1TriggerScalerss_*_*_*', 'keep Level1TriggerScalerss_*_*_*', 'keep LumiScalerss_*_*_*', 'keep BeamSpotOnlines_*_*_*', 'keep DcsStatuss_*_*_*', 'keep *_logErrorHarvester_*_*', 'keep LHERunInfoProduct_source_*_*', 'keep LHEEventProduct_source_*_*', 'keep GenRunInfoProduct_generator_*_*', 'keep GenEventInfoProduct_generator_*_*', 'keep edmHepMCProduct_generator_*_*', 'keep *_genParticles_*_*', 'keep recoGenMETs_*_*_*', 'keep *_kt4GenJets_*_*', 'keep *_kt6GenJets_*_*', 'keep *_ak5GenJets_*_*', 'keep *_ak7GenJets_*_*', 'keep *_iterativeCone5GenJets_*_*', 'keep *_genParticle_*_*', 'keep edmHepMCProduct_source_*_*', 'keep SimTracks_g4SimHits_*_*', 'keep SimVertexs_g4SimHits_*_*', 'keep *_allTrackMCMatch_*_*', 'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 'keep PileupSummaryInfo_*_*_*', 'keep *_MEtoEDMConverter_*_*', 'keep *_hiGlobalPrimTracks_*_*', 'keep *_hiSelectedTracks_*_*', 'keep recoVertexs_hiPixelMedianVertex_*_*', 'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 'keep recoVertexs_hiSelectedVertex_*_*', 'keep *_*_APVCM_*', 'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 'keep *_*CaloJets_*_*', 'keep *_*HiGenJets_*_*', 'keep recoSuperClusters_*_*_*', 'keep recoCaloClusters_*_*_*', 'keep EcalRecHitsSorted_*_*_*', 'keep floatedmValueMap_*_*_*', 'keep recoEvtPlanes_hiEvtPlane_*_*', 'keep recoCentrality*_hiCentrality_*_*', 'keep *_hiSignal_*_*', 'keep *_hiGenParticles_*_*'))
)

process.REPACKRAWEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*')
)

process.REPACKRAWSIMEventContent = cms.PSet(
    splitLevel = cms.untracked.int32(0),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep PileupSummaryInfo_*_*_*', 
        'keep LHERunInfoProduct_source_*_*', 
        'keep LHEEventProduct_source_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*')
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedSecondaryVertexMVABJetTags_*_*', 
        'keep *_softElectronBJetTags_*_*', 
        'keep *_softElectronByIP3dBJetTags_*_*', 
        'keep *_softElectronByPtBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*')
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedSecondaryVertexMVABJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_btagSoftElectrons_*_*', 
        'keep *_softElectronCands_*_*', 
        'keep *_softPFElectrons_*_*', 
        'keep *_softElectronTagInfos_*_*', 
        'keep *_softElectronBJetTags_*_*', 
        'keep *_softElectronByIP3dBJetTags_*_*', 
        'keep *_softElectronByPtBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*')
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedSecondaryVertexMVABJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_btagSoftElectrons_*_*', 
        'keep *_softElectronCands_*_*', 
        'keep *_softPFElectrons_*_*', 
        'keep *_softElectronTagInfos_*_*', 
        'keep *_softElectronBJetTags_*_*', 
        'keep *_softElectronByIP3dBJetTags_*_*', 
        'keep *_softElectronByPtBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*')
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridBarrelSuperClusters_*', 
        'keep recoCaloClusters_multi5x5BasicClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*')
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep *_reducedEcalRecHits*_*_*', 
        'keep *_interestingEcalDetId*_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5*_*_*', 
        'keep *_correctedMulti5x5*_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*')
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHits*_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5BasicClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*')
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_trackerOnlyConversions_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*')
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_gsfElectronCores_*_*', 
        'keep *_gsfElectrons_*_*', 
        'keep *_eidRobustLoose_*_*', 
        'keep *_eidRobustTight_*_*', 
        'keep *_eidRobustHighEnergy_*_*', 
        'keep *_eidLoose_*_*', 
        'keep *_eidTight_*_*', 
        'keep *_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep *_photonCore_*_*', 
        'keep *_photons_*_*', 
        'keep *_trackerOnlyConversions_*_*', 
        'keep *_ckfOutInTracksFromConversions_*_*', 
        'keep *_ckfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*')
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_trackerOnlyConversions_*_*', 
        'keep recoTracks_ckfOutInTracksFromConversions_*_*', 
        'keep recoTracks_ckfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*')
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_kt4GenJets_*_*', 
        'keep *_kt6GenJets_*_*', 
        'keep *_ak5GenJets_*_*', 
        'keep *_ak7GenJets_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_kt4GenJets_*_*', 
        'keep *_kt6GenJets_*_*', 
        'keep *_ak5GenJets_*_*', 
        'keep *_ak7GenJets_*_*', 
        'keep *_iterativeCone5GenJets_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHIAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHIFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGlobalPrimTracks_*_*', 
        'keep *_hiSelectedTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHIRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGlobalPrimTracks_*_*', 
        'keep *_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHiCentralityAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHiCentralityFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHiCentralityRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*')
)

process.RecoHiEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep floatedmValueMap_*_*_*')
)

process.RecoHiEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*')
)

process.RecoHiEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*')
)

process.RecoHiEvtPlaneAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*')
)

process.RecoHiEvtPlaneFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*')
)

process.RecoHiEvtPlaneRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*')
)

process.RecoHiJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*')
)

process.RecoHiJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*CaloJets_*_*', 
        'keep *_*HiGenJets_*_*')
)

process.RecoHiMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoHiMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoHiMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoHiTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*')
)

process.RecoHiTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGlobalPrimTracks_*_*', 
        'keep *_hiSelectedTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*')
)

process.RecoHiTrackerLocalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*')
)

process.RecoHiTrackerLocalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*')
)

process.RecoHiTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGlobalPrimTracks_*_*', 
        'keep *_hiSelectedTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*')
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_ak5TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak5JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak5JetExtender_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_ak5JetID_*_*', 
        'keep *_ak7JetID_*_*', 
        'keep *_kt4JetID_*_*', 
        'keep *_kt6JetID_*_*', 
        'keep *_ak7BasicJets_*_*', 
        'keep *_ak7CastorJetID_*_*')
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloJets_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoTrackJets_*_*_*', 
        'keep recoJPTJets_*_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_ic5JetTracksAssociatorAtVertex_*_*', 
        'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 
        'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_iterativeCone5JetExtender_*_*', 
        'keep *_sisCone5JetTracksAssociatorAtVertex_*_*', 
        'keep *_sisCone5JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_sisCone5JetExtender_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak5JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5JetExtender_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_ak5JetID_*_*', 
        'keep *_ak7JetID_*_*', 
        'keep *_sc5JetID_*_*', 
        'keep *_sc7JetID_*_*', 
        'keep *_ic5JetID_*_*', 
        'keep *_ic7JetID_*_*', 
        'keep *_gk5JetID_*_*', 
        'keep *_gk7JetID_*_*', 
        'keep *_kt4JetID_*_*', 
        'keep *_kt6JetID_*_*', 
        'keep *_ca4JetID_*_*', 
        'keep *_ca6JetID_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_iterativeCone5CaloJets_*_*', 
        'keep *_iterativeCone15CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_iterativeCone5PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_ak5TrackJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep *_ak7BasicJets_*_*', 
        'keep *_ak7CastorJetID_*_*')
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_iterativeCone5CaloJets_*_*', 
        'keep *_iterativeCone15CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_iterativeCone5PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_ak5TrackJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ic5JetTracksAssociatorAtVertex_*_*', 
        'keep *_iterativeCone5JetTracksAssociatorAtVertex_*_*', 
        'keep *_iterativeCone5JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_iterativeCone5JetExtender_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak5JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak5JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak5JetExtender_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_ak5JetID_*_*', 
        'keep *_ak7JetID_*_*', 
        'keep *_ic5JetID_*_*', 
        'keep *_kt4JetID_*_*', 
        'keep *_kt6JetID_*_*', 
        'keep *_ak7BasicJets_*_*', 
        'keep *_ak7CastorJetID_*_*')
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_castorreco_*_*')
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_ecalGlobalUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*')
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*')
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_met_*_*', 
        'keep recoCaloMETs_metNoHF_*_*', 
        'keep recoCaloMETs_corMetGlobalMuons_*_*', 
        'keep recoMETs_htMetAK5_*_*', 
        'keep recoMETs_htMetAK7_*_*', 
        'keep recoMETs_htMetIC5_*_*', 
        'keep recoMETs_htMetKT4_*_*', 
        'keep recoMETs_htMetKT6_*_*', 
        'keep recoMETs_tcMet_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_met_*_*', 
        'keep recoCaloMETs_metNoHF_*_*', 
        'keep recoCaloMETs_corMetGlobalMuons_*_*', 
        'keep recoCaloMETs_metNoHFHO_*_*', 
        'keep recoCaloMETs_metOptHO_*_*', 
        'keep recoCaloMETs_metOpt_*_*', 
        'keep recoCaloMETs_metOptNoHFHO_*_*', 
        'keep recoCaloMETs_metOptNoHF_*_*', 
        'keep recoMETs_htMetAK5_*_*', 
        'keep recoMETs_htMetAK7_*_*', 
        'keep recoMETs_htMetIC5_*_*', 
        'keep recoMETs_htMetKT4_*_*', 
        'keep recoMETs_htMetKT6_*_*', 
        'keep recoMETs_tcMet_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_met_*_*', 
        'keep recoCaloMETs_metNoHF_*_*', 
        'keep recoCaloMETs_corMetGlobalMuons_*_*', 
        'keep recoCaloMETs_metNoHFHO_*_*', 
        'keep recoCaloMETs_metOptHO_*_*', 
        'keep recoCaloMETs_metOpt_*_*', 
        'keep recoCaloMETs_metOptNoHFHO_*_*', 
        'keep recoCaloMETs_metOptNoHF_*_*', 
        'keep recoMETs_htMetAK5_*_*', 
        'keep recoMETs_htMetAK7_*_*', 
        'keep recoMETs_htMetIC5_*_*', 
        'keep recoMETs_htMetKT4_*_*', 
        'keep recoMETs_htMetKT6_*_*', 
        'keep recoMETs_tcMet_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonTCMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 
        'keep uintedmValueMap_cosmicsVeto_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*')
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 
        'keep uintedmValueMap_cosmicsVeto_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*')
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muParamGlobalIsoDepositGsTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalEcal_*_*', 
        'keep *_muParamGlobalIsoDepositCalHcal_*_*', 
        'keep *_muParamGlobalIsoDepositCtfTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muParamGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_globalCosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTrackExtras_globalCosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_globalCosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep recoMuonTimeExtraedmValueMap_muons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoTracks_globalCosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoTracks_globalCosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoMuonCosmicCompatibilityedmValueMap_cosmicsVeto_*_*', 
        'keep uintedmValueMap_cosmicsVeto_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*')
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHFEM_*_*', 
        'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*')
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHFEM_*_*', 
        'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*')
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pfRecoTauTagInfoProducer_*_*', 
        'keep *_hpsPFTauProducer*_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_shrinkingConePFTauProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 
        'keep *_shrinkingConePFTauDiscrimination*_*_*', 
        'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_caloRecoTauTagInfoProducer_*_*', 
        'keep recoCaloTaus_caloRecoTauProducer*_*_*', 
        'keep *_caloRecoTauDiscrimination*_*_*')
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pfRecoTauTagInfoProducer_*_*', 
        'keep *_fixedConePFTauProducer*_*_*', 
        'keep *_fixedConePFTauDiscrimination*_*_*', 
        'keep *_hpsPFTauProducer*_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_shrinkingConePFTauProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 
        'keep *_shrinkingConePFTauDiscrimination*_*_*', 
        'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_caloRecoTauTagInfoProducer_*_*', 
        'keep recoCaloTaus_caloRecoTauProducer*_*_*', 
        'keep *_caloRecoTauDiscrimination*_*_*')
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pfRecoTauTagInfoProducer_*_*', 
        'keep *_fixedConePFTauProducer*_*_*', 
        'keep *_fixedConePFTauDiscrimination*_*_*', 
        'keep *_hpsPFTauProducer*_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_shrinkingConePFTauProducer*_*_*', 
        'keep *_shrinkingConePFTauDecayModeIndexProducer*_*_*', 
        'keep *_shrinkingConePFTauDiscrimination*_*_*', 
        'keep *_TCTauJetPlusTrackZSPCorJetAntiKt5_*_*', 
        'keep *_caloRecoTauTagInfoProducer_*_*', 
        'keep recoCaloTaus_caloRecoTauProducer*_*_*', 
        'keep *_caloRecoTauDiscrimination*_*_*')
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*')
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxMedian_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*')
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_regionalCosmicTracks_*_*', 
        'keep recoTrackExtras_regionalCosmicTracks_*_*', 
        'keep TrackingRecHitsOwned_regionalCosmicTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxMedian_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*')
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices_*_*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*')
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices_*_*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*')
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices_*_*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*')
)

process.SK_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.003),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0)
)

process.SK_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.025),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0)
)

process.ST_ME1234 = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(20),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.ST_ME1A = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(24),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        SCCSP5 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCECF4 = cms.bool(False),
        SCCSP1 = cms.int32(0),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCCSP4 = cms.int32(0),
        SCECF1 = cms.bool(False),
        Debug = cms.untracked.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*')
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*')
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*')
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*')
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfo_*_*_*')
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mergedtruth_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoExtended_*_*_*')
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep CrossingFramePlaybackInfoExtended_*_*_*', 
        'keep PileupSummaryInfo_*_*_*')
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfo_*_*_*')
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*')
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'keep *_allTrackMCMatch_*_*')
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*')
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.TC_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.02),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.003),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2)
)

process.TC_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.013),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.00198),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6)
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSTREN9 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN0 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSMCCE2 = cms.bool(False),
        TSTREN19 = cms.bool(True),
        TSMCCE1 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSSMSK2 = cms.int32(312),
        TSTREN10 = cms.bool(True),
        TSMMSK2 = cms.int32(312),
        TSMMSK1 = cms.int32(312),
        TSMHSP = cms.int32(1),
        TSSNOE2 = cms.bool(False),
        TSSNOE1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSCCEC = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMHTE2 = cms.bool(False),
        Debug = cms.untracked.bool(False),
        TSSHTE2 = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSSHTE1 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSSNOEC = cms.bool(False),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSSHTEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSMHTEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSSGS2 = cms.int32(1),
        TSMNOEC = cms.bool(False),
        TSSGS1 = cms.int32(1),
        TSTREN18 = cms.bool(True),
        TSMHTE1 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False),
    DIGIOFFSET = cms.int32(500),
    SINCROTIME = cms.int32(0)
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    nSigmaThresholdPt = cms.double(5.0),
    minHitsThresholdPt = cms.int32(3),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            DoWireCorr = cms.bool(False),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False)
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            debug = cms.bool(False),
            PruneCut = cms.double(100.0),
            CSCsegments = cms.InputTag("csc2DSegments"),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            CSCTimeOffset = cms.double(0.0)
        ),
        UseDT = cms.bool(True),
        ErrorDT = cms.double(3.1),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorCSC = cms.double(7.0),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    dRHcal = cms.double(9999.0),
    dREcal = cms.double(9999.0),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    useEcal = cms.bool(True),
    dREcalPreselection = cms.double(0.05),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    dRMuon = cms.double(9999.0),
    propagateAllDirections = cms.bool(True),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    useHO = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    usePreshower = cms.bool(False),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    dRHcalPreselection = cms.double(0.2),
    useMuon = cms.bool(True),
    useCalo = cms.bool(False),
    accountForTrajectoryChangeCalo = cms.bool(False),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRMuonPreselection = cms.double(0.2),
    truthMatch = cms.bool(False),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    useHcal = cms.bool(True)
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*')
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep *_electronGsfTracks_*_*')
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*')
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        SPRGCOMP = cms.int32(2),
        FHTMSK = cms.int32(0),
        DD = cms.int32(18),
        SSLMSK = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        Debug = cms.untracked.int32(0),
        FSLMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SHTMSK = cms.int32(0),
        TRGENB3 = cms.int32(1),
        SHISM = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        FLTMSK = cms.int32(1),
        LTS = cms.int32(0),
        SLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        TRGENB9 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        FHTPRF = cms.int32(1),
        LTF = cms.int32(0),
        TRGENB1 = cms.int32(1),
        TRGENB0 = cms.int32(1),
        FHISM = cms.int32(0),
        TRGENB2 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        REUSEO = cms.int32(1),
        REUSEI = cms.int32(1),
        BTIC = cms.int32(32)
    )
)

process.ZeroBiasClusterizer = cms.PSet(
    ChannelThreshold = cms.double(2.0),
    MaxSequentialBad = cms.uint32(1),
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    MaxSequentialHoles = cms.uint32(0),
    MaxAdjacentBad = cms.uint32(0),
    QualityLabel = cms.string('unbiased'),
    SeedThreshold = cms.double(3.0),
    ClusterThreshold = cms.double(5.0)
)

process.configurationMetadata = cms.untracked.PSet(
    version = cms.untracked.string('$Revision: 1.232.2.6 $'),
    annotation = cms.untracked.string(' nevts:0'),
    name = cms.untracked.string('PyReleaseValidation')
)

process.cscRecHitDParameters = cms.PSet(
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0)
)

process.dphiScale = cms.PSet(
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0)
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalGlobalUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.fieldScaling = cms.PSet(
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991)
)

process.isolationInputParameters = cms.PSet(
    horeco = cms.InputTag("horeco"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    track = cms.InputTag("highPurityTracks"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters")
)

process.isolationSumsCalculator = cms.PSet(
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    barrelEcalRecHitCollection = cms.string('EcalRecHitsEB'),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    trackProducer = cms.InputTag("generalTracks"),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    barrelEcalRecHitProducer = cms.string('ecalRecHit'),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.1),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.08),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    longImpactParameterA_Barrel = cms.double(0.2),
    severityRecHitThreshold = cms.double(5.0),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    transImpactParameterA_Barrel = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    transImpactParameterA_Endcap = cms.double(0.1),
    ComponentName = cms.string('isolationSumsCalculator'),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    longImpactParameterB_Endcap = cms.double(0.2),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    transImpactParameterB_Endcap = cms.double(0.1),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    HcalRecHitCollection = cms.string(''),
    vetoClustered = cms.bool(False),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.08),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    spikeIdThreshold = cms.double(0.95),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    endcapEcalRecHitCollection = cms.string('EcalRecHitsEE'),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    severityLevelCut = cms.int32(4),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    HcalRecHitProducer = cms.string('towerMaker'),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    modulePhiBoundary = cms.double(0.0087),
    spikeIdString = cms.string('kSwissCrossBordersIncluded'),
    EcalRecHitThreshEtA_Endcap = cms.double(0.1),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    transImpactParameterB_Barrel = cms.double(0.1),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    recHitFlagsToBeExcluded = cms.vint32(3, 4, 8, 9),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    endcapEcalRecHitProducer = cms.string('ecalRecHit'),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(10)
)

process.options = cms.untracked.PSet(

)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-0.4)
)

process.ptSeedParameterization = cms.PSet(
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874)
)

process.schedule = cms.Schedule(process.raw2digi_step,process.L1Reco_step,process.reconstruction_step,process.pathALCARECOSiStripCalZeroBias,process.l1hwval_step,process.dqmoffline_step,process.endjob_step)
